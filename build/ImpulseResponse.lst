ARM GAS  /tmp/ccw5fbVv.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 2
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"ImpulseResponse.cpp"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text._ZN15ImpulseResponseC2Ev,"ax",%progbits
  17              		.align	1
  18              		.p2align 2,,3
  19              		.global	_ZN15ImpulseResponseC2Ev
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv5-d16
  26              	_ZN15ImpulseResponseC2Ev:
  27              	.LVL0:
  28              	.LFB8115:
  29              		.file 1 "ImpulseResponse/ImpulseResponse.cpp"
   1:ImpulseResponse/ImpulseResponse.cpp **** //
   2:ImpulseResponse/ImpulseResponse.cpp **** //  ImpulseResponse.cpp
   3:ImpulseResponse/ImpulseResponse.cpp **** //  NeuralAmpModeler-macOS
   4:ImpulseResponse/ImpulseResponse.cpp **** //
   5:ImpulseResponse/ImpulseResponse.cpp **** //  Created by Steven Atkinson on 12/30/22.
   6:ImpulseResponse/ImpulseResponse.cpp **** //
   7:ImpulseResponse/ImpulseResponse.cpp **** //  Modified by Keith Bloemer on 12/28/23
   8:ImpulseResponse/ImpulseResponse.cpp **** //    Greatly simplified by assuming 1 channel, 1 input per Process call, and constant samplerate.
   9:ImpulseResponse/ImpulseResponse.cpp **** //    For initial investigation into running IR's on the Daisy Seed
  10:ImpulseResponse/ImpulseResponse.cpp **** 
  11:ImpulseResponse/ImpulseResponse.cpp **** #include "ImpulseResponse.h"
  12:ImpulseResponse/ImpulseResponse.cpp **** 
  13:ImpulseResponse/ImpulseResponse.cpp **** 
  14:ImpulseResponse/ImpulseResponse.cpp **** ImpulseResponse::ImpulseResponse()
  30              		.loc 1 14 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		.loc 1 14 1 is_stmt 0 view .LVU1
  35 0000 10B5     		push	{r4, lr}
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 4, -8
  38              		.cfi_offset 14, -4
  39              		.loc 1 14 1 view .LVU2
  40 0002 0446     		mov	r4, r0
  41              	.LBB1605:
  42              		.loc 1 14 34 view .LVU3
  43 0004 FFF7FEFF 		bl	_ZN7HistoryC2Ev
  44              	.LVL1:
ARM GAS  /tmp/ccw5fbVv.s 			page 2


  45              	.LBB1606:
  46              	.LBI1606:
  47              		.file 2 "/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/
   1:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** // Vector implementation -*- C++ -*-
   2:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
   3:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** //
   5:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** // software; you can redistribute it and/or modify it under the
   7:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** // terms of the GNU General Public License as published by the
   8:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** // any later version.
  10:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
  11:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** // This library is distributed in the hope that it will be useful,
  12:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** // GNU General Public License for more details.
  15:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
  16:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** // 3.1, as published by the Free Software Foundation.
  19:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
  20:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** // You should have received a copy of the GNU General Public License and
  21:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** // <http://www.gnu.org/licenses/>.
  24:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
  25:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** /*
  26:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****  *
  27:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****  * Copyright (c) 1994
  28:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****  * Hewlett-Packard Company
  29:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****  *
  30:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  33:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****  * that both that copyright notice and this permission notice appear
  34:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****  * representations about the suitability of this software for any
  36:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****  *
  38:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****  *
  39:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****  * Copyright (c) 1996
  40:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****  *
  42:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  45:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****  * that both that copyright notice and this permission notice appear
  46:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****  * representations about the suitability of this  software for any
  48:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****  */
  50:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
  51:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** /** @file bits/stl_vector.h
  52:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****  *  This is an internal header file, included by other library headers.
  53:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****  *  Do not attempt to use it directly. @headername{vector}
  54:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****  */
ARM GAS  /tmp/ccw5fbVv.s 			page 3


  55:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
  56:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #ifndef _STL_VECTOR_H
  57:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #define _STL_VECTOR_H 1
  58:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
  59:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #include <bits/stl_iterator_base_funcs.h>
  60:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #include <bits/functexcept.h>
  61:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #include <bits/concept_check.h>
  62:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
  63:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #include <initializer_list>
  64:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #endif
  65:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #if __cplusplus > 201703L
  66:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** # include <compare>
  67:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #endif
  68:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
  69:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #include <debug/assertions.h>
  70:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
  71:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #if _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
  72:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** extern "C" void
  73:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** __sanitizer_annotate_contiguous_container(const void*, const void*,
  74:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 					  const void*, const void*);
  75:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #endif
  76:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
  77:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** namespace std _GLIBCXX_VISIBILITY(default)
  78:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** {
  79:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  80:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  81:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
  82:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****   /// See bits/stl_deque.h's _Deque_base for an explanation.
  83:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****   template<typename _Tp, typename _Alloc>
  84:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****     struct _Vector_base
  85:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****     {
  86:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
  87:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	rebind<_Tp>::other _Tp_alloc_type;
  88:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer
  89:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        	pointer;
  90:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
  91:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       struct _Vector_impl_data
  92:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       {
  93:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	pointer _M_start;
  94:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	pointer _M_finish;
  95:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	pointer _M_end_of_storage;
  96:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
  97:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	_Vector_impl_data() _GLIBCXX_NOEXCEPT
  98:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	: _M_start(), _M_finish(), _M_end_of_storage()
  99:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	{ }
 100:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 101:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 102:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
 103:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 104:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  _M_end_of_storage(__x._M_end_of_storage)
 105:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 106:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #endif
 107:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 108:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	void
 109:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
 110:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	{
 111:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  _M_start = __x._M_start;
ARM GAS  /tmp/ccw5fbVv.s 			page 4


 112:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  _M_finish = __x._M_finish;
 113:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  _M_end_of_storage = __x._M_end_of_storage;
 114:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	}
 115:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 116:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	void
 117:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	_M_swap_data(_Vector_impl_data& __x) _GLIBCXX_NOEXCEPT
 118:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	{
 119:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  // Do not use std::swap(_M_start, __x._M_start), etc as it loses
 120:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  // information used by TBAA.
 121:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  _Vector_impl_data __tmp;
 122:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  __tmp._M_copy_data(*this);
 123:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  _M_copy_data(__x);
 124:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  __x._M_copy_data(__tmp);
 125:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	}
 126:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       };
 127:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 128:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       struct _Vector_impl
 129:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	: public _Tp_alloc_type, public _Vector_impl_data
 130:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       {
 131:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 132:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	    is_nothrow_default_constructible<_Tp_alloc_type>::value)
 133:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	: _Tp_alloc_type()
 134:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	{ }
 135:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 136:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 137:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	: _Tp_alloc_type(__a)
 138:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	{ }
 139:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 140:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 141:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	// Not defaulted, to enforce noexcept(true) even when
 142:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	// !is_nothrow_move_constructible<_Tp_alloc_type>.
 143:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	_Vector_impl(_Vector_impl&& __x) noexcept
 144:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	: _Tp_alloc_type(std::move(__x)), _Vector_impl_data(std::move(__x))
 145:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	{ }
 146:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 147:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type&& __a) noexcept
 148:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	: _Tp_alloc_type(std::move(__a))
 149:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	{ }
 150:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 151:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type&& __a, _Vector_impl&& __rv) noexcept
 152:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	: _Tp_alloc_type(std::move(__a)), _Vector_impl_data(std::move(__rv))
 153:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	{ }
 154:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #endif
 155:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 156:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #if _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
 157:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	template<typename = _Tp_alloc_type>
 158:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  struct _Asan
 159:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  {
 160:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	    typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>
 161:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	      ::size_type size_type;
 162:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 163:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	    static void _S_shrink(_Vector_impl&, size_type) { }
 164:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	    static void _S_on_dealloc(_Vector_impl&) { }
 165:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 166:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	    typedef _Vector_impl& _Reinit;
 167:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 168:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	    struct _Grow
ARM GAS  /tmp/ccw5fbVv.s 			page 5


 169:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	    {
 170:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	      _Grow(_Vector_impl&, size_type) { }
 171:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	      void _M_grew(size_type) { }
 172:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	    };
 173:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  };
 174:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 175:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	// Enable ASan annotations for memory obtained from std::allocator.
 176:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	template<typename _Up>
 177:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  struct _Asan<allocator<_Up> >
 178:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  {
 179:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	    typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>
 180:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	      ::size_type size_type;
 181:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 182:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	    // Adjust ASan annotation for [_M_start, _M_end_of_storage) to
 183:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	    // mark end of valid region as __curr instead of __prev.
 184:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	    static void
 185:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	    _S_adjust(_Vector_impl& __impl, pointer __prev, pointer __curr)
 186:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	    {
 187:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	      __sanitizer_annotate_contiguous_container(__impl._M_start,
 188:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 		  __impl._M_end_of_storage, __prev, __curr);
 189:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	    }
 190:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 191:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	    static void
 192:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	    _S_grow(_Vector_impl& __impl, size_type __n)
 193:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	    { _S_adjust(__impl, __impl._M_finish, __impl._M_finish + __n); }
 194:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 195:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	    static void
 196:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	    _S_shrink(_Vector_impl& __impl, size_type __n)
 197:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	    { _S_adjust(__impl, __impl._M_finish + __n, __impl._M_finish); }
 198:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 199:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	    static void
 200:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	    _S_on_dealloc(_Vector_impl& __impl)
 201:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	    {
 202:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	      if (__impl._M_start)
 203:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 		_S_adjust(__impl, __impl._M_finish, __impl._M_end_of_storage);
 204:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	    }
 205:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 206:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	    // Used on reallocation to tell ASan unused capacity is invalid.
 207:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	    struct _Reinit
 208:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	    {
 209:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	      explicit _Reinit(_Vector_impl& __impl) : _M_impl(__impl)
 210:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	      {
 211:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 		// Mark unused capacity as valid again before deallocating it.
 212:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 		_S_on_dealloc(_M_impl);
 213:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	      }
 214:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 215:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	      ~_Reinit()
 216:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	      {
 217:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 		// Mark unused capacity as invalid after reallocation.
 218:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 		if (_M_impl._M_start)
 219:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 		  _S_adjust(_M_impl, _M_impl._M_end_of_storage,
 220:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 			    _M_impl._M_finish);
 221:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	      }
 222:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 223:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	      _Vector_impl& _M_impl;
 224:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 225:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
ARM GAS  /tmp/ccw5fbVv.s 			page 6


 226:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	      _Reinit(const _Reinit&) = delete;
 227:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	      _Reinit& operator=(const _Reinit&) = delete;
 228:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #endif
 229:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	    };
 230:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 231:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	    // Tell ASan when unused capacity is initialized to be valid.
 232:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	    struct _Grow
 233:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	    {
 234:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	      _Grow(_Vector_impl& __impl, size_type __n)
 235:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	      : _M_impl(__impl), _M_n(__n)
 236:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	      { _S_grow(_M_impl, __n); }
 237:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 238:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	      ~_Grow() { if (_M_n) _S_shrink(_M_impl, _M_n); }
 239:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 240:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	      void _M_grew(size_type __n) { _M_n -= __n; }
 241:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 242:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 243:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	      _Grow(const _Grow&) = delete;
 244:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	      _Grow& operator=(const _Grow&) = delete;
 245:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #endif
 246:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	    private:
 247:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	      _Vector_impl& _M_impl;
 248:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	      size_type _M_n;
 249:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	    };
 250:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  };
 251:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 252:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_REINIT \
 253:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****   typename _Base::_Vector_impl::template _Asan<>::_Reinit const \
 254:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	__attribute__((__unused__)) __reinit_guard(this->_M_impl)
 255:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GROW(n) \
 256:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****   typename _Base::_Vector_impl::template _Asan<>::_Grow \
 257:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	__attribute__((__unused__)) __grow_guard(this->_M_impl, (n))
 258:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GREW(n) __grow_guard._M_grew(n)
 259:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_SHRINK(n) \
 260:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****   _Base::_Vector_impl::template _Asan<>::_S_shrink(this->_M_impl, n)
 261:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC \
 262:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****   _Base::_Vector_impl::template _Asan<>::_S_on_dealloc(this->_M_impl)
 263:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #else // ! (_GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR)
 264:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_REINIT
 265:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GROW(n)
 266:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GREW(n)
 267:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_SHRINK(n)
 268:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC
 269:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #endif // _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
 270:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       };
 271:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 272:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****     public:
 273:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       typedef _Alloc allocator_type;
 274:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 275:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       _Tp_alloc_type&
 276:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 277:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       { return this->_M_impl; }
 278:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 279:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       const _Tp_alloc_type&
 280:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 281:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       { return this->_M_impl; }
 282:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
ARM GAS  /tmp/ccw5fbVv.s 			page 7


 283:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       allocator_type
 284:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       get_allocator() const _GLIBCXX_NOEXCEPT
 285:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       { return allocator_type(_M_get_Tp_allocator()); }
 286:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 287:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 288:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       _Vector_base() = default;
 289:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #else
 290:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       _Vector_base() { }
 291:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #endif
 292:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 293:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 294:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       : _M_impl(__a) { }
 295:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 296:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       // Kept for ABI compatibility.
 297:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #if !_GLIBCXX_INLINE_VERSION
 298:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       _Vector_base(size_t __n)
 299:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       : _M_impl()
 300:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       { _M_create_storage(__n); }
 301:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #endif
 302:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 303:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       _Vector_base(size_t __n, const allocator_type& __a)
 304:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       : _M_impl(__a)
 305:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       { _M_create_storage(__n); }
 306:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 307:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 308:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       _Vector_base(_Vector_base&&) = default;
 309:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 310:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       // Kept for ABI compatibility.
 311:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** # if !_GLIBCXX_INLINE_VERSION
 312:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       _Vector_base(_Tp_alloc_type&& __a) noexcept
 313:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       : _M_impl(std::move(__a)) { }
 314:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 315:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       _Vector_base(_Vector_base&& __x, const allocator_type& __a)
 316:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       : _M_impl(__a)
 317:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       {
 318:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	if (__x.get_allocator() == __a)
 319:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  this->_M_impl._M_swap_data(__x._M_impl);
 320:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	else
 321:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  {
 322:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	    size_t __n = __x._M_impl._M_finish - __x._M_impl._M_start;
 323:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	    _M_create_storage(__n);
 324:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  }
 325:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       }
 326:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** # endif
 327:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 328:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       _Vector_base(const allocator_type& __a, _Vector_base&& __x)
 329:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       : _M_impl(_Tp_alloc_type(__a), std::move(__x._M_impl))
 330:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       { }
 331:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #endif
 332:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 333:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       ~_Vector_base() _GLIBCXX_NOEXCEPT
 334:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       {
 335:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	_M_deallocate(_M_impl._M_start,
 336:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 		      _M_impl._M_end_of_storage - _M_impl._M_start);
 337:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       }
 338:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 339:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****     public:
ARM GAS  /tmp/ccw5fbVv.s 			page 8


 340:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       _Vector_impl _M_impl;
 341:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 342:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       pointer
 343:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       _M_allocate(size_t __n)
 344:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       {
 345:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 346:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 347:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       }
 348:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 349:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       void
 350:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       _M_deallocate(pointer __p, size_t __n)
 351:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       {
 352:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 353:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	if (__p)
 354:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 355:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       }
 356:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 357:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****     protected:
 358:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       void
 359:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       _M_create_storage(size_t __n)
 360:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       {
 361:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	this->_M_impl._M_start = this->_M_allocate(__n);
 362:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_start;
 363:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 364:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       }
 365:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****     };
 366:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 367:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****   /**
 368:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****    *  @brief A standard container which offers fixed time access to
 369:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****    *  individual elements in any order.
 370:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****    *
 371:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****    *  @ingroup sequences
 372:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****    *
 373:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****    *  @tparam _Tp  Type of element.
 374:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_Tp>.
 375:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****    *
 376:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
 377:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****    *  <a href="tables.html#66">reversible container</a>, and a
 378:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****    *  <a href="tables.html#67">sequence</a>, including the
 379:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****    *  <a href="tables.html#68">optional sequence requirements</a> with the
 380:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****    *  %exception of @c push_front and @c pop_front.
 381:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****    *
 382:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****    *  In some terminology a %vector can be described as a dynamic
 383:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****    *  C-style array, it offers fast and efficient access to individual
 384:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****    *  elements in any order and saves the user from worrying about
 385:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****    *  memory and size allocation.  Subscripting ( @c [] ) access is
 386:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****    *  also provided as with C-style arrays.
 387:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****   */
 388:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****   template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
 389:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****     class vector : protected _Vector_base<_Tp, _Alloc>
 390:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****     {
 391:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #ifdef _GLIBCXX_CONCEPT_CHECKS
 392:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       // Concept requirements.
 393:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       typedef typename _Alloc::value_type		_Alloc_value_type;
 394:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** # if __cplusplus < 201103L
 395:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       __glibcxx_class_requires(_Tp, _SGIAssignableConcept)
 396:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** # endif
ARM GAS  /tmp/ccw5fbVv.s 			page 9


 397:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       __glibcxx_class_requires2(_Tp, _Alloc_value_type, _SameTypeConcept)
 398:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #endif
 399:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 400:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 401:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       static_assert(is_same<typename remove_cv<_Tp>::type, _Tp>::value,
 402:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  "std::vector must have a non-const, non-volatile value_type");
 403:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** # if __cplusplus > 201703L || defined __STRICT_ANSI__
 404:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       static_assert(is_same<typename _Alloc::value_type, _Tp>::value,
 405:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  "std::vector must have the same value_type as its allocator");
 406:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** # endif
 407:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #endif
 408:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 409:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       typedef _Vector_base<_Tp, _Alloc>			_Base;
 410:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       typedef typename _Base::_Tp_alloc_type		_Tp_alloc_type;
 411:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type>	_Alloc_traits;
 412:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 413:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****     public:
 414:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       typedef _Tp					value_type;
 415:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       typedef typename _Base::pointer			pointer;
 416:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       typedef typename _Alloc_traits::const_pointer	const_pointer;
 417:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       typedef typename _Alloc_traits::reference		reference;
 418:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       typedef typename _Alloc_traits::const_reference	const_reference;
 419:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<pointer, vector> iterator;
 420:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<const_pointer, vector>
 421:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       const_iterator;
 422:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       typedef std::reverse_iterator<const_iterator>	const_reverse_iterator;
 423:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       typedef std::reverse_iterator<iterator>		reverse_iterator;
 424:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       typedef size_t					size_type;
 425:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       typedef ptrdiff_t					difference_type;
 426:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       typedef _Alloc					allocator_type;
 427:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 428:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****     private:
 429:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 430:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       static constexpr bool
 431:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       _S_nothrow_relocate(true_type)
 432:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       {
 433:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	return noexcept(std::__relocate_a(std::declval<pointer>(),
 434:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 					  std::declval<pointer>(),
 435:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 					  std::declval<pointer>(),
 436:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 					  std::declval<_Tp_alloc_type&>()));
 437:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       }
 438:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 439:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       static constexpr bool
 440:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       _S_nothrow_relocate(false_type)
 441:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       { return false; }
 442:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 443:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       static constexpr bool
 444:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       _S_use_relocate()
 445:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       {
 446:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	// Instantiating std::__relocate_a might cause an error outside the
 447:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	// immediate context (in __relocate_object_a's noexcept-specifier),
 448:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	// so only do it if we know the type can be move-inserted into *this.
 449:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 450:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       }
 451:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 452:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       static pointer
 453:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       _S_do_relocate(pointer __first, pointer __last, pointer __result,
ARM GAS  /tmp/ccw5fbVv.s 			page 10


 454:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 		     _Tp_alloc_type& __alloc, true_type) noexcept
 455:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       {
 456:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	return std::__relocate_a(__first, __last, __result, __alloc);
 457:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       }
 458:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 459:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       static pointer
 460:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       _S_do_relocate(pointer, pointer, pointer __result,
 461:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 		     _Tp_alloc_type&, false_type) noexcept
 462:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       { return __result; }
 463:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 464:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       static pointer
 465:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       _S_relocate(pointer __first, pointer __last, pointer __result,
 466:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 		  _Tp_alloc_type& __alloc) noexcept
 467:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       {
 468:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	using __do_it = __bool_constant<_S_use_relocate()>;
 469:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 470:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       }
 471:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #endif // C++11
 472:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 473:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****     protected:
 474:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       using _Base::_M_allocate;
 475:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       using _Base::_M_deallocate;
 476:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       using _Base::_M_impl;
 477:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       using _Base::_M_get_Tp_allocator;
 478:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 479:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****     public:
 480:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       // [23.2.4.1] construct/copy/destroy
 481:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       // (assign() and get_allocator() are also listed in this section)
 482:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 483:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**
 484:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @brief  Creates a %vector with no elements.
 485:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        */
 486:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 487:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       vector() = default;
  48              		.loc 2 487 7 is_stmt 1 view .LVU4
  49              	.LBB1607:
  50              	.LBI1607:
 288:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #else
  51              		.loc 2 288 7 view .LVU5
  52              	.LBB1608:
  53              	.LBI1608:
 131:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	    is_nothrow_default_constructible<_Tp_alloc_type>::value)
  54              		.loc 2 131 2 view .LVU6
  55              	.LBB1609:
  56              	.LBI1609:
  57              		.file 3 "/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/
   1:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** // Allocators -*- C++ -*-
   2:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** 
   3:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** //
   5:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** // software; you can redistribute it and/or modify it under the
   7:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** // terms of the GNU General Public License as published by the
   8:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** // any later version.
  10:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** 
  11:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** // This library is distributed in the hope that it will be useful,
ARM GAS  /tmp/ccw5fbVv.s 			page 11


  12:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** // GNU General Public License for more details.
  15:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** 
  16:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** 
  20:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** // You should have received a copy of the GNU General Public License and
  21:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** // <http://www.gnu.org/licenses/>.
  24:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** 
  25:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** /*
  26:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****  * Copyright (c) 1996-1997
  27:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****  * Silicon Graphics Computer Systems, Inc.
  28:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****  *
  29:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****  * Permission to use, copy, modify, distribute and sell this software
  30:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****  * and its documentation for any purpose is hereby granted without fee,
  31:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****  * provided that the above copyright notice appear in all copies and
  32:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****  * that both that copyright notice and this permission notice appear
  33:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****  * in supporting documentation.  Silicon Graphics makes no
  34:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****  * representations about the suitability of this software for any
  35:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  36:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****  */
  37:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** 
  38:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** /** @file bits/allocator.h
  39:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****  *  This is an internal header file, included by other library headers.
  40:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****  *  Do not attempt to use it directly. @headername{memory}
  41:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****  */
  42:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** 
  43:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** #ifndef _ALLOCATOR_H
  44:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** #define _ALLOCATOR_H 1
  45:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** 
  46:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** #include <bits/c++allocator.h> // Define the base class to std::allocator.
  47:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** #include <bits/memoryfwd.h>
  48:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** #if __cplusplus >= 201103L
  49:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** #include <type_traits>
  50:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** #endif
  51:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** 
  52:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** #define __cpp_lib_incomplete_container_elements 201505
  53:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** 
  54:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** namespace std _GLIBCXX_VISIBILITY(default)
  55:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** {
  56:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  57:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** 
  58:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****   /**
  59:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****    *  @addtogroup allocators
  60:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****    *  @{
  61:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****    */
  62:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** 
  63:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****   /// allocator<void> specialization.
  64:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****   template<>
  65:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****     class allocator<void>
  66:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****     {
  67:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****     public:
  68:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****       typedef void        value_type;
ARM GAS  /tmp/ccw5fbVv.s 			page 12


  69:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****       typedef size_t      size_type;
  70:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****       typedef ptrdiff_t   difference_type;
  71:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** #if __cplusplus <= 201703L
  72:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****       typedef void*       pointer;
  73:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****       typedef const void* const_pointer;
  74:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** 
  75:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****       template<typename _Tp1>
  76:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** 	struct rebind
  77:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** 	{ typedef allocator<_Tp1> other; };
  78:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** #else
  79:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****       allocator() = default;
  80:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** 
  81:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****       template<typename _Up>
  82:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** 	constexpr
  83:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** 	allocator(const allocator<_Up>&) { }
  84:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** #endif // ! C++20
  85:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** 
  86:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** #if __cplusplus >= 201103L && __cplusplus <= 201703L
  87:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  88:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
  89:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****       typedef true_type propagate_on_container_move_assignment;
  90:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** 
  91:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****       typedef true_type is_always_equal;
  92:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** 
  93:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****       template<typename _Up, typename... _Args>
  94:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** 	void
  95:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** 	construct(_Up* __p, _Args&&... __args)
  96:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
  97:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** 	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  98:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** 
  99:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****       template<typename _Up>
 100:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** 	void
 101:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** 	destroy(_Up* __p)
 102:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** 	noexcept(std::is_nothrow_destructible<_Up>::value)
 103:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** 	{ __p->~_Up(); }
 104:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** #endif // C++11 to C++17
 105:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****     };
 106:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** 
 107:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****   /**
 108:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****    * @brief  The @a standard allocator, as per [20.4].
 109:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****    *
 110:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****    *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/memory.html#std.util.memory.allocator
 111:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****    *  for further details.
 112:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****    *
 113:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****    *  @tparam  _Tp  Type of allocated object.
 114:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****    */
 115:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****   template<typename _Tp>
 116:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****     class allocator : public __allocator_base<_Tp>
 117:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****     {
 118:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****     public:
 119:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****       typedef _Tp        value_type;
 120:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****       typedef size_t     size_type;
 121:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****       typedef ptrdiff_t  difference_type;
 122:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** #if __cplusplus <= 201703L
 123:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****       typedef _Tp*       pointer;
 124:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****       typedef const _Tp* const_pointer;
 125:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****       typedef _Tp&       reference;
ARM GAS  /tmp/ccw5fbVv.s 			page 13


 126:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****       typedef const _Tp& const_reference;
 127:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** 
 128:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****       template<typename _Tp1>
 129:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** 	struct rebind
 130:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** 	{ typedef allocator<_Tp1> other; };
 131:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** #endif
 132:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** 
 133:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** #if __cplusplus >= 201103L
 134:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 135:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
 136:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****       typedef true_type propagate_on_container_move_assignment;
 137:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** 
 138:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****       typedef true_type is_always_equal;
 139:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** #endif
 140:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** 
 141:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 142:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****       // 3035. std::allocator's constructors should be constexpr
 143:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****       _GLIBCXX20_CONSTEXPR
 144:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****       allocator() _GLIBCXX_NOTHROW { }
  58              		.loc 3 144 7 view .LVU7
  59              	.LBB1610:
  60              	.LBI1610:
  61              		.file 4 "/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/n
   1:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** // Allocator that wraps operator new -*- C++ -*-
   2:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** 
   3:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** //
   5:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** // software; you can redistribute it and/or modify it under the
   7:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** // terms of the GNU General Public License as published by the
   8:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** // any later version.
  10:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** 
  11:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** // This library is distributed in the hope that it will be useful,
  12:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** // GNU General Public License for more details.
  15:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** 
  16:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** 
  20:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** // You should have received a copy of the GNU General Public License and
  21:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** // <http://www.gnu.org/licenses/>.
  24:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** 
  25:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** /** @file ext/new_allocator.h
  26:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****  *  This file is a GNU extension to the Standard C++ Library.
  27:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****  */
  28:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** 
  29:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** #ifndef _NEW_ALLOCATOR_H
  30:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** #define _NEW_ALLOCATOR_H 1
  31:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** 
  32:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** #include <bits/c++config.h>
  33:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** #include <new>
  34:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** #include <bits/functexcept.h>
ARM GAS  /tmp/ccw5fbVv.s 			page 14


  35:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** #include <bits/move.h>
  36:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** #if __cplusplus >= 201103L
  37:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** #include <type_traits>
  38:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** #endif
  39:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** 
  40:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  41:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** {
  42:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  43:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** 
  44:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****   /**
  45:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****    *  @brief  An allocator that uses global new, as per [20.4].
  46:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****    *  @ingroup allocators
  47:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****    *
  48:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****    *  This is precisely the allocator defined in the C++ Standard.
  49:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****    *    - all allocation calls operator new
  50:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****    *    - all deallocation calls operator delete
  51:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****    *
  52:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****    *  @tparam  _Tp  Type of allocated object.
  53:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****    */
  54:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****   template<typename _Tp>
  55:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****     class new_allocator
  56:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****     {
  57:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****     public:
  58:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****       typedef _Tp        value_type;
  59:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****       typedef std::size_t     size_type;
  60:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****       typedef std::ptrdiff_t  difference_type;
  61:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** #if __cplusplus <= 201703L
  62:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****       typedef _Tp*       pointer;
  63:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****       typedef const _Tp* const_pointer;
  64:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****       typedef _Tp&       reference;
  65:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****       typedef const _Tp& const_reference;
  66:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** 
  67:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****       template<typename _Tp1>
  68:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** 	struct rebind
  69:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** 	{ typedef new_allocator<_Tp1> other; };
  70:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** #endif
  71:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** 
  72:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** #if __cplusplus >= 201103L
  73:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  74:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****       // 2103. propagate_on_container_move_assignment
  75:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****       typedef std::true_type propagate_on_container_move_assignment;
  76:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** #endif
  77:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** 
  78:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****       _GLIBCXX20_CONSTEXPR
  79:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****       new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  62              		.loc 4 79 7 view .LVU8
  63              		.loc 4 79 7 is_stmt 0 view .LVU9
  64              	.LBE1610:
  65              	.LBE1609:
  66              	.LBB1611:
  67              	.LBI1611:
  97:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	: _M_start(), _M_finish(), _M_end_of_storage()
  68              		.loc 2 97 2 is_stmt 1 view .LVU10
  69              	.LBB1612:
  98:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	{ }
  70              		.loc 2 98 47 is_stmt 0 view .LVU11
  71 0008 0023     		movs	r3, #0
ARM GAS  /tmp/ccw5fbVv.s 			page 15


  72              	.LBE1612:
  73              	.LBE1611:
  74              	.LBE1608:
  75              	.LBE1607:
  76              	.LBE1606:
  77              		.loc 1 14 34 view .LVU12
  78 000a 4FF40052 		mov	r2, #8192
  79              	.LBE1605:
  15:ImpulseResponse/ImpulseResponse.cpp **** {
  16:ImpulseResponse/ImpulseResponse.cpp **** }
  80              		.loc 1 16 1 view .LVU13
  81 000e 2046     		mov	r0, r4
  82              	.LBB1631:
  83              	.LBB1621:
  84              	.LBB1619:
  85              	.LBB1617:
  86              	.LBB1615:
  87              	.LBB1613:
  98:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	{ }
  88              		.loc 2 98 47 view .LVU14
  89 0010 E361     		str	r3, [r4, #28]
  90              	.LVL2:
  98:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	{ }
  91              		.loc 2 98 47 view .LVU15
  92              	.LBE1613:
  93              	.LBE1615:
  94              	.LBE1617:
  95              	.LBE1619:
  96              	.LBE1621:
  97              	.LBB1622:
  98              	.LBB1623:
  99              	.LBB1624:
 100              	.LBB1625:
 101              		.file 5 "../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h"
   1:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** // This file is part of Eigen, a lightweight C++ template library
   2:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** // for linear algebra.
   3:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** //
   4:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** // Copyright (C) 2008 Gael Guennebaud <gael.guennebaud@inria.fr>
   5:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** // Copyright (C) 2006-2009 Benoit Jacob <jacob.benoit.1@gmail.com>
   6:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** // Copyright (C) 2010-2013 Hauke Heibel <hauke.heibel@gmail.com>
   7:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** //
   8:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** // This Source Code Form is subject to the terms of the Mozilla
   9:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** // Public License v. 2.0. If a copy of the MPL was not distributed
  10:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** // with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
  11:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** 
  12:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** #ifndef EIGEN_MATRIXSTORAGE_H
  13:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** #define EIGEN_MATRIXSTORAGE_H
  14:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** 
  15:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** #ifdef EIGEN_DENSE_STORAGE_CTOR_PLUGIN
  16:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   #define EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN(X) X; EIGEN_DENSE_STORAGE_CTOR_PLUGIN;
  17:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** #else
  18:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   #define EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN(X)
  19:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** #endif
  20:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** 
  21:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** #include "./InternalHeaderCheck.h"
  22:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** 
  23:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** namespace Eigen {
ARM GAS  /tmp/ccw5fbVv.s 			page 16


  24:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** 
  25:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** namespace internal {
  26:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** 
  27:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** struct constructor_without_unaligned_array_assert {};
  28:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** 
  29:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** template <typename T, int Size>
  30:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** EIGEN_DEVICE_FUNC constexpr void check_static_allocation_size() {
  31:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** // if EIGEN_STACK_ALLOCATION_LIMIT is defined to 0, then no limit
  32:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** #if EIGEN_STACK_ALLOCATION_LIMIT
  33:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   EIGEN_STATIC_ASSERT(Size * sizeof(T) <= EIGEN_STACK_ALLOCATION_LIMIT, OBJECT_ALLOCATED_ON_STACK_I
  34:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** #endif
  35:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** }
  36:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** 
  37:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** /** \internal
  38:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   * Static array. If the MatrixOrArrayOptions require auto-alignment, the array will be automatical
  39:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   * to 16 bytes boundary if the total size is a multiple of 16 bytes.
  40:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   */
  41:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** template <typename T, int Size, int MatrixOrArrayOptions,
  42:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****           int Alignment = (MatrixOrArrayOptions&DontAlign) ? 0
  43:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****                         : compute_default_alignment<T,Size>::value >
  44:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** struct plain_array
  45:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** {
  46:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   T array[Size];
  47:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** 
  48:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   EIGEN_DEVICE_FUNC constexpr plain_array() { check_static_allocation_size<T, Size>(); }
  49:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** 
  50:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   EIGEN_DEVICE_FUNC constexpr plain_array(constructor_without_unaligned_array_assert) {
  51:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     check_static_allocation_size<T, Size>();
  52:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   }
  53:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** };
  54:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** 
  55:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** #if defined(EIGEN_DISABLE_UNALIGNED_ARRAY_ASSERT)
  56:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   #define EIGEN_MAKE_UNALIGNED_ARRAY_ASSERT(sizemask)
  57:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** #else
  58:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   #define EIGEN_MAKE_UNALIGNED_ARRAY_ASSERT(sizemask) \
  59:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     eigen_assert((internal::is_constant_evaluated() || (std::uintptr_t(array) & (sizemask)) == 0) \
  60:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****               && "this assertion is explained here: " \
  61:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****               "http://eigen.tuxfamily.org/dox-devel/group__TopicUnalignedArrayAssert.html" \
  62:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****               " **** READ THIS WEB PAGE !!! ****");
  63:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** #endif
  64:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** 
  65:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** template <typename T, int Size, int MatrixOrArrayOptions>
  66:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** struct plain_array<T, Size, MatrixOrArrayOptions, 8>
  67:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** {
  68:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   EIGEN_ALIGN_TO_BOUNDARY(8) T array[Size];
  69:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** 
  70:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   EIGEN_DEVICE_FUNC constexpr plain_array() {
  71:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_MAKE_UNALIGNED_ARRAY_ASSERT(7);
  72:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     check_static_allocation_size<T,Size>();
  73:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   }
  74:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** 
  75:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   EIGEN_DEVICE_FUNC constexpr plain_array(constructor_without_unaligned_array_assert) {
  76:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     check_static_allocation_size<T, Size>();
  77:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   }
  78:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** };
  79:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** 
  80:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** template <typename T, int Size, int MatrixOrArrayOptions>
ARM GAS  /tmp/ccw5fbVv.s 			page 17


  81:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** struct plain_array<T, Size, MatrixOrArrayOptions, 16>
  82:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** {
  83:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   EIGEN_ALIGN_TO_BOUNDARY(16) T array[Size];
  84:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** 
  85:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   EIGEN_DEVICE_FUNC constexpr plain_array() {
  86:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_MAKE_UNALIGNED_ARRAY_ASSERT(15);
  87:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     check_static_allocation_size<T,Size>();
  88:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   }
  89:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** 
  90:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   EIGEN_DEVICE_FUNC constexpr plain_array(constructor_without_unaligned_array_assert) {
  91:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     check_static_allocation_size<T, Size>();
  92:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   }
  93:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** };
  94:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** 
  95:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** template <typename T, int Size, int MatrixOrArrayOptions>
  96:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** struct plain_array<T, Size, MatrixOrArrayOptions, 32>
  97:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** {
  98:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   EIGEN_ALIGN_TO_BOUNDARY(32) T array[Size];
  99:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** 
 100:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   EIGEN_DEVICE_FUNC constexpr plain_array() {
 101:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_MAKE_UNALIGNED_ARRAY_ASSERT(31);
 102:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     check_static_allocation_size<T,Size>();
 103:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   }
 104:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** 
 105:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   EIGEN_DEVICE_FUNC constexpr plain_array(constructor_without_unaligned_array_assert) {
 106:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     check_static_allocation_size<T, Size>();
 107:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   }
 108:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** };
 109:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** 
 110:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** template <typename T, int Size, int MatrixOrArrayOptions>
 111:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** struct plain_array<T, Size, MatrixOrArrayOptions, 64>
 112:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** {
 113:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   EIGEN_ALIGN_TO_BOUNDARY(64) T array[Size];
 114:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** 
 115:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   EIGEN_DEVICE_FUNC constexpr plain_array() {
 116:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_MAKE_UNALIGNED_ARRAY_ASSERT(63);
 117:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     check_static_allocation_size<T,Size>();
 118:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   }
 119:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** 
 120:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   EIGEN_DEVICE_FUNC constexpr plain_array(constructor_without_unaligned_array_assert) {
 121:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     check_static_allocation_size<T, Size>();
 122:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   }
 123:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** };
 124:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** 
 125:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** template <typename T, int MatrixOrArrayOptions, int Alignment>
 126:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** struct plain_array<T, 0, MatrixOrArrayOptions, Alignment>
 127:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** {
 128:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   T array[1];
 129:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   EIGEN_DEVICE_FUNC constexpr plain_array() {}
 130:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   EIGEN_DEVICE_FUNC constexpr plain_array(constructor_without_unaligned_array_assert) {}
 131:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** };
 132:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** 
 133:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** struct plain_array_helper {
 134:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   template<typename T, int Size, int MatrixOrArrayOptions, int Alignment>
 135:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 136:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   static void copy(const plain_array<T, Size, MatrixOrArrayOptions, Alignment>& src, const Eigen::I
 137:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****                          plain_array<T, Size, MatrixOrArrayOptions, Alignment>& dst) {
ARM GAS  /tmp/ccw5fbVv.s 			page 18


 138:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     smart_copy(src.array, src.array + size, dst.array);
 139:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   }
 140:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   
 141:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   template<typename T, int Size, int MatrixOrArrayOptions, int Alignment>
 142:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 143:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   static void swap(plain_array<T, Size, MatrixOrArrayOptions, Alignment>& a, const Eigen::Index a_s
 144:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****                    plain_array<T, Size, MatrixOrArrayOptions, Alignment>& b, const Eigen::Index b_s
 145:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     if (a_size < b_size) {
 146:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       std::swap_ranges(b.array, b.array + a_size, a.array);
 147:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       smart_move(b.array + a_size, b.array + b_size, a.array + a_size);
 148:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     } else if (a_size > b_size) {
 149:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       std::swap_ranges(a.array, a.array + b_size, b.array);
 150:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       smart_move(a.array + b_size, a.array + a_size, b.array + b_size);
 151:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     } else {
 152:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       std::swap_ranges(a.array, a.array + a_size, b.array);
 153:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     }
 154:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   }
 155:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** };
 156:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** 
 157:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** } // end namespace internal
 158:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** 
 159:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** /** \internal
 160:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   *
 161:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   * \class DenseStorage
 162:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   * \ingroup Core_Module
 163:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   *
 164:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   * \brief Stores the data of a matrix
 165:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   *
 166:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   * This class stores the data of fixed-size, dynamic-size or mixed matrices
 167:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   * in a way as compact as possible.
 168:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   *
 169:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   * \sa Matrix
 170:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   */
 171:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** template<typename T, int Size, int Rows_, int Cols_, int Options_> class DenseStorage;
 172:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** 
 173:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** // purely fixed-size matrix
 174:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** template<typename T, int Size, int Rows_, int Cols_, int Options_> class DenseStorage
 175:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** {
 176:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     internal::plain_array<T,Size,Options_> m_data;
 177:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   public:
 178:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     constexpr EIGEN_DEVICE_FUNC DenseStorage() {
 179:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN(Index size = Size)
 180:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     }
 181:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC explicit constexpr DenseStorage(internal::constructor_without_unaligned_array
 182:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       : m_data(internal::constructor_without_unaligned_array_assert()) {}
 183:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** #if defined(EIGEN_DENSE_STORAGE_CTOR_PLUGIN)
 184:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC constexpr
 185:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     DenseStorage(const DenseStorage& other) : m_data(other.m_data) {
 186:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN(Index size = Size)
 187:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     }
 188:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** #else
 189:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC constexpr DenseStorage(const DenseStorage&) = default;
 190:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** #endif
 191:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC constexpr DenseStorage& operator=(const DenseStorage&) = default;
 192:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC constexpr DenseStorage(DenseStorage&&) = default;
 193:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC constexpr DenseStorage& operator=(DenseStorage&&) = default;
 194:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC constexpr DenseStorage(Index size, Index rows, Index cols) {
ARM GAS  /tmp/ccw5fbVv.s 			page 19


 195:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN({})
 196:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       eigen_internal_assert(size == rows * cols && rows == Rows_ && cols == Cols_);
 197:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       EIGEN_UNUSED_VARIABLE(size);
 198:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       EIGEN_UNUSED_VARIABLE(rows);
 199:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       EIGEN_UNUSED_VARIABLE(cols);
 200:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     }
 201:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC void swap(DenseStorage& other) {
 202:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       numext::swap(m_data, other.m_data);
 203:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     }
 204:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC static constexpr Index rows(void) EIGEN_NOEXCEPT { return Rows_; }
 205:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC static constexpr Index cols(void) EIGEN_NOEXCEPT { return Cols_; }
 206:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC constexpr void conservativeResize(Index, Index, Index) {}
 207:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC constexpr void resize(Index, Index, Index) {}
 208:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC constexpr const T* data() const { return m_data.array; }
 209:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC constexpr T* data() { return m_data.array; }
 210:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** };
 211:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** 
 212:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** // null matrix
 213:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** template<typename T, int Rows_, int Cols_, int Options_>
 214:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** class DenseStorage<T, 0, Rows_, Cols_, Options_>
 215:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** {
 216:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   public:
 217:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     static_assert(Rows_ * Cols_ == 0, "The fixed number of rows times columns must equal the storag
 218:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC constexpr DenseStorage() {}
 219:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC explicit constexpr DenseStorage(internal::constructor_without_unaligned_array
 220:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC constexpr DenseStorage(const DenseStorage&) {}
 221:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC constexpr DenseStorage& operator=(const DenseStorage&) { return *this; }
 222:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC constexpr DenseStorage(Index,Index,Index) {}
 223:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC constexpr void swap(DenseStorage& ) {}
 224:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC static constexpr Index rows(void) EIGEN_NOEXCEPT {return Rows_;}
 225:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC static constexpr Index cols(void) EIGEN_NOEXCEPT {return Cols_;}
 226:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC constexpr void conservativeResize(Index,Index,Index) {}
 227:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC constexpr void resize(Index,Index,Index) {}
 228:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC constexpr const T *data() const { return 0; }
 229:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC constexpr T *data() { return 0; }
 230:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** };
 231:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** 
 232:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** // more specializations for null matrices; these are necessary to resolve ambiguities
 233:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** template<typename T, int Options_>
 234:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** class DenseStorage<T, 0, Dynamic, Dynamic, Options_> {
 235:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     Index m_rows;
 236:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     Index m_cols;
 237:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   public:
 238:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC DenseStorage() : m_rows(0), m_cols(0) {}
 239:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC explicit DenseStorage(internal::constructor_without_unaligned_array_assert) :
 240:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC DenseStorage(const DenseStorage& other) : m_rows(other.m_rows), m_cols(other.
 241:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC DenseStorage& operator=(const DenseStorage& other) {
 242:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       m_rows = other.m_rows;
 243:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       m_cols = other.m_cols;
 244:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       return *this;
 245:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     }
 246:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC DenseStorage(Index, Index rows, Index cols) : m_rows(rows), m_cols(cols) {
 247:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       eigen_assert(m_rows * m_cols == 0 && "The number of rows times columns must equal the storage
 248:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     }
 249:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC void swap(DenseStorage& other) {
 250:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       numext::swap(m_rows,other.m_rows);
 251:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       numext::swap(m_cols,other.m_cols);
ARM GAS  /tmp/ccw5fbVv.s 			page 20


 252:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     }
 253:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Index rows() const EIGEN_NOEXCEPT {return m_rows;}
 254:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Index cols() const EIGEN_NOEXCEPT {return m_cols;}
 255:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC void conservativeResize(Index, Index rows, Index cols) {
 256:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       m_rows = rows;
 257:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       m_cols = cols;
 258:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       eigen_assert(m_rows * m_cols == 0 && "The number of rows times columns must equal the storage
 259:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     }
 260:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC void resize(Index, Index rows, Index cols) {
 261:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       m_rows = rows;
 262:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       m_cols = cols;
 263:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       eigen_assert(m_rows * m_cols == 0 && "The number of rows times columns must equal the storage
 264:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     }
 265:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC const T *data() const { return nullptr; }
 266:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC T *data() { return nullptr; }
 267:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** };
 268:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** 
 269:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** template<typename T, int Rows_, int Options_>
 270:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** class DenseStorage<T, 0, Rows_, Dynamic, Options_> {
 271:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     Index m_cols;
 272:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   public:
 273:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC DenseStorage() : m_cols(0) {}
 274:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC explicit DenseStorage(internal::constructor_without_unaligned_array_assert) :
 275:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC DenseStorage(const DenseStorage& other) : m_cols(other.m_cols) {}
 276:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC DenseStorage& operator=(const DenseStorage& other) {
 277:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       m_cols = other.m_cols;
 278:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       return *this;
 279:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     }
 280:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC DenseStorage(Index, Index, Index cols) : m_cols(cols) {
 281:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       eigen_assert(Rows_ * m_cols == 0 && "The number of rows times columns must equal the storage 
 282:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     }
 283:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC void swap(DenseStorage& other) {
 284:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       numext::swap(m_cols, other.m_cols);
 285:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     }
 286:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index rows(void) EIGEN_NOEXCEPT {return Rows_;}
 287:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Index cols(void) const EIGEN_NOEXCEPT {return m_cols;}
 288:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC void conservativeResize(Index, Index, Index cols) {
 289:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       m_cols = cols;
 290:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       eigen_assert(Rows_ * m_cols == 0 && "The number of rows times columns must equal the storage 
 291:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     }
 292:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC void resize(Index, Index, Index cols) {
 293:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       m_cols = cols;
 294:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       eigen_assert(Rows_ * m_cols == 0 && "The number of rows times columns must equal the storage 
 295:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     }
 296:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC const T *data() const { return nullptr; }
 297:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC T *data() { return nullptr; }
 298:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** };
 299:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** 
 300:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** template<typename T, int Cols_, int Options_>
 301:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** class DenseStorage<T, 0, Dynamic, Cols_, Options_> {
 302:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     Index m_rows;
 303:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   public:
 304:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC DenseStorage() : m_rows(0) {}
 305:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC explicit DenseStorage(internal::constructor_without_unaligned_array_assert) :
 306:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC DenseStorage(const DenseStorage& other) : m_rows(other.m_rows) {}
 307:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC DenseStorage& operator=(const DenseStorage& other) {
 308:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       m_rows = other.m_rows;
ARM GAS  /tmp/ccw5fbVv.s 			page 21


 309:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       return *this;
 310:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     }
 311:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC DenseStorage(Index, Index rows, Index) : m_rows(rows) {
 312:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       eigen_assert(m_rows * Cols_ == 0 && "The number of rows times columns must equal the storage 
 313:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     }
 314:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC void swap(DenseStorage& other) {
 315:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       numext::swap(m_rows, other.m_rows);
 316:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     }
 317:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Index rows(void) const EIGEN_NOEXCEPT {return m_rows;}
 318:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC static EIGEN_CONSTEXPR Index cols(void) EIGEN_NOEXCEPT {return Cols_;}
 319:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC void conservativeResize(Index, Index rows, Index) {
 320:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       m_rows = rows;
 321:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       eigen_assert(m_rows * Cols_ == 0 && "The number of rows times columns must equal the storage 
 322:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     }
 323:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC void resize(Index, Index rows, Index) {
 324:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       m_rows = rows;
 325:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       eigen_assert(m_rows * Cols_ == 0 && "The number of rows times columns must equal the storage 
 326:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     }
 327:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC const T *data() const { return nullptr; }
 328:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC T *data() { return nullptr; }
 329:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** };
 330:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** 
 331:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** // dynamic-size matrix with fixed-size storage
 332:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** template<typename T, int Size, int Options_>
 333:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** class DenseStorage<T, Size, Dynamic, Dynamic, Options_>
 334:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** {
 335:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     internal::plain_array<T,Size,Options_> m_data;
 336:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     Index m_rows;
 337:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     Index m_cols;
 338:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   public:
 339:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****    EIGEN_DEVICE_FUNC constexpr DenseStorage() : m_data(), m_rows(0), m_cols(0) {}
 340:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****    EIGEN_DEVICE_FUNC explicit constexpr DenseStorage(internal::constructor_without_unaligned_array_
 341:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****        : m_data(internal::constructor_without_unaligned_array_assert()), m_rows(0), m_cols(0) {}
 342:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****    EIGEN_DEVICE_FUNC constexpr DenseStorage(const DenseStorage& other)
 343:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****        : m_data(internal::constructor_without_unaligned_array_assert()), m_rows(other.m_rows), m_co
 344:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     internal::plain_array_helper::copy(other.m_data, m_rows * m_cols, m_data);
 345:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****    }
 346:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC DenseStorage& operator=(const DenseStorage& other)
 347:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     {
 348:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       if (this != &other)
 349:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       {
 350:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****         m_rows = other.m_rows;
 351:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****         m_cols = other.m_cols;
 352:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****         internal::plain_array_helper::copy(other.m_data, m_rows * m_cols, m_data);
 353:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       }
 354:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       return *this;
 355:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     }
 356:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC constexpr DenseStorage(Index, Index rows, Index cols) : m_rows(rows), m_cols(
 357:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC void swap(DenseStorage& other)
 358:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     {
 359:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       internal::plain_array_helper::swap(m_data, m_rows * m_cols, other.m_data, other.m_rows * othe
 360:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       numext::swap(m_rows,other.m_rows);
 361:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       numext::swap(m_cols,other.m_cols);
 362:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     }
 363:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC constexpr Index rows() const { return m_rows; }
 364:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC constexpr Index cols() const { return m_cols; }
 365:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC constexpr void conservativeResize(Index, Index rows, Index cols) {
ARM GAS  /tmp/ccw5fbVv.s 			page 22


 366:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       m_rows = rows;
 367:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       m_cols = cols;
 368:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     }
 369:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC constexpr void resize(Index, Index rows, Index cols) {
 370:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       m_rows = rows;
 371:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       m_cols = cols;
 372:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     }
 373:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC constexpr const T* data() const { return m_data.array; }
 374:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC constexpr T* data() { return m_data.array; }
 375:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** };
 376:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** 
 377:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** // dynamic-size matrix with fixed-size storage and fixed width
 378:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** template<typename T, int Size, int Cols_, int Options_>
 379:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** class DenseStorage<T, Size, Dynamic, Cols_, Options_>
 380:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** {
 381:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     internal::plain_array<T,Size,Options_> m_data;
 382:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     Index m_rows;
 383:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   public:
 384:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****    EIGEN_DEVICE_FUNC constexpr DenseStorage() : m_rows(0) {}
 385:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****    EIGEN_DEVICE_FUNC explicit constexpr DenseStorage(internal::constructor_without_unaligned_array_
 386:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****        : m_data(internal::constructor_without_unaligned_array_assert()), m_rows(0) {}
 387:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****    EIGEN_DEVICE_FUNC constexpr DenseStorage(const DenseStorage& other)
 388:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****        : m_data(internal::constructor_without_unaligned_array_assert()), m_rows(other.m_rows) {
 389:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       internal::plain_array_helper::copy(other.m_data, m_rows * Cols_, m_data);
 390:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****    }
 391:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** 
 392:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC DenseStorage& operator=(const DenseStorage& other)
 393:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     {
 394:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       if (this != &other)
 395:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       {
 396:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****         m_rows = other.m_rows;
 397:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****         internal::plain_array_helper::copy(other.m_data, m_rows * Cols_, m_data);
 398:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       }
 399:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       return *this;
 400:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     }
 401:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC constexpr DenseStorage(Index, Index rows, Index) : m_rows(rows) {}
 402:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC void swap(DenseStorage& other)
 403:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     { 
 404:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       internal::plain_array_helper::swap(m_data, m_rows * Cols_, other.m_data, other.m_rows * Cols_
 405:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       numext::swap(m_rows, other.m_rows);
 406:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     }
 407:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC constexpr Index rows(void) const EIGEN_NOEXCEPT { return m_rows; }
 408:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC constexpr Index cols(void) const EIGEN_NOEXCEPT { return Cols_; }
 409:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC constexpr void conservativeResize(Index, Index rows, Index) { m_rows = rows; 
 410:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC constexpr void resize(Index, Index rows, Index) { m_rows = rows; }
 411:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC constexpr const T* data() const { return m_data.array; }
 412:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC constexpr T* data() { return m_data.array; }
 413:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** };
 414:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** 
 415:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** // dynamic-size matrix with fixed-size storage and fixed height
 416:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** template<typename T, int Size, int Rows_, int Options_>
 417:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** class DenseStorage<T, Size, Rows_, Dynamic, Options_>
 418:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** {
 419:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     internal::plain_array<T,Size,Options_> m_data;
 420:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     Index m_cols;
 421:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   public:
 422:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****    EIGEN_DEVICE_FUNC constexpr DenseStorage() : m_cols(0) {}
ARM GAS  /tmp/ccw5fbVv.s 			page 23


 423:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****    EIGEN_DEVICE_FUNC explicit constexpr DenseStorage(internal::constructor_without_unaligned_array_
 424:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****        : m_data(internal::constructor_without_unaligned_array_assert()), m_cols(0) {}
 425:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****    EIGEN_DEVICE_FUNC constexpr DenseStorage(const DenseStorage& other)
 426:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****        : m_data(internal::constructor_without_unaligned_array_assert()), m_cols(other.m_cols) {
 427:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       internal::plain_array_helper::copy(other.m_data, Rows_ * m_cols, m_data);
 428:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****    }
 429:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC DenseStorage& operator=(const DenseStorage& other)
 430:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     {
 431:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       if (this != &other)
 432:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       {
 433:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****         m_cols = other.m_cols;
 434:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****         internal::plain_array_helper::copy(other.m_data, Rows_ * m_cols, m_data);
 435:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       }
 436:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       return *this;
 437:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     }
 438:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC DenseStorage(Index, Index, Index cols) : m_cols(cols) {}
 439:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC void swap(DenseStorage& other) {
 440:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       internal::plain_array_helper::swap(m_data, Rows_ * m_cols, other.m_data, Rows_ * other.m_cols
 441:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       numext::swap(m_cols, other.m_cols);
 442:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     }
 443:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC constexpr Index rows(void) const EIGEN_NOEXCEPT { return Rows_; }
 444:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC constexpr Index cols(void) const EIGEN_NOEXCEPT { return m_cols; }
 445:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC constexpr void conservativeResize(Index, Index, Index cols) { m_cols = cols; 
 446:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC constexpr void resize(Index, Index, Index cols) { m_cols = cols; }
 447:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC constexpr const T* data() const { return m_data.array; }
 448:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC constexpr T* data() { return m_data.array; }
 449:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** };
 450:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** 
 451:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** // purely dynamic matrix.
 452:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** template<typename T, int Options_>
 453:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** class DenseStorage<T, Dynamic, Dynamic, Dynamic, Options_>
 454:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** {
 455:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     T *m_data;
 456:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     Index m_rows;
 457:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     Index m_cols;
 458:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   public:
 459:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****    EIGEN_DEVICE_FUNC constexpr DenseStorage() : m_data(0), m_rows(0), m_cols(0) {}
 460:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****    EIGEN_DEVICE_FUNC explicit constexpr DenseStorage(internal::constructor_without_unaligned_array_
 461:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****        : m_data(0), m_rows(0), m_cols(0) {}
 462:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****    EIGEN_DEVICE_FUNC DenseStorage(Index size, Index rows, Index cols)
 463:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****        : m_data(internal::conditional_aligned_new_auto<T, (Options_ & DontAlign) == 0>(size)),
 464:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****          m_rows(rows),
 465:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****          m_cols(cols) {
 466:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN({})
 467:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       eigen_internal_assert(size==rows*cols && rows>=0 && cols >=0);
 468:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****    }
 469:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC DenseStorage(const DenseStorage& other)
 470:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       : m_data(internal::conditional_aligned_new_auto<T,(Options_&DontAlign)==0>(other.m_rows*other
 471:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       , m_rows(other.m_rows)
 472:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       , m_cols(other.m_cols)
 473:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     {
 474:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN(Index size = m_rows*m_cols)
 475:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       internal::smart_copy(other.m_data, other.m_data+other.m_rows*other.m_cols, m_data);
 476:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     }
 477:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC DenseStorage& operator=(const DenseStorage& other)
 478:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     {
 479:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       if (this != &other)
ARM GAS  /tmp/ccw5fbVv.s 			page 24


 480:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       {
 481:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****         DenseStorage tmp(other);
 482:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****         this->swap(tmp);
 483:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       }
 484:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       return *this;
 485:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     }
 486:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC
 487:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     DenseStorage(DenseStorage&& other) EIGEN_NOEXCEPT
 488:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       : m_data(std::move(other.m_data))
 489:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       , m_rows(std::move(other.m_rows))
 490:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       , m_cols(std::move(other.m_cols))
 491:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     {
 492:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       other.m_data = nullptr;
 493:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       other.m_rows = 0;
 494:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       other.m_cols = 0;
 495:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     }
 496:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC
 497:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     DenseStorage& operator=(DenseStorage&& other) EIGEN_NOEXCEPT
 498:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     {
 499:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       numext::swap(m_data, other.m_data);
 500:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       numext::swap(m_rows, other.m_rows);
 501:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       numext::swap(m_cols, other.m_cols);
 502:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       return *this;
 503:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     }
 504:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC ~DenseStorage() { internal::conditional_aligned_delete_auto<T,(Options_&DontA
 505:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC void swap(DenseStorage& other)
 506:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     {
 507:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       numext::swap(m_data,other.m_data);
 508:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       numext::swap(m_rows,other.m_rows);
 509:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       numext::swap(m_cols,other.m_cols);
 510:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     }
 511:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC Index rows(void) const EIGEN_NOEXCEPT {return m_rows;}
 512:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC Index cols(void) const EIGEN_NOEXCEPT {return m_cols;}
 513:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     void conservativeResize(Index size, Index rows, Index cols)
 514:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     {
 515:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       m_data = internal::conditional_aligned_realloc_new_auto<T,(Options_&DontAlign)==0>(m_data, si
 516:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       m_rows = rows;
 517:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       m_cols = cols;
 518:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     }
 519:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC void resize(Index size, Index rows, Index cols)
 520:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     {
 521:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       if(size != m_rows*m_cols)
 522:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       {
 523:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****         internal::conditional_aligned_delete_auto<T,(Options_&DontAlign)==0>(m_data, m_rows*m_cols)
 524:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****         if (size>0) // >0 and not simply !=0 to let the compiler knows that size cannot be negative
 525:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****           m_data = internal::conditional_aligned_new_auto<T,(Options_&DontAlign)==0>(size);
 526:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****         else
 527:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****           m_data = 0;
 528:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****         EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN({})
 529:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       }
 530:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       m_rows = rows;
 531:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       m_cols = cols;
 532:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     }
 533:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC const T *data() const { return m_data; }
 534:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC T *data() { return m_data; }
 535:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** };
 536:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** 
ARM GAS  /tmp/ccw5fbVv.s 			page 25


 537:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** // matrix with dynamic width and fixed height (so that matrix has dynamic size).
 538:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** template<typename T, int Rows_, int Options_>
 539:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** class DenseStorage<T, Dynamic, Rows_, Dynamic, Options_> {
 540:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     T *m_data;
 541:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     Index m_cols;
 542:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   public:
 543:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****    EIGEN_DEVICE_FUNC constexpr DenseStorage() : m_data(0), m_cols(0) {}
 544:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****    explicit constexpr DenseStorage(internal::constructor_without_unaligned_array_assert) : m_data(0
 545:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****    EIGEN_DEVICE_FUNC DenseStorage(Index size, Index rows, Index cols)
 546:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****        : m_data(internal::conditional_aligned_new_auto<T, (Options_ & DontAlign) == 0>(size)), m_co
 547:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN({})
 548:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       eigen_internal_assert(size==rows*cols && rows==Rows_ && cols >=0);
 549:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       EIGEN_UNUSED_VARIABLE(rows);
 550:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****    }
 551:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC DenseStorage(const DenseStorage& other)
 552:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       : m_data(internal::conditional_aligned_new_auto<T,(Options_&DontAlign)==0>(Rows_*other.m_cols
 553:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       , m_cols(other.m_cols)
 554:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     {
 555:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN(Index size = m_cols*Rows_)
 556:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       internal::smart_copy(other.m_data, other.m_data+Rows_*m_cols, m_data);
 557:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     }
 558:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC DenseStorage& operator=(const DenseStorage& other)
 559:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     {
 560:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       if (this != &other)
 561:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       {
 562:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****         DenseStorage tmp(other);
 563:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****         this->swap(tmp);
 564:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       }
 565:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       return *this;
 566:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     }
 567:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC
 568:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     DenseStorage(DenseStorage&& other) EIGEN_NOEXCEPT
 569:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       : m_data(std::move(other.m_data))
 570:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       , m_cols(std::move(other.m_cols))
 571:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     {
 572:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       other.m_data = nullptr;
 573:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       other.m_cols = 0;
 574:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     }
 575:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC
 576:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     DenseStorage& operator=(DenseStorage&& other) EIGEN_NOEXCEPT
 577:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     {
 578:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       numext::swap(m_data, other.m_data);
 579:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       numext::swap(m_cols, other.m_cols);
 580:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       return *this;
 581:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     }
 582:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC ~DenseStorage() { internal::conditional_aligned_delete_auto<T,(Options_&DontA
 583:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC void swap(DenseStorage& other) {
 584:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       numext::swap(m_data,other.m_data);
 585:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       numext::swap(m_cols,other.m_cols);
 586:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     }
 587:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC static constexpr Index rows(void) EIGEN_NOEXCEPT { return Rows_; }
 588:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC Index cols(void) const EIGEN_NOEXCEPT {return m_cols;}
 589:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC void conservativeResize(Index size, Index, Index cols)
 590:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     {
 591:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       m_data = internal::conditional_aligned_realloc_new_auto<T,(Options_&DontAlign)==0>(m_data, si
 592:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       m_cols = cols;
 593:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     }
ARM GAS  /tmp/ccw5fbVv.s 			page 26


 594:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void resize(Index size, Index, Index cols)
 595:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     {
 596:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       if(size != Rows_*m_cols)
 597:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       {
 598:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****         internal::conditional_aligned_delete_auto<T,(Options_&DontAlign)==0>(m_data, Rows_*m_cols);
 599:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****         if (size>0) // >0 and not simply !=0 to let the compiler knows that size cannot be negative
 600:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****           m_data = internal::conditional_aligned_new_auto<T,(Options_&DontAlign)==0>(size);
 601:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****         else
 602:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****           m_data = 0;
 603:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****         EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN({})
 604:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       }
 605:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       m_cols = cols;
 606:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     }
 607:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC const T *data() const { return m_data; }
 608:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC T *data() { return m_data; }
 609:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** };
 610:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** 
 611:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** // matrix with dynamic height and fixed width (so that matrix has dynamic size).
 612:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** template<typename T, int Cols_, int Options_>
 613:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** class DenseStorage<T, Dynamic, Dynamic, Cols_, Options_>
 614:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h **** {
 615:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     T *m_data;
 616:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     Index m_rows;
 617:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****   public:
 618:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****    EIGEN_DEVICE_FUNC constexpr DenseStorage() : m_data(0), m_rows(0) {}
 102              		.loc 5 618 68 view .LVU16
 103 0012 2363     		str	r3, [r4, #48]
 104              	.LBE1625:
 105              	.LBE1624:
 106              	.LBE1623:
 107              	.LBE1622:
 108              	.LBB1629:
 109              	.LBB1620:
 110              	.LBB1618:
 111              	.LBB1616:
 112              	.LBB1614:
  98:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	{ }
 113              		.loc 2 98 47 view .LVU17
 114 0014 C4E90533 		strd	r3, r3, [r4, #20]
 115              	.LBE1614:
 116              	.LBE1616:
 117              	.LBE1618:
 118              	.LBE1620:
 119              	.LBE1629:
 120              	.LBB1630:
 121              	.LBB1628:
 122              	.LBB1627:
 123              	.LBB1626:
 124              		.loc 5 618 68 view .LVU18
 125 0018 C4E90A23 		strd	r2, r3, [r4, #40]
 126              	.LBE1626:
 127              	.LBE1627:
 128              	.LBE1628:
 129              	.LBE1630:
 130              	.LBE1631:
 131              		.loc 1 16 1 view .LVU19
 132 001c 10BD     		pop	{r4, pc}
ARM GAS  /tmp/ccw5fbVv.s 			page 27


 133              		.loc 1 16 1 view .LVU20
 134              		.cfi_endproc
 135              	.LFE8115:
 137              		.global	_ZN15ImpulseResponseC1Ev
 138              		.thumb_set _ZN15ImpulseResponseC1Ev,_ZN15ImpulseResponseC2Ev
 139 001e 00BF     		.section	.text._ZN15ImpulseResponseD2Ev,"ax",%progbits
 140              		.align	1
 141              		.p2align 2,,3
 142              		.global	_ZN15ImpulseResponseD2Ev
 143              		.syntax unified
 144              		.thumb
 145              		.thumb_func
 146              		.fpu fpv5-d16
 148              	_ZN15ImpulseResponseD2Ev:
 149              	.LVL3:
 150              	.LFB8118:
  17:ImpulseResponse/ImpulseResponse.cpp **** 
  18:ImpulseResponse/ImpulseResponse.cpp **** // Destructor
  19:ImpulseResponse/ImpulseResponse.cpp **** ImpulseResponse::~ImpulseResponse()
 151              		.loc 1 19 1 is_stmt 1 view -0
 152              		.cfi_startproc
 153              		@ args = 0, pretend = 0, frame = 0
 154              		@ frame_needed = 0, uses_anonymous_args = 0
 155              	.LBB1632:
 156              	.LBB1633:
 157              	.LBB1634:
 158              	.LBB1635:
 159              	.LBB1636:
 619:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****    explicit constexpr DenseStorage(internal::constructor_without_unaligned_array_assert) : m_data(0
 620:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****    EIGEN_DEVICE_FUNC constexpr DenseStorage(Index size, Index rows, Index cols)
 621:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****        : m_data(internal::conditional_aligned_new_auto<T, (Options_ & DontAlign) == 0>(size)), m_ro
 622:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN({})
 623:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       eigen_internal_assert(size==rows*cols && rows>=0 && cols == Cols_);
 624:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       EIGEN_UNUSED_VARIABLE(cols);
 625:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****    }
 626:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC DenseStorage(const DenseStorage& other)
 627:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       : m_data(internal::conditional_aligned_new_auto<T,(Options_&DontAlign)==0>(other.m_rows*Cols_
 628:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       , m_rows(other.m_rows)
 629:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     {
 630:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN(Index size = m_rows*Cols_)
 631:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       internal::smart_copy(other.m_data, other.m_data+other.m_rows*Cols_, m_data);
 632:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     }
 633:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC DenseStorage& operator=(const DenseStorage& other)
 634:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     {
 635:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       if (this != &other)
 636:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       {
 637:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****         DenseStorage tmp(other);
 638:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****         this->swap(tmp);
 639:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       }
 640:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       return *this;
 641:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     }
 642:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC
 643:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     DenseStorage(DenseStorage&& other) EIGEN_NOEXCEPT
 644:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       : m_data(std::move(other.m_data))
 645:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       , m_rows(std::move(other.m_rows))
 646:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     {
 647:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       other.m_data = nullptr;
ARM GAS  /tmp/ccw5fbVv.s 			page 28


 648:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       other.m_rows = 0;
 649:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     }
 650:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC
 651:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     DenseStorage& operator=(DenseStorage&& other) EIGEN_NOEXCEPT
 652:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     {
 653:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       numext::swap(m_data, other.m_data);
 654:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       numext::swap(m_rows, other.m_rows);
 655:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       return *this;
 656:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     }
 657:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC ~DenseStorage() { internal::conditional_aligned_delete_auto<T,(Options_&DontA
 160              		.loc 5 657 109 is_stmt 0 view .LVU22
 161 0000 C36A     		ldr	r3, [r0, #44]
 162              	.LBE1636:
 163              	.LBE1635:
 164              	.LBE1634:
 165              	.LBE1633:
 166              	.LBE1632:
 167              		.loc 1 19 1 view .LVU23
 168 0002 10B5     		push	{r4, lr}
 169              		.cfi_def_cfa_offset 8
 170              		.cfi_offset 4, -8
 171              		.cfi_offset 14, -4
 172              		.loc 1 19 1 view .LVU24
 173 0004 0446     		mov	r4, r0
 174              	.LVL4:
 175              	.LBB1682:
 176              	.LBB1659:
 177              	.LBI1633:
 178              		.file 6 "../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h"
   1:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h **** // This file is part of Eigen, a lightweight C++ template library
   2:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h **** // for linear algebra.
   3:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h **** //
   4:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h **** // Copyright (C) 2006-2010 Benoit Jacob <jacob.benoit.1@gmail.com>
   5:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h **** // Copyright (C) 2008-2009 Gael Guennebaud <gael.guennebaud@inria.fr>
   6:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h **** //
   7:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h **** // This Source Code Form is subject to the terms of the Mozilla
   8:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h **** // Public License v. 2.0. If a copy of the MPL was not distributed
   9:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h **** // with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
  10:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h **** 
  11:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h **** #ifndef EIGEN_MATRIX_H
  12:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h **** #define EIGEN_MATRIX_H
  13:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h **** 
  14:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h **** #include "./InternalHeaderCheck.h"
  15:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h **** 
  16:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h **** namespace Eigen {
  17:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h **** 
  18:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h **** namespace internal {
  19:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h **** template<typename Scalar_, int Rows_, int Cols_, int Options_, int MaxRows_, int MaxCols_>
  20:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h **** struct traits<Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_> >
  21:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h **** {
  22:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h **** private:
  23:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   constexpr static int size = internal::size_at_compile_time(Rows_,Cols_);
  24:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   typedef typename find_best_packet<Scalar_,size>::type PacketScalar;
  25:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   enum {
  26:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****       row_major_bit = Options_&RowMajor ? RowMajorBit : 0,
  27:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****       is_dynamic_size_storage = MaxRows_==Dynamic || MaxCols_==Dynamic,
  28:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****       max_size = is_dynamic_size_storage ? Dynamic : MaxRows_*MaxCols_,
ARM GAS  /tmp/ccw5fbVv.s 			page 29


  29:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****       default_alignment = compute_default_alignment<Scalar_,max_size>::value,
  30:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****       actual_alignment = ((Options_&DontAlign)==0) ? default_alignment : 0,
  31:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****       required_alignment = unpacket_traits<PacketScalar>::alignment,
  32:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****       packet_access_bit = (packet_traits<Scalar_>::Vectorizable && (EIGEN_UNALIGNED_VECTORIZE || (a
  33:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****     };
  34:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h **** 
  35:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h **** public:
  36:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   typedef Scalar_ Scalar;
  37:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   typedef Dense StorageKind;
  38:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   typedef Eigen::Index StorageIndex;
  39:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   typedef MatrixXpr XprKind;
  40:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   enum {
  41:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****     RowsAtCompileTime = Rows_,
  42:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****     ColsAtCompileTime = Cols_,
  43:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****     MaxRowsAtCompileTime = MaxRows_,
  44:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****     MaxColsAtCompileTime = MaxCols_,
  45:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****     Flags = compute_matrix_flags(Options_),
  46:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****     Options = Options_,
  47:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****     InnerStrideAtCompileTime = 1,
  48:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****     OuterStrideAtCompileTime = (Options&RowMajor) ? ColsAtCompileTime : RowsAtCompileTime,
  49:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h **** 
  50:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****     // FIXME, the following flag in only used to define NeedsToAlign in PlainObjectBase
  51:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****     EvaluatorFlags = LinearAccessBit | DirectAccessBit | packet_access_bit | row_major_bit,
  52:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****     Alignment = actual_alignment
  53:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   };
  54:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h **** };
  55:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h **** }
  56:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h **** 
  57:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h **** /** \class Matrix
  58:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * \ingroup Core_Module
  59:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   *
  60:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * \brief The matrix class, also used for vectors and row-vectors
  61:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   *
  62:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * The %Matrix class is the work-horse for all \em dense (\ref dense "note") matrices and vectors 
  63:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * Vectors are matrices with one column, and row-vectors are matrices with one row.
  64:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   *
  65:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * The %Matrix class encompasses \em both fixed-size and dynamic-size objects (\ref fixedsize "not
  66:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   *
  67:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * The first three template parameters are required:
  68:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * \tparam Scalar_ Numeric type, e.g. float, double, int or std::complex<float>.
  69:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   *                 User defined scalar types are supported as well (see \ref user_defined_scalars 
  70:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * \tparam Rows_ Number of rows, or \b Dynamic
  71:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * \tparam Cols_ Number of columns, or \b Dynamic
  72:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   *
  73:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * The remaining template parameters are optional -- in most cases you don't have to worry about t
  74:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * \tparam Options_ A combination of either \b #RowMajor or \b #ColMajor, and of either
  75:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   *                 \b #AutoAlign or \b #DontAlign.
  76:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   *                 The former controls \ref TopicStorageOrders "storage order", and defaults to co
  77:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   *                 for vectorization. It defaults to aligning matrices except for fixed sizes that
  78:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * \tparam MaxRows_ Maximum number of rows. Defaults to \a Rows_ (\ref maxrows "note").
  79:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * \tparam MaxCols_ Maximum number of columns. Defaults to \a Cols_ (\ref maxrows "note").
  80:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   *
  81:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * Eigen provides a number of typedefs covering the usual cases. Here are some examples:
  82:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   *
  83:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * \li \c Matrix2d is a 2x2 square matrix of doubles (\c Matrix<double, 2, 2>)
  84:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * \li \c Vector4f is a vector of 4 floats (\c Matrix<float, 4, 1>)
  85:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * \li \c RowVector3i is a row-vector of 3 ints (\c Matrix<int, 1, 3>)
ARM GAS  /tmp/ccw5fbVv.s 			page 30


  86:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   *
  87:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * \li \c MatrixXf is a dynamic-size matrix of floats (\c Matrix<float, Dynamic, Dynamic>)
  88:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * \li \c VectorXf is a dynamic-size vector of floats (\c Matrix<float, Dynamic, 1>)
  89:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   *
  90:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * \li \c Matrix2Xf is a partially fixed-size (dynamic-size) matrix of floats (\c Matrix<float, 2,
  91:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * \li \c MatrixX3d is a partially dynamic-size (fixed-size) matrix of double (\c Matrix<double, D
  92:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   *
  93:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * See \link matrixtypedefs this page \endlink for a complete list of predefined \em %Matrix and \
  94:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   *
  95:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * You can access elements of vectors and matrices using normal subscripting:
  96:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   *
  97:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * \code
  98:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * Eigen::VectorXd v(10);
  99:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * v[0] = 0.1;
 100:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * v[1] = 0.2;
 101:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * v(0) = 0.3;
 102:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * v(1) = 0.4;
 103:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   *
 104:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * Eigen::MatrixXi m(10, 10);
 105:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * m(0, 1) = 1;
 106:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * m(0, 2) = 2;
 107:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * m(0, 3) = 3;
 108:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * \endcode
 109:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   *
 110:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * This class can be extended with the help of the plugin mechanism described on the page
 111:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * \ref TopicCustomizing_Plugins by defining the preprocessor symbol \c EIGEN_MATRIX_PLUGIN.
 112:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   *
 113:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * <i><b>Some notes:</b></i>
 114:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   *
 115:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * <dl>
 116:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * <dt><b>\anchor dense Dense versus sparse:</b></dt>
 117:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * <dd>This %Matrix class handles dense, not sparse matrices and vectors. For sparse matrices and 
 118:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   *
 119:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * Dense matrices and vectors are plain usual arrays of coefficients. All the coefficients are sto
 120:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * This is unlike Sparse matrices and vectors where the coefficients are stored as a list of nonze
 121:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   *
 122:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * <dt><b>\anchor fixedsize Fixed-size versus dynamic-size:</b></dt>
 123:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * <dd>Fixed-size means that the numbers of rows and columns are known are compile-time. In this c
 124:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * of coefficients as a fixed-size array, as a class member. This makes sense for very small matri
 125:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * to 16x16. Larger matrices should be declared as dynamic-size even if one happens to know their 
 126:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   *
 127:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * Dynamic-size means that the numbers of rows or columns are not necessarily known at compile-tim
 128:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * variables, and the array of coefficients is allocated dynamically on the heap.
 129:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   *
 130:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * Note that \em dense matrices, be they Fixed-size or Dynamic-size, <em>do not</em> expand dynami
 131:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * If you want this behavior, see the Sparse module.</dd>
 132:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   *
 133:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * <dt><b>\anchor maxrows MaxRows_ and MaxCols_:</b></dt>
 134:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * <dd>In most cases, one just leaves these parameters to the default values.
 135:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * These parameters mean the maximum size of rows and columns that the matrix may have. They are u
 136:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * when the exact numbers of rows and columns are not known are compile-time, but it is known at c
 137:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * exceed a certain value. This happens when taking dynamic-size blocks inside fixed-size matrices
 138:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * are the dimensions of the original matrix, while Rows_ and Cols_ are Dynamic.</dd>
 139:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * </dl>
 140:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   *
 141:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * <i><b>ABI and storage layout</b></i>
 142:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   *
ARM GAS  /tmp/ccw5fbVv.s 			page 31


 143:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * The table below summarizes the ABI of some possible Matrix instances which is fixed thorough th
 144:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * <table  class="manual">
 145:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * <tr><th>Matrix type</th><th>Equivalent C structure</th></tr>
 146:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * <tr><td>\code Matrix<T,Dynamic,Dynamic> \endcode</td><td>\code
 147:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * struct {
 148:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   *   T *data;                  // with (size_t(data)%EIGEN_MAX_ALIGN_BYTES)==0
 149:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   *   Eigen::Index rows, cols;
 150:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   *  };
 151:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * \endcode</td></tr>
 152:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * <tr class="alt"><td>\code
 153:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * Matrix<T,Dynamic,1>
 154:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * Matrix<T,1,Dynamic> \endcode</td><td>\code
 155:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * struct {
 156:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   *   T *data;                  // with (size_t(data)%EIGEN_MAX_ALIGN_BYTES)==0
 157:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   *   Eigen::Index size;
 158:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   *  };
 159:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * \endcode</td></tr>
 160:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * <tr><td>\code Matrix<T,Rows,Cols> \endcode</td><td>\code
 161:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * struct {
 162:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   *   T data[Rows*Cols];        // with (size_t(data)%A(Rows*Cols*sizeof(T)))==0
 163:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   *  };
 164:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * \endcode</td></tr>
 165:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * <tr class="alt"><td>\code Matrix<T,Dynamic,Dynamic,0,MaxRows,MaxCols> \endcode</td><td>\code
 166:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * struct {
 167:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   *   T data[MaxRows*MaxCols];  // with (size_t(data)%A(MaxRows*MaxCols*sizeof(T)))==0
 168:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   *   Eigen::Index rows, cols;
 169:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   *  };
 170:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * \endcode</td></tr>
 171:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * </table>
 172:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * Note that in this table Rows, Cols, MaxRows and MaxCols are all positive integers. A(S) is defi
 173:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * smaller to EIGEN_MAX_STATIC_ALIGN_BYTES.
 174:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   *
 175:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * \see MatrixBase for the majority of the API methods for matrices, \ref TopicClassHierarchy,
 176:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   * \ref TopicStorageOrders
 177:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h ****   */
 178:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h **** 
 179:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h **** template<typename Scalar_, int Rows_, int Cols_, int Options_, int MaxRows_, int MaxCols_>
 180:../../RTNeural/modules/Eigen/Eigen/src/Core/Matrix.h **** class Matrix
 179              		.loc 6 180 7 is_stmt 1 view .LVU25
 180              	.LBB1656:
 181              	.LBI1634:
 182              		.file 7 "../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h"
   1:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** // This file is part of Eigen, a lightweight C++ template library
   2:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** // for linear algebra.
   3:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** //
   4:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** // Copyright (C) 2008-2009 Gael Guennebaud <gael.guennebaud@inria.fr>
   5:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** // Copyright (C) 2006-2008 Benoit Jacob <jacob.benoit.1@gmail.com>
   6:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** //
   7:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** // This Source Code Form is subject to the terms of the Mozilla
   8:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** // Public License v. 2.0. If a copy of the MPL was not distributed
   9:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** // with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
  10:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** 
  11:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** #ifndef EIGEN_DENSESTORAGEBASE_H
  12:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** #define EIGEN_DENSESTORAGEBASE_H
  13:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** 
  14:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** #if defined(EIGEN_INITIALIZE_MATRICES_BY_ZERO)
  15:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** # define EIGEN_INITIALIZE_COEFFS
ARM GAS  /tmp/ccw5fbVv.s 			page 32


  16:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** # define EIGEN_INITIALIZE_COEFFS_IF_THAT_OPTION_IS_ENABLED for(Index i=0;i<base().size();++i) coeff
  17:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** #elif defined(EIGEN_INITIALIZE_MATRICES_BY_NAN)
  18:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** # define EIGEN_INITIALIZE_COEFFS
  19:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** # define EIGEN_INITIALIZE_COEFFS_IF_THAT_OPTION_IS_ENABLED for(Index i=0;i<base().size();++i) coeff
  20:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** #else
  21:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** # undef EIGEN_INITIALIZE_COEFFS
  22:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** # define EIGEN_INITIALIZE_COEFFS_IF_THAT_OPTION_IS_ENABLED
  23:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** #endif
  24:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** 
  25:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** #include "./InternalHeaderCheck.h"
  26:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** 
  27:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** namespace Eigen {
  28:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** 
  29:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** namespace internal {
  30:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** 
  31:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** template<int MaxSizeAtCompileTime> struct check_rows_cols_for_overflow {
  32:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****   template <typename Index>
  33:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****   EIGEN_DEVICE_FUNC static EIGEN_ALWAYS_INLINE constexpr void run(Index, Index) {}
  34:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** };
  35:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** 
  36:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** template<> struct check_rows_cols_for_overflow<Dynamic> {
  37:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****   template <typename Index>
  38:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****   EIGEN_DEVICE_FUNC static EIGEN_ALWAYS_INLINE constexpr void run(Index rows, Index cols) {
  39:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     // http://hg.mozilla.org/mozilla-central/file/6c8a909977d3/xpcom/ds/CheckedInt.h#l242
  40:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     // we assume Index is signed
  41:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     Index max_index = (std::size_t(1) << (8 * sizeof(Index) - 1)) - 1; // assume Index is signed
  42:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     bool error = (rows == 0 || cols == 0) ? false
  43:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****                : (rows > max_index / cols);
  44:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     if (error)
  45:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****       throw_std_bad_alloc();
  46:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****   }
  47:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** };
  48:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** 
  49:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** template <typename Derived,
  50:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****           typename OtherDerived = Derived,
  51:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****           bool IsVector = bool(Derived::IsVectorAtCompileTime) && bool(OtherDerived::IsVectorAtComp
  52:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** struct conservative_resize_like_impl;
  53:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** 
  54:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** template<typename MatrixTypeA, typename MatrixTypeB, bool SwapPointers> struct matrix_swap_impl;
  55:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** 
  56:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** } // end namespace internal
  57:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** 
  58:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** #ifdef EIGEN_PARSED_BY_DOXYGEN
  59:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** namespace doxygen {
  60:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** 
  61:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** // This is a workaround to doxygen not being able to understand the inheritance logic
  62:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** // when it is hidden by the dense_xpr_base helper struct.
  63:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** // Moreover, doxygen fails to include members that are not documented in the declaration body of
  64:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** // MatrixBase if we inherits MatrixBase<Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_>
  65:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** // this is why we simply inherits MatrixBase, though this does not make sense.
  66:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** 
  67:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** /** This class is just a workaround for Doxygen and it does not not actually exist. */
  68:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** template<typename Derived> struct dense_xpr_base_dispatcher;
  69:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** /** This class is just a workaround for Doxygen and it does not not actually exist. */
  70:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** template<typename Scalar_, int Rows_, int Cols_, int Options_, int MaxRows_, int MaxCols_>
  71:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** struct dense_xpr_base_dispatcher<Matrix<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_> >
  72:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     : public MatrixBase {};
ARM GAS  /tmp/ccw5fbVv.s 			page 33


  73:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** /** This class is just a workaround for Doxygen and it does not not actually exist. */
  74:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** template<typename Scalar_, int Rows_, int Cols_, int Options_, int MaxRows_, int MaxCols_>
  75:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** struct dense_xpr_base_dispatcher<Array<Scalar_, Rows_, Cols_, Options_, MaxRows_, MaxCols_> >
  76:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     : public ArrayBase {};
  77:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** 
  78:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** } // namespace doxygen
  79:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** 
  80:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** /** \class PlainObjectBase
  81:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****   * \ingroup Core_Module
  82:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****   * \brief %Dense storage base class for matrices and arrays.
  83:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****   *
  84:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****   * This class can be extended with the help of the plugin mechanism described on the page
  85:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****   * \ref TopicCustomizing_Plugins by defining the preprocessor symbol \c EIGEN_PLAINOBJECTBASE_PLUG
  86:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****   *
  87:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****   * \tparam Derived is the derived type, e.g., a Matrix or Array
  88:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****   *
  89:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****   * \sa \ref TopicClassHierarchy
  90:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****   */
  91:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** template<typename Derived>
  92:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** class PlainObjectBase : public doxygen::dense_xpr_base_dispatcher<Derived>
  93:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** #else
  94:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** template<typename Derived>
  95:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** class PlainObjectBase : public internal::dense_xpr_base<Derived>::type
 183              		.loc 7 95 7 view .LVU26
 184              	.LBB1653:
 185              	.LBI1635:
 186              		.loc 5 657 23 view .LVU27
 187              	.LBB1650:
 188              	.LBB1637:
 189              	.LBI1637:
 190              		.file 8 "../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h"
   1:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** // This file is part of Eigen, a lightweight C++ template library
   2:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** // for linear algebra.
   3:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** //
   4:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** // Copyright (C) 2008-2015 Gael Guennebaud <gael.guennebaud@inria.fr>
   5:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** // Copyright (C) 2008-2009 Benoit Jacob <jacob.benoit.1@gmail.com>
   6:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** // Copyright (C) 2009 Kenneth Riddile <kfriddile@yahoo.com>
   7:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** // Copyright (C) 2010 Hauke Heibel <hauke.heibel@gmail.com>
   8:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** // Copyright (C) 2010 Thomas Capricelli <orzel@freehackers.org>
   9:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** // Copyright (C) 2013 Pavel Holoborodko <pavel@holoborodko.com>
  10:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** //
  11:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** // This Source Code Form is subject to the terms of the Mozilla
  12:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** // Public License v. 2.0. If a copy of the MPL was not distributed
  13:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** // with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
  14:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
  15:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
  16:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** /*****************************************************************************
  17:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** *** Platform checks for aligned malloc functions                           ***
  18:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** *****************************************************************************/
  19:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
  20:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** #ifndef EIGEN_MEMORY_H
  21:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** #define EIGEN_MEMORY_H
  22:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
  23:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** #ifndef EIGEN_MALLOC_ALREADY_ALIGNED
  24:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
  25:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** // Try to determine automatically if malloc is already aligned.
  26:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
ARM GAS  /tmp/ccw5fbVv.s 			page 34


  27:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** // On 64-bit systems, glibc's malloc returns 16-byte-aligned pointers, see:
  28:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** //   http://www.gnu.org/s/libc/manual/html_node/Aligned-Memory-Blocks.html
  29:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** // This is true at least since glibc 2.8.
  30:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** // This leaves the question how to detect 64-bit. According to this document,
  31:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** //   http://gcc.fyxm.net/summit/2003/Porting%20to%2064%20bit.pdf
  32:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** // page 114, "[The] LP64 model [...] is used by all 64-bit UNIX ports" so it's indeed
  33:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** // quite safe, at least within the context of glibc, to equate 64-bit with LP64.
  34:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** #if defined(__GLIBC__) && ((__GLIBC__>=2 && __GLIBC_MINOR__ >= 8) || __GLIBC__>2) \
  35:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****  && defined(__LP64__) && ! defined( __SANITIZE_ADDRESS__ ) && (EIGEN_DEFAULT_ALIGN_BYTES == 16)
  36:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   #define EIGEN_GLIBC_MALLOC_ALREADY_ALIGNED 1
  37:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** #else
  38:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   #define EIGEN_GLIBC_MALLOC_ALREADY_ALIGNED 0
  39:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** #endif
  40:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
  41:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** // FreeBSD 6 seems to have 16-byte aligned malloc
  42:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** //   See http://svn.freebsd.org/viewvc/base/stable/6/lib/libc/stdlib/malloc.c?view=markup
  43:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** // FreeBSD 7 seems to have 16-byte aligned malloc except on ARM and MIPS architectures
  44:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** //   See http://svn.freebsd.org/viewvc/base/stable/7/lib/libc/stdlib/malloc.c?view=markup
  45:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** #if defined(__FreeBSD__) && !(EIGEN_ARCH_ARM || EIGEN_ARCH_MIPS) && (EIGEN_DEFAULT_ALIGN_BYTES == 1
  46:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   #define EIGEN_FREEBSD_MALLOC_ALREADY_ALIGNED 1
  47:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** #else
  48:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   #define EIGEN_FREEBSD_MALLOC_ALREADY_ALIGNED 0
  49:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** #endif
  50:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
  51:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** #if (EIGEN_OS_MAC && (EIGEN_DEFAULT_ALIGN_BYTES == 16))     \
  52:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****  || (EIGEN_OS_WIN64 && (EIGEN_DEFAULT_ALIGN_BYTES == 16))   \
  53:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****  || EIGEN_GLIBC_MALLOC_ALREADY_ALIGNED              \
  54:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****  || EIGEN_FREEBSD_MALLOC_ALREADY_ALIGNED
  55:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   #define EIGEN_MALLOC_ALREADY_ALIGNED 1
  56:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** #else
  57:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   #define EIGEN_MALLOC_ALREADY_ALIGNED 0
  58:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** #endif
  59:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
  60:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** #endif
  61:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
  62:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** #ifndef EIGEN_MALLOC_CHECK_THREAD_LOCAL
  63:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
  64:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** // Check whether we can use the thread_local keyword to allow or disallow
  65:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** // allocating memory with per-thread granularity, by means of the
  66:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** // set_is_malloc_allowed() function.
  67:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** #ifndef EIGEN_AVOID_THREAD_LOCAL
  68:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
  69:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** #if ((EIGEN_COMP_GNUC) || __has_feature(cxx_thread_local) || EIGEN_COMP_MSVC >= 1900) && !defined(E
  70:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** #define EIGEN_MALLOC_CHECK_THREAD_LOCAL thread_local
  71:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** #else
  72:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** #define EIGEN_MALLOC_CHECK_THREAD_LOCAL
  73:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** #endif
  74:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
  75:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** #else // EIGEN_AVOID_THREAD_LOCAL
  76:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** #define EIGEN_MALLOC_CHECK_THREAD_LOCAL
  77:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** #endif // EIGEN_AVOID_THREAD_LOCAL
  78:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
  79:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** #endif
  80:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
  81:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** #include "../InternalHeaderCheck.h"
  82:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
  83:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** namespace Eigen {
ARM GAS  /tmp/ccw5fbVv.s 			page 35


  84:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
  85:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** namespace internal {
  86:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
  87:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** /*****************************************************************************
  88:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** *** Implementation of portable aligned versions of malloc/free/realloc     ***
  89:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** *****************************************************************************/
  90:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
  91:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** #ifdef EIGEN_NO_MALLOC
  92:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** EIGEN_DEVICE_FUNC inline void check_that_malloc_is_allowed()
  93:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** {
  94:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   eigen_assert(false && "heap allocation is forbidden (EIGEN_NO_MALLOC is defined)");
  95:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** }
  96:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** #elif defined EIGEN_RUNTIME_NO_MALLOC
  97:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** EIGEN_DEVICE_FUNC inline bool is_malloc_allowed_impl(bool update, bool new_value = false)
  98:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** {
  99:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   EIGEN_MALLOC_CHECK_THREAD_LOCAL static bool value = true;
 100:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   if (update == 1)
 101:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     value = new_value;
 102:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   return value;
 103:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** }
 104:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** EIGEN_DEVICE_FUNC inline bool is_malloc_allowed() { return is_malloc_allowed_impl(false); }
 105:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** EIGEN_DEVICE_FUNC inline bool set_is_malloc_allowed(bool new_value) { return is_malloc_allowed_impl
 106:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** EIGEN_DEVICE_FUNC inline void check_that_malloc_is_allowed()
 107:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** {
 108:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   eigen_assert(is_malloc_allowed() && "heap allocation is forbidden (EIGEN_RUNTIME_NO_MALLOC is def
 109:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** }
 110:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** #else
 111:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** EIGEN_DEVICE_FUNC inline void check_that_malloc_is_allowed()
 112:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** {}
 113:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** #endif
 114:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
 115:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
 116:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** EIGEN_DEVICE_FUNC
 117:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** inline void throw_std_bad_alloc()
 118:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** {
 119:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   #ifdef EIGEN_EXCEPTIONS
 120:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     throw std::bad_alloc();
 121:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   #else
 122:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     std::size_t huge = static_cast<std::size_t>(-1);
 123:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     #if defined(EIGEN_HIPCC)
 124:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     //
 125:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     // calls to "::operator new" are to be treated as opaque function calls (i.e no inlining),
 126:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     // and as a consequence the code in the #else block triggers the hipcc warning :
 127:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     // "no overloaded function has restriction specifiers that are compatible with the ambient cont
 128:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     //
 129:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     // "throw_std_bad_alloc" has the EIGEN_DEVICE_FUNC attribute, so it seems that hipcc expects
 130:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     // the same on "operator new"
 131:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     // Reverting code back to the old version in this #if block for the hipcc compiler
 132:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     //
 133:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     new int[huge];
 134:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     #else
 135:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     void* unused = ::operator new(huge);
 136:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     EIGEN_UNUSED_VARIABLE(unused);
 137:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     #endif
 138:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   #endif
 139:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** }
 140:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
ARM GAS  /tmp/ccw5fbVv.s 			page 36


 141:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** /*****************************************************************************
 142:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** *** Implementation of handmade aligned functions                           ***
 143:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** *****************************************************************************/
 144:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
 145:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** /* ----- Hand made implementations of aligned malloc/free and realloc ----- */
 146:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
 147:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** /** \internal Like malloc, but the returned pointer is guaranteed to be aligned to `alignment`.
 148:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   * Fast, but wastes `alignment` additional bytes of memory. Does not throw any exception.
 149:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   */
 150:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** EIGEN_DEVICE_FUNC inline void* handmade_aligned_malloc(std::size_t size, std::size_t alignment = EI
 151:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** {
 152:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   eigen_assert(alignment >= sizeof(void*) && alignment <= 128 && (alignment & (alignment-1)) == 0 &
 153:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
 154:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   check_that_malloc_is_allowed();
 155:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   EIGEN_USING_STD(malloc)
 156:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   void* original = malloc(size + alignment);
 157:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   if (original == 0) return 0;
 158:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   uint8_t offset = static_cast<uint8_t>(alignment - (reinterpret_cast<std::size_t>(original) & (ali
 159:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   void* aligned = static_cast<void*>(static_cast<uint8_t*>(original) + offset);
 160:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   *(static_cast<uint8_t*>(aligned) - 1) = offset;
 161:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   return aligned;
 162:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** }
 163:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
 164:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** /** \internal Frees memory allocated with handmade_aligned_malloc */
 165:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** EIGEN_DEVICE_FUNC inline void handmade_aligned_free(void *ptr)
 166:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** {
 167:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   if (ptr) {
 168:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     uint8_t offset = static_cast<uint8_t>(*(static_cast<uint8_t*>(ptr) - 1));
 169:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     void* original = static_cast<void*>(static_cast<uint8_t*>(ptr) - offset);
 170:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
 171:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     check_that_malloc_is_allowed();
 172:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     EIGEN_USING_STD(free)
 173:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     free(original);
 174:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   }
 175:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** }
 176:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
 177:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** /** \internal
 178:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   * \brief Reallocates aligned memory.
 179:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   * Since we know that our handmade version is based on std::malloc
 180:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   * we can use std::realloc to implement efficient reallocation.
 181:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   */
 182:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** EIGEN_DEVICE_FUNC inline void* handmade_aligned_realloc(void* ptr, std::size_t new_size, std::size_
 183:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** {
 184:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   if (ptr == nullptr) return handmade_aligned_malloc(new_size, alignment);
 185:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   uint8_t old_offset = *(static_cast<uint8_t*>(ptr) - 1);
 186:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   void* old_original = static_cast<uint8_t*>(ptr) - old_offset;
 187:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
 188:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   check_that_malloc_is_allowed();
 189:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   EIGEN_USING_STD(realloc)
 190:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   void* original = realloc(old_original, new_size + alignment);
 191:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   if (original == nullptr) return nullptr;
 192:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   if (original == old_original) return ptr;
 193:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   uint8_t offset = static_cast<uint8_t>(alignment - (reinterpret_cast<std::size_t>(original) & (ali
 194:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   void* aligned = static_cast<void*>(static_cast<uint8_t*>(original) + offset);
 195:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   if (offset != old_offset) {
 196:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     const void* src = static_cast<const void*>(static_cast<uint8_t*>(original) + old_offset);
 197:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     std::size_t count = (std::min)(new_size, old_size);
ARM GAS  /tmp/ccw5fbVv.s 			page 37


 198:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     std::memmove(aligned, src, count);
 199:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   }
 200:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   *(static_cast<uint8_t*>(aligned) - 1) = offset;
 201:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   return aligned;
 202:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** }
 203:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
 204:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** /** \internal Allocates \a size bytes. The returned pointer is guaranteed to have 16 or 32 bytes al
 205:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   * On allocation error, the returned pointer is null, and std::bad_alloc is thrown.
 206:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   */
 207:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** EIGEN_DEVICE_FUNC inline void* aligned_malloc(std::size_t size)
 208:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** {
 209:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   if (size == 0) return nullptr;
 210:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   
 211:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   void *result;
 212:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   #if (EIGEN_DEFAULT_ALIGN_BYTES==0) || EIGEN_MALLOC_ALREADY_ALIGNED
 213:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
 214:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     check_that_malloc_is_allowed();
 215:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     EIGEN_USING_STD(malloc)
 216:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     result = malloc(size);
 217:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
 218:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     #if EIGEN_DEFAULT_ALIGN_BYTES==16
 219:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     eigen_assert((size<16 || (std::size_t(result)%16)==0) && "System's malloc returned an unaligned
 220:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     #endif
 221:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   #else
 222:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     result = handmade_aligned_malloc(size);
 223:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   #endif
 224:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
 225:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   if(!result && size)
 226:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     throw_std_bad_alloc();
 227:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
 228:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   return result;
 229:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** }
 230:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
 231:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** /** \internal Frees memory allocated with aligned_malloc. */
 232:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** EIGEN_DEVICE_FUNC inline void aligned_free(void *ptr)
 233:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** {
 234:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   #if (EIGEN_DEFAULT_ALIGN_BYTES==0) || EIGEN_MALLOC_ALREADY_ALIGNED
 235:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
 236:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     if(ptr)
 237:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****       check_that_malloc_is_allowed();
 238:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     EIGEN_USING_STD(free)
 239:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     free(ptr);
 240:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
 241:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   #else
 242:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     handmade_aligned_free(ptr);
 243:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   #endif
 244:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** }
 245:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
 246:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** /**
 247:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   * \internal
 248:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   * \brief Reallocates an aligned block of memory.
 249:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   * \throws std::bad_alloc on allocation failure
 250:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   */
 251:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** EIGEN_DEVICE_FUNC inline void* aligned_realloc(void *ptr, std::size_t new_size, std::size_t old_siz
 252:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** {
 253:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   if (ptr == nullptr) return aligned_malloc(new_size);
 254:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   if (old_size == new_size) return ptr;
ARM GAS  /tmp/ccw5fbVv.s 			page 38


 255:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   if (new_size == 0) { aligned_free(ptr); return nullptr; }
 256:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
 257:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   void *result;
 258:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** #if (EIGEN_DEFAULT_ALIGN_BYTES==0) || EIGEN_MALLOC_ALREADY_ALIGNED
 259:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   EIGEN_UNUSED_VARIABLE(old_size)
 260:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
 261:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   check_that_malloc_is_allowed();
 262:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   EIGEN_USING_STD(realloc)
 263:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   result = realloc(ptr,new_size);
 264:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** #else
 265:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   result = handmade_aligned_realloc(ptr,new_size,old_size);
 266:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** #endif
 267:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
 268:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   if (!result && new_size)
 269:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     throw_std_bad_alloc();
 270:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
 271:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   return result;
 272:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** }
 273:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
 274:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** /*****************************************************************************
 275:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** *** Implementation of conditionally aligned functions                      ***
 276:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** *****************************************************************************/
 277:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
 278:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** /** \internal Allocates \a size bytes. If Align is true, then the returned ptr is 16-byte-aligned.
 279:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   * On allocation error, the returned pointer is null, and a std::bad_alloc is thrown.
 280:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   */
 281:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** template<bool Align> EIGEN_DEVICE_FUNC inline void* conditional_aligned_malloc(std::size_t size)
 282:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** {
 283:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   return aligned_malloc(size);
 284:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** }
 285:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
 286:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** template<> EIGEN_DEVICE_FUNC inline void* conditional_aligned_malloc<false>(std::size_t size)
 287:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** {
 288:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   if (size == 0) return nullptr;
 289:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
 290:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   check_that_malloc_is_allowed();
 291:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   EIGEN_USING_STD(malloc)
 292:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   void *result = malloc(size);
 293:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
 294:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   if(!result && size)
 295:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     throw_std_bad_alloc();
 296:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   return result;
 297:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** }
 298:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
 299:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** /** \internal Frees memory allocated with conditional_aligned_malloc */
 300:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** template<bool Align> EIGEN_DEVICE_FUNC inline void conditional_aligned_free(void *ptr)
 301:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** {
 302:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   aligned_free(ptr);
 303:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** }
 304:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
 305:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** template<> EIGEN_DEVICE_FUNC inline void conditional_aligned_free<false>(void *ptr)
 306:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** {
 307:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   if(ptr)
 308:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     check_that_malloc_is_allowed();
 309:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   EIGEN_USING_STD(free)
 310:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   free(ptr);
 311:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** }
ARM GAS  /tmp/ccw5fbVv.s 			page 39


 312:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
 313:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** template<bool Align> EIGEN_DEVICE_FUNC inline void* conditional_aligned_realloc(void* ptr, std::siz
 314:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** {
 315:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   return aligned_realloc(ptr, new_size, old_size);
 316:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** }
 317:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
 318:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** template<> EIGEN_DEVICE_FUNC inline void* conditional_aligned_realloc<false>(void* ptr, std::size_t
 319:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** {
 320:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   if (ptr == nullptr) return conditional_aligned_malloc<false>(new_size);
 321:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   if (old_size == new_size) return ptr;
 322:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   if (new_size == 0) { conditional_aligned_free<false>(ptr); return nullptr; }
 323:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
 324:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   check_that_malloc_is_allowed();
 325:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   EIGEN_USING_STD(realloc)
 326:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   return realloc(ptr, new_size);
 327:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** }
 328:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
 329:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** /*****************************************************************************
 330:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** *** Construction/destruction of array elements                             ***
 331:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** *****************************************************************************/
 332:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
 333:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** /** \internal Destructs the elements of an array.
 334:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   * The \a size parameters tells on how many objects to call the destructor of T.
 335:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   */
 336:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** template<typename T> EIGEN_DEVICE_FUNC inline void destruct_elements_of_array(T *ptr, std::size_t s
 337:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** {
 338:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   // always destruct an array starting from the end.
 339:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   if(ptr)
 340:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     while(size) ptr[--size].~T();
 341:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** }
 342:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
 343:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** /** \internal Constructs the elements of an array.
 344:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   * The \a size parameter tells on how many objects to call the constructor of T.
 345:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   */
 346:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** template<typename T> EIGEN_DEVICE_FUNC inline T* default_construct_elements_of_array(T *ptr, std::s
 347:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** {
 348:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   std::size_t i=0;
 349:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   EIGEN_TRY
 350:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   {
 351:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****       for (i = 0; i < size; ++i) ::new (ptr + i) T;
 352:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   }
 353:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   EIGEN_CATCH(...)
 354:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   {
 355:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     destruct_elements_of_array(ptr, i);
 356:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     EIGEN_THROW;
 357:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   }
 358:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   return ptr;
 359:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** }
 360:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
 361:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** /** \internal Copy-constructs the elements of an array.
 362:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   * The \a size parameter tells on how many objects to copy.
 363:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   */
 364:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** template<typename T> EIGEN_DEVICE_FUNC inline T* copy_construct_elements_of_array(T *ptr, const T* 
 365:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** {
 366:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   std::size_t i=0;
 367:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   EIGEN_TRY
 368:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   {
ARM GAS  /tmp/ccw5fbVv.s 			page 40


 369:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****       for (i = 0; i < size; ++i) ::new (ptr + i) T(*(src + i));
 370:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   }
 371:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   EIGEN_CATCH(...)
 372:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   {
 373:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     destruct_elements_of_array(ptr, i);
 374:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     EIGEN_THROW;
 375:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   }
 376:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   return ptr;
 377:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** }
 378:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
 379:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** /** \internal Move-constructs the elements of an array.
 380:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   * The \a size parameter tells on how many objects to move.
 381:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   */
 382:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** template<typename T> EIGEN_DEVICE_FUNC inline T* move_construct_elements_of_array(T *ptr, T* src, s
 383:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** {
 384:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   std::size_t i=0;
 385:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   EIGEN_TRY
 386:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   {
 387:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****       for (i = 0; i < size; ++i) ::new (ptr + i) T(std::move(*(src + i)));
 388:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   }
 389:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   EIGEN_CATCH(...)
 390:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   {
 391:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     destruct_elements_of_array(ptr, i);
 392:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     EIGEN_THROW;
 393:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   }
 394:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   return ptr;
 395:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** }
 396:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
 397:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** /*****************************************************************************
 398:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** *** Implementation of aligned new/delete-like functions                    ***
 399:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** *****************************************************************************/
 400:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
 401:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** template<typename T>
 402:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** EIGEN_DEVICE_FUNC EIGEN_ALWAYS_INLINE void check_size_for_overflow(std::size_t size)
 403:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** {
 404:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   if(size > std::size_t(-1) / sizeof(T))
 405:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     throw_std_bad_alloc();
 406:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** }
 407:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
 408:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** /** \internal Allocates \a size objects of type T. The returned pointer is guaranteed to have 16 by
 409:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   * On allocation error, the returned pointer is undefined, but a std::bad_alloc is thrown.
 410:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   * The default constructor of T is called.
 411:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   */
 412:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** template<typename T> EIGEN_DEVICE_FUNC inline T* aligned_new(std::size_t size)
 413:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** {
 414:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   check_size_for_overflow<T>(size);
 415:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   T *result = static_cast<T*>(aligned_malloc(sizeof(T)*size));
 416:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   EIGEN_TRY
 417:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   {
 418:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     return default_construct_elements_of_array(result, size);
 419:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   }
 420:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   EIGEN_CATCH(...)
 421:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   {
 422:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     aligned_free(result);
 423:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     EIGEN_THROW;
 424:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   }
 425:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   return result;
ARM GAS  /tmp/ccw5fbVv.s 			page 41


 426:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** }
 427:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
 428:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** template<typename T, bool Align> EIGEN_DEVICE_FUNC inline T* conditional_aligned_new(std::size_t si
 429:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** {
 430:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   check_size_for_overflow<T>(size);
 431:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   T *result = static_cast<T*>(conditional_aligned_malloc<Align>(sizeof(T)*size));
 432:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   EIGEN_TRY
 433:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   {
 434:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     return default_construct_elements_of_array(result, size);
 435:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   }
 436:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   EIGEN_CATCH(...)
 437:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   {
 438:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     conditional_aligned_free<Align>(result);
 439:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     EIGEN_THROW;
 440:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   }
 441:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   return result;
 442:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** }
 443:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
 444:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** /** \internal Deletes objects constructed with aligned_new
 445:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   * The \a size parameters tells on how many objects to call the destructor of T.
 446:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   */
 447:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** template<typename T> EIGEN_DEVICE_FUNC inline void aligned_delete(T *ptr, std::size_t size)
 448:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** {
 449:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   destruct_elements_of_array<T>(ptr, size);
 450:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   aligned_free(ptr);
 451:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** }
 452:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
 453:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** /** \internal Deletes objects constructed with conditional_aligned_new
 454:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   * The \a size parameters tells on how many objects to call the destructor of T.
 455:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   */
 456:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** template<typename T, bool Align> EIGEN_DEVICE_FUNC inline void conditional_aligned_delete(T *ptr, s
 457:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** {
 458:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   destruct_elements_of_array<T>(ptr, size);
 459:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   conditional_aligned_free<Align>(ptr);
 460:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** }
 461:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
 462:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** template<typename T, bool Align> EIGEN_DEVICE_FUNC inline T* conditional_aligned_realloc_new(T* pts
 463:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** {
 464:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   check_size_for_overflow<T>(new_size);
 465:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   check_size_for_overflow<T>(old_size);
 466:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   
 467:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   // If elements need to be explicitly initialized, we cannot simply realloc
 468:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   // (or memcpy) the memory block - each element needs to be reconstructed.
 469:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   // Otherwise, objects that contain internal pointers like mpfr or
 470:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   // AnnoyingScalar can be pointing to the wrong thing.
 471:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   T* result = static_cast<T*>(conditional_aligned_malloc<Align>(sizeof(T)*new_size));
 472:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   EIGEN_TRY
 473:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   {
 474:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     // Move-construct initial elements.
 475:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     std::size_t copy_size = (std::min)(old_size, new_size);
 476:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     move_construct_elements_of_array(result, pts, copy_size);
 477:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     
 478:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     // Default-construct remaining elements.
 479:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     if (new_size > old_size) {
 480:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****       default_construct_elements_of_array(result + copy_size, new_size - old_size);
 481:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     }
 482:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     
ARM GAS  /tmp/ccw5fbVv.s 			page 42


 483:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     // Delete old elements.
 484:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     conditional_aligned_delete<T, Align>(pts, old_size);      
 485:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   }
 486:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   EIGEN_CATCH(...)
 487:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   {
 488:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     conditional_aligned_free<Align>(result);
 489:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     EIGEN_THROW;
 490:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   }
 491:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
 492:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   return result;
 493:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** }
 494:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
 495:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
 496:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** template<typename T, bool Align> EIGEN_DEVICE_FUNC inline T* conditional_aligned_new_auto(std::size
 497:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** {
 498:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   if(size==0)
 499:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     return 0; // short-cut. Also fixes Bug 884
 500:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   check_size_for_overflow<T>(size);
 501:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   T *result = static_cast<T*>(conditional_aligned_malloc<Align>(sizeof(T)*size));
 502:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   if(NumTraits<T>::RequireInitialization)
 503:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   {
 504:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     EIGEN_TRY
 505:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     {
 506:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****       default_construct_elements_of_array(result, size);
 507:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     }
 508:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     EIGEN_CATCH(...)
 509:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     {
 510:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****       conditional_aligned_free<Align>(result);
 511:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****       EIGEN_THROW;
 512:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     }
 513:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   }
 514:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   return result;
 515:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** }
 516:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
 517:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** template<typename T, bool Align> EIGEN_DEVICE_FUNC inline T* conditional_aligned_realloc_new_auto(T
 518:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** {
 519:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   if (NumTraits<T>::RequireInitialization) {
 520:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     return conditional_aligned_realloc_new<T, Align>(pts, new_size, old_size);
 521:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   }
 522:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   
 523:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   check_size_for_overflow<T>(new_size);
 524:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   check_size_for_overflow<T>(old_size);
 525:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   return static_cast<T*>(conditional_aligned_realloc<Align>(static_cast<void*>(pts), sizeof(T)*new_
 526:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** }
 527:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
 528:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** template<typename T, bool Align> EIGEN_DEVICE_FUNC inline void conditional_aligned_delete_auto(T *p
 191              		.loc 8 528 64 view .LVU28
 192              	.LBB1638:
 193              	.LBI1638:
 300:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** {
 194              		.loc 8 300 52 view .LVU29
 195              	.LBB1639:
 196              	.LBI1639:
 232:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** {
 197              		.loc 8 232 31 view .LVU30
 198              	.LBE1639:
 199              	.LBE1638:
ARM GAS  /tmp/ccw5fbVv.s 			page 43


 200              	.LBE1637:
 201              	.LBE1650:
 202              	.LBE1653:
 203              	.LBE1656:
 204              	.LBE1659:
 205              	.LBE1682:
 242:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   #endif
 206              		.loc 8 242 5 view .LVU31
 207              	.LBB1683:
 208              	.LBB1660:
 209              	.LBB1657:
 210              	.LBB1654:
 211              	.LBB1651:
 212              	.LBB1648:
 213              	.LBB1646:
 214              	.LBB1644:
 215              	.LBB1640:
 216              	.LBI1640:
 165:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** {
 217              		.loc 8 165 31 view .LVU32
 218              	.LBE1640:
 219              	.LBE1644:
 220              	.LBE1646:
 221              	.LBE1648:
 222              	.LBE1651:
 223              	.LBE1654:
 224              	.LBE1657:
 225              	.LBE1660:
 226              	.LBE1683:
 167:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     uint8_t offset = static_cast<uint8_t>(*(static_cast<uint8_t*>(ptr) - 1));
 227              		.loc 8 167 3 view .LVU33
 228              	.LBB1684:
 229              	.LBB1661:
 230              	.LBB1658:
 231              	.LBB1655:
 232              	.LBB1652:
 233              	.LBB1649:
 234              	.LBB1647:
 235              	.LBB1645:
 236              	.LBB1643:
 237              	.LBB1641:
 238 0006 23B1     		cbz	r3, .L5
 239              	.LBB1642:
 168:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     void* original = static_cast<void*>(static_cast<uint8_t*>(ptr) - offset);
 240              		.loc 8 168 5 view .LVU34
 241              	.LVL5:
 169:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
 242              		.loc 8 169 5 view .LVU35
 171:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     EIGEN_USING_STD(free)
 243              		.loc 8 171 5 view .LVU36
 172:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     free(original);
 244              		.loc 8 172 5 view .LVU37
 173:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   }
 245              		.loc 8 173 5 view .LVU38
 169:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
 246              		.loc 8 169 70 is_stmt 0 view .LVU39
 247 0008 13F8010C 		ldrb	r0, [r3, #-1]	@ zero_extendqisi2
ARM GAS  /tmp/ccw5fbVv.s 			page 44


 248              	.LVL6:
 173:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   }
 249              		.loc 8 173 9 view .LVU40
 250 000c 181A     		subs	r0, r3, r0
 251              	.LVL7:
 173:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   }
 252              		.loc 8 173 9 view .LVU41
 253 000e FFF7FEFF 		bl	free
 254              	.LVL8:
 255              	.L5:
 173:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   }
 256              		.loc 8 173 9 view .LVU42
 257              	.LBE1642:
 258              	.LBE1641:
 259              	.LBE1643:
 260              	.LBE1645:
 261              	.LBE1647:
 262              	.LBE1649:
 263              	.LBE1652:
 264              	.LBE1655:
 265              	.LBE1658:
 266              	.LBE1661:
 267              	.LBB1662:
 268              	.LBI1662:
 488:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #else
 489:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       vector() { }
 490:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #endif
 491:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 492:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**
 493:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @brief  Creates a %vector with no elements.
 494:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @param  __a  An allocator object.
 495:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        */
 496:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       explicit
 497:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 498:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       : _Base(__a) { }
 499:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 500:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 501:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**
 502:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @brief  Creates a %vector with default constructed elements.
 503:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 504:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @param  __a  An allocator.
 505:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *
 506:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n default
 507:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  constructed elements.
 508:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        */
 509:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       explicit
 510:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       vector(size_type __n, const allocator_type& __a = allocator_type())
 511:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       : _Base(_S_check_init_len(__n, __a), __a)
 512:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       { _M_default_initialize(__n); }
 513:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 514:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**
 515:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 516:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 517:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @param  __value  An element to copy.
 518:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @param  __a  An allocator.
 519:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *
 520:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n copies of @a __value.
ARM GAS  /tmp/ccw5fbVv.s 			page 45


 521:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        */
 522:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       vector(size_type __n, const value_type& __value,
 523:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 524:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       : _Base(_S_check_init_len(__n, __a), __a)
 525:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 526:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #else
 527:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**
 528:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 529:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 530:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @param  __value  An element to copy.
 531:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @param  __a  An allocator.
 532:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *
 533:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n copies of @a __value.
 534:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        */
 535:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       explicit
 536:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       vector(size_type __n, const value_type& __value = value_type(),
 537:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 538:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       : _Base(_S_check_init_len(__n, __a), __a)
 539:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 540:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #endif
 541:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 542:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**
 543:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @brief  %Vector copy constructor.
 544:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 545:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *
 546:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  All the elements of @a __x are copied, but any unused capacity in
 547:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @a __x  will not be copied
 548:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  (i.e. capacity() == size() in the new %vector).
 549:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *
 550:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  The newly-created %vector uses a copy of the allocator object used
 551:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  by @a __x (unless the allocator traits dictate a different object).
 552:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        */
 553:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       vector(const vector& __x)
 554:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       : _Base(__x.size(),
 555:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 556:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       {
 557:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	this->_M_impl._M_finish =
 558:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 559:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 				      this->_M_impl._M_start,
 560:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 				      _M_get_Tp_allocator());
 561:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       }
 562:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 563:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 564:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**
 565:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @brief  %Vector move constructor.
 566:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *
 567:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  The newly-created %vector contains the exact contents of the
 568:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  moved instance.
 569:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  The contents of the moved instance are a valid, but unspecified
 570:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  %vector.
 571:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        */
 572:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       vector(vector&&) noexcept = default;
 573:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 574:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /// Copy constructor with alternative allocator
 575:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       vector(const vector& __x, const allocator_type& __a)
 576:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       : _Base(__x.size(), __a)
 577:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       {
ARM GAS  /tmp/ccw5fbVv.s 			page 46


 578:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	this->_M_impl._M_finish =
 579:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 580:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 				      this->_M_impl._M_start,
 581:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 				      _M_get_Tp_allocator());
 582:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       }
 583:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 584:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****     private:
 585:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       vector(vector&& __rv, const allocator_type& __m, true_type) noexcept
 586:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       : _Base(__m, std::move(__rv))
 587:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       { }
 588:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 589:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       vector(vector&& __rv, const allocator_type& __m, false_type)
 590:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       : _Base(__m)
 591:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       {
 592:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	if (__rv.get_allocator() == __m)
 593:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  this->_M_impl._M_swap_data(__rv._M_impl);
 594:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	else if (!__rv.empty())
 595:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  {
 596:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	    this->_M_create_storage(__rv.size());
 597:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	    this->_M_impl._M_finish =
 598:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	      std::__uninitialized_move_a(__rv.begin(), __rv.end(),
 599:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 					  this->_M_impl._M_start,
 600:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 					  _M_get_Tp_allocator());
 601:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	    __rv.clear();
 602:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  }
 603:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       }
 604:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 605:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****     public:
 606:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /// Move constructor with alternative allocator
 607:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       vector(vector&& __rv, const allocator_type& __m)
 608:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       noexcept( noexcept(
 609:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	vector(std::declval<vector&&>(), std::declval<const allocator_type&>(),
 610:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	       std::declval<typename _Alloc_traits::is_always_equal>())) )
 611:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       : vector(std::move(__rv), __m, typename _Alloc_traits::is_always_equal{})
 612:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       { }
 613:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 614:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**
 615:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @brief  Builds a %vector from an initializer list.
 616:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 617:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @param  __a  An allocator.
 618:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *
 619:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  Create a %vector consisting of copies of the elements in the
 620:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  initializer_list @a __l.
 621:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *
 622:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  This will call the element type's copy constructor N times
 623:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  (where N is @a __l.size()) and do no memory reallocation.
 624:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        */
 625:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       vector(initializer_list<value_type> __l,
 626:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 627:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       : _Base(__a)
 628:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       {
 629:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	_M_range_initialize(__l.begin(), __l.end(),
 630:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 			    random_access_iterator_tag());
 631:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       }
 632:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #endif
 633:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 634:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**
ARM GAS  /tmp/ccw5fbVv.s 			page 47


 635:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @brief  Builds a %vector from a range.
 636:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @param  __first  An input iterator.
 637:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @param  __last  An input iterator.
 638:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @param  __a  An allocator.
 639:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *
 640:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  Create a %vector consisting of copies of the elements from
 641:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  [first,last).
 642:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *
 643:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  If the iterators are forward, bidirectional, or
 644:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  random-access, then this will call the elements' copy
 645:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  constructor N times (where N is distance(first,last)) and do
 646:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  no memory reallocation.  But if only input iterators are
 647:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  used, then this will do at most 2N calls to the copy
 648:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  constructor, and logN memory reallocations.
 649:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        */
 650:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 651:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       template<typename _InputIterator,
 652:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 653:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	vector(_InputIterator __first, _InputIterator __last,
 654:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 655:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	: _Base(__a)
 656:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	{
 657:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  _M_range_initialize(__first, __last,
 658:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 			      std::__iterator_category(__first));
 659:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	}
 660:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #else
 661:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       template<typename _InputIterator>
 662:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	vector(_InputIterator __first, _InputIterator __last,
 663:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 664:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	: _Base(__a)
 665:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	{
 666:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 667:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 668:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  _M_initialize_dispatch(__first, __last, _Integral());
 669:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	}
 670:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #endif
 671:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 672:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**
 673:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  The dtor only erases the elements, and note that if the
 674:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  elements themselves are pointers, the pointed-to memory is
 675:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  not touched in any way.  Managing the pointer is the user's
 676:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  responsibility.
 677:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        */
 678:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       ~vector() _GLIBCXX_NOEXCEPT
 269              		.loc 2 678 7 is_stmt 1 view .LVU43
 270              	.LBB1663:
 679:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       {
 680:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 271              		.loc 2 680 15 is_stmt 0 view .LVU44
 272 0012 6069     		ldr	r0, [r4, #20]
 273              	.LVL9:
 274              	.LBB1664:
 275              	.LBI1664:
 276:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       { return this->_M_impl; }
 276              		.loc 2 276 7 is_stmt 1 view .LVU45
 276:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       { return this->_M_impl; }
 277              		.loc 2 276 7 is_stmt 0 view .LVU46
ARM GAS  /tmp/ccw5fbVv.s 			page 48


 278              	.LBE1664:
 279              	.LBB1665:
 280              	.LBI1665:
 281              		.file 9 "/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/
   1:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** // Allocator traits -*- C++ -*-
   2:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
   3:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** // Copyright (C) 2011-2020 Free Software Foundation, Inc.
   4:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** //
   5:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** // software; you can redistribute it and/or modify it under the
   7:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** // terms of the GNU General Public License as published by the
   8:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** // any later version.
  10:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
  11:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** // This library is distributed in the hope that it will be useful,
  12:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** // GNU General Public License for more details.
  15:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
  16:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** // 3.1, as published by the Free Software Foundation.
  19:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
  20:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** // You should have received a copy of the GNU General Public License and
  21:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** // <http://www.gnu.org/licenses/>.
  24:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
  25:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** /** @file bits/alloc_traits.h
  26:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****  *  This is an internal header file, included by other library headers.
  27:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****  *  Do not attempt to use it directly. @headername{memory}
  28:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****  */
  29:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
  30:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** #ifndef _ALLOC_TRAITS_H
  31:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** #define _ALLOC_TRAITS_H 1
  32:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
  33:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** #include <bits/stl_construct.h>
  34:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** #include <bits/memoryfwd.h>
  35:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** #if __cplusplus >= 201103L
  36:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** # include <bits/allocator.h>
  37:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** # include <bits/ptr_traits.h>
  38:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** # include <ext/numeric_traits.h>
  39:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** #endif
  40:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
  41:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** namespace std _GLIBCXX_VISIBILITY(default)
  42:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** {
  43:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  44:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
  45:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** #if __cplusplus >= 201103L
  46:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** #define __cpp_lib_allocator_traits_is_always_equal 201411
  47:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
  48:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****   struct __allocator_traits_base
  49:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****   {
  50:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     template<typename _Tp, typename _Up, typename = void>
  51:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       struct __rebind : __replace_first_arg<_Tp, _Up> { };
  52:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
  53:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     template<typename _Tp, typename _Up>
ARM GAS  /tmp/ccw5fbVv.s 			page 49


  54:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       struct __rebind<_Tp, _Up,
  55:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 		      __void_t<typename _Tp::template rebind<_Up>::other>>
  56:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       { using type = typename _Tp::template rebind<_Up>::other; };
  57:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
  58:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****   protected:
  59:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     template<typename _Tp>
  60:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       using __pointer = typename _Tp::pointer;
  61:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     template<typename _Tp>
  62:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       using __c_pointer = typename _Tp::const_pointer;
  63:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     template<typename _Tp>
  64:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       using __v_pointer = typename _Tp::void_pointer;
  65:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     template<typename _Tp>
  66:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       using __cv_pointer = typename _Tp::const_void_pointer;
  67:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     template<typename _Tp>
  68:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       using __pocca = typename _Tp::propagate_on_container_copy_assignment;
  69:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     template<typename _Tp>
  70:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       using __pocma = typename _Tp::propagate_on_container_move_assignment;
  71:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     template<typename _Tp>
  72:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       using __pocs = typename _Tp::propagate_on_container_swap;
  73:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     template<typename _Tp>
  74:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       using __equal = typename _Tp::is_always_equal;
  75:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****   };
  76:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
  77:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****   template<typename _Alloc, typename _Up>
  78:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     using __alloc_rebind
  79:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       = typename __allocator_traits_base::template __rebind<_Alloc, _Up>::type;
  80:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
  81:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****   /**
  82:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****    * @brief  Uniform interface to all allocator types.
  83:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****    * @ingroup allocators
  84:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****   */
  85:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****   template<typename _Alloc>
  86:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     struct allocator_traits : __allocator_traits_base
  87:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     {
  88:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       /// The allocator type
  89:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       typedef _Alloc allocator_type;
  90:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       /// The allocated type
  91:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       typedef typename _Alloc::value_type value_type;
  92:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
  93:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       /**
  94:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        * @brief   The allocator's pointer type.
  95:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *
  96:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        * @c Alloc::pointer if that type exists, otherwise @c value_type*
  97:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       */
  98:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       using pointer = __detected_or_t<value_type*, __pointer, _Alloc>;
  99:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 100:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     private:
 101:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       // Select _Func<_Alloc> or pointer_traits<pointer>::rebind<_Tp>
 102:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       template<template<typename> class _Func, typename _Tp, typename = void>
 103:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	struct _Ptr
 104:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	{
 105:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	  using type = typename pointer_traits<pointer>::template rebind<_Tp>;
 106:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	};
 107:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 108:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       template<template<typename> class _Func, typename _Tp>
 109:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	struct _Ptr<_Func, _Tp, __void_t<_Func<_Alloc>>>
 110:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	{
ARM GAS  /tmp/ccw5fbVv.s 			page 50


 111:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	  using type = _Func<_Alloc>;
 112:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	};
 113:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 114:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       // Select _A2::difference_type or pointer_traits<_Ptr>::difference_type
 115:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       template<typename _A2, typename _PtrT, typename = void>
 116:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	struct _Diff
 117:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	{ using type = typename pointer_traits<_PtrT>::difference_type; };
 118:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 119:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       template<typename _A2, typename _PtrT>
 120:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	struct _Diff<_A2, _PtrT, __void_t<typename _A2::difference_type>>
 121:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	{ using type = typename _A2::difference_type; };
 122:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 123:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       // Select _A2::size_type or make_unsigned<_DiffT>::type
 124:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       template<typename _A2, typename _DiffT, typename = void>
 125:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	struct _Size : make_unsigned<_DiffT> { };
 126:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 127:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       template<typename _A2, typename _DiffT>
 128:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	struct _Size<_A2, _DiffT, __void_t<typename _A2::size_type>>
 129:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	{ using type = typename _A2::size_type; };
 130:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 131:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     public:
 132:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       /**
 133:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        * @brief   The allocator's const pointer type.
 134:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *
 135:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        * @c Alloc::const_pointer if that type exists, otherwise
 136:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        * <tt> pointer_traits<pointer>::rebind<const value_type> </tt>
 137:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       */
 138:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       using const_pointer = typename _Ptr<__c_pointer, const value_type>::type;
 139:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 140:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       /**
 141:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        * @brief   The allocator's void pointer type.
 142:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *
 143:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        * @c Alloc::void_pointer if that type exists, otherwise
 144:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        * <tt> pointer_traits<pointer>::rebind<void> </tt>
 145:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       */
 146:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       using void_pointer = typename _Ptr<__v_pointer, void>::type;
 147:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 148:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       /**
 149:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        * @brief   The allocator's const void pointer type.
 150:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *
 151:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        * @c Alloc::const_void_pointer if that type exists, otherwise
 152:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        * <tt> pointer_traits<pointer>::rebind<const void> </tt>
 153:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       */
 154:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       using const_void_pointer = typename _Ptr<__cv_pointer, const void>::type;
 155:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 156:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       /**
 157:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        * @brief   The allocator's difference type
 158:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *
 159:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        * @c Alloc::difference_type if that type exists, otherwise
 160:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        * <tt> pointer_traits<pointer>::difference_type </tt>
 161:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       */
 162:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       using difference_type = typename _Diff<_Alloc, pointer>::type;
 163:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 164:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       /**
 165:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        * @brief   The allocator's size type
 166:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *
 167:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        * @c Alloc::size_type if that type exists, otherwise
ARM GAS  /tmp/ccw5fbVv.s 			page 51


 168:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        * <tt> make_unsigned<difference_type>::type </tt>
 169:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       */
 170:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       using size_type = typename _Size<_Alloc, difference_type>::type;
 171:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 172:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       /**
 173:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        * @brief   How the allocator is propagated on copy assignment
 174:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *
 175:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        * @c Alloc::propagate_on_container_copy_assignment if that type exists,
 176:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        * otherwise @c false_type
 177:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       */
 178:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       using propagate_on_container_copy_assignment
 179:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	= __detected_or_t<false_type, __pocca, _Alloc>;
 180:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 181:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       /**
 182:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        * @brief   How the allocator is propagated on move assignment
 183:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *
 184:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        * @c Alloc::propagate_on_container_move_assignment if that type exists,
 185:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        * otherwise @c false_type
 186:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       */
 187:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       using propagate_on_container_move_assignment
 188:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	= __detected_or_t<false_type, __pocma, _Alloc>;
 189:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 190:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       /**
 191:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        * @brief   How the allocator is propagated on swap
 192:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *
 193:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        * @c Alloc::propagate_on_container_swap if that type exists,
 194:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        * otherwise @c false_type
 195:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       */
 196:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       using propagate_on_container_swap
 197:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	= __detected_or_t<false_type, __pocs, _Alloc>;
 198:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 199:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       /**
 200:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        * @brief   Whether all instances of the allocator type compare equal.
 201:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *
 202:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        * @c Alloc::is_always_equal if that type exists,
 203:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        * otherwise @c is_empty<Alloc>::type
 204:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       */
 205:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       using is_always_equal
 206:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	= __detected_or_t<typename is_empty<_Alloc>::type, __equal, _Alloc>;
 207:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 208:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       template<typename _Tp>
 209:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	using rebind_alloc = __alloc_rebind<_Alloc, _Tp>;
 210:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       template<typename _Tp>
 211:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	using rebind_traits = allocator_traits<rebind_alloc<_Tp>>;
 212:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 213:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     private:
 214:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       template<typename _Alloc2>
 215:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	static constexpr auto
 216:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	_S_allocate(_Alloc2& __a, size_type __n, const_void_pointer __hint, int)
 217:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	-> decltype(__a.allocate(__n, __hint))
 218:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	{ return __a.allocate(__n, __hint); }
 219:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 220:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       template<typename _Alloc2>
 221:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	static constexpr pointer
 222:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	_S_allocate(_Alloc2& __a, size_type __n, const_void_pointer, ...)
 223:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	{ return __a.allocate(__n); }
 224:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
ARM GAS  /tmp/ccw5fbVv.s 			page 52


 225:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 226:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	struct __construct_helper
 227:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	{
 228:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	  template<typename _Alloc2,
 229:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	    typename = decltype(std::declval<_Alloc2*>()->construct(
 230:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 		  std::declval<_Tp*>(), std::declval<_Args>()...))>
 231:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	    static true_type __test(int);
 232:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 233:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	  template<typename>
 234:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	    static false_type __test(...);
 235:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 236:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	  using type = decltype(__test<_Alloc>(0));
 237:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	};
 238:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 239:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 240:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	using __has_construct
 241:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	  = typename __construct_helper<_Tp, _Args...>::type;
 242:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 243:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 244:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	static _GLIBCXX14_CONSTEXPR _Require<__has_construct<_Tp, _Args...>>
 245:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	_S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 246:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
 247:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 248:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 249:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 250:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	static _GLIBCXX14_CONSTEXPR
 251:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	_Require<__and_<__not_<__has_construct<_Tp, _Args...>>,
 252:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 			       is_constructible<_Tp, _Args...>>>
 253:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 254:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	noexcept(std::is_nothrow_constructible<_Tp, _Args...>::value)
 255:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	{
 256:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** #if __cplusplus <= 201703L
 257:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 258:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** #else
 259:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	  std::construct_at(__p, std::forward<_Args>(__args)...);
 260:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** #endif
 261:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	}
 262:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 263:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       template<typename _Alloc2, typename _Tp>
 264:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	static _GLIBCXX14_CONSTEXPR auto
 265:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	_S_destroy(_Alloc2& __a, _Tp* __p, int)
 266:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	noexcept(noexcept(__a.destroy(__p)))
 267:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	-> decltype(__a.destroy(__p))
 268:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	{ __a.destroy(__p); }
 269:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 270:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       template<typename _Alloc2, typename _Tp>
 271:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	static _GLIBCXX14_CONSTEXPR void
 272:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	_S_destroy(_Alloc2&, _Tp* __p, ...)
 273:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	noexcept(std::is_nothrow_destructible<_Tp>::value)
 274:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	{ std::_Destroy(__p); }
 275:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 276:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       template<typename _Alloc2>
 277:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	static constexpr auto
 278:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	_S_max_size(_Alloc2& __a, int)
 279:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	-> decltype(__a.max_size())
 280:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	{ return __a.max_size(); }
 281:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
ARM GAS  /tmp/ccw5fbVv.s 			page 53


 282:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       template<typename _Alloc2>
 283:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	static constexpr size_type
 284:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	_S_max_size(_Alloc2&, ...)
 285:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	{
 286:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
 287:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	  // 2466. allocator_traits::max_size() default behavior is incorrect
 288:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	  return __gnu_cxx::__numeric_traits<size_type>::__max
 289:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	    / sizeof(value_type);
 290:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	}
 291:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 292:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       template<typename _Alloc2>
 293:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	static constexpr auto
 294:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	_S_select(_Alloc2& __a, int)
 295:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	-> decltype(__a.select_on_container_copy_construction())
 296:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	{ return __a.select_on_container_copy_construction(); }
 297:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 298:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       template<typename _Alloc2>
 299:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	static constexpr _Alloc2
 300:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	_S_select(_Alloc2& __a, ...)
 301:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	{ return __a; }
 302:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 303:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     public:
 304:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 305:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       /**
 306:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  @brief  Allocate memory.
 307:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 308:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 309:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *
 310:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  Calls @c a.allocate(n)
 311:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       */
 312:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
 313:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       allocate(_Alloc& __a, size_type __n)
 314:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       { return __a.allocate(__n); }
 315:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 316:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       /**
 317:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  @brief  Allocate memory.
 318:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 319:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 320:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  @param  __hint Aid to locality.
 321:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  @return Memory of suitable size and alignment for @a n objects
 322:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *          of type @c value_type
 323:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *
 324:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  Returns <tt> a.allocate(n, hint) </tt> if that expression is
 325:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  well-formed, otherwise returns @c a.allocate(n)
 326:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       */
 327:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
 328:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       allocate(_Alloc& __a, size_type __n, const_void_pointer __hint)
 329:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       { return _S_allocate(__a, __n, __hint, 0); }
 330:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 331:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       /**
 332:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  @brief  Deallocate memory.
 333:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 334:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  @param  __p  Pointer to the memory to deallocate.
 335:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  @param  __n  The number of objects space was allocated for.
 336:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *
 337:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  Calls <tt> a.deallocate(p, n) </tt>
 338:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       */
ARM GAS  /tmp/ccw5fbVv.s 			page 54


 339:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR void
 340:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       deallocate(_Alloc& __a, pointer __p, size_type __n)
 341:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 342:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 343:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       /**
 344:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  @brief  Construct an object of type @a _Tp
 345:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 346:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  @param  __p  Pointer to memory of suitable size and alignment for Tp
 347:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  @param  __args Constructor arguments.
 348:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *
 349:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
 350:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  if that expression is well-formed, otherwise uses placement-new
 351:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  to construct an object of type @a _Tp at location @a __p from the
 352:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  arguments @a __args...
 353:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       */
 354:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 355:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	static _GLIBCXX20_CONSTEXPR auto
 356:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 357:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	noexcept(noexcept(_S_construct(__a, __p,
 358:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 				       std::forward<_Args>(__args)...)))
 359:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	-> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
 360:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 361:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 362:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       /**
 363:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  @brief  Destroy an object of type @a _Tp
 364:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 365:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  @param  __p  Pointer to the object to destroy
 366:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *
 367:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  Calls @c __a.destroy(__p) if that expression is well-formed,
 368:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  otherwise calls @c __p->~_Tp()
 369:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       */
 370:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       template<typename _Tp>
 371:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	static _GLIBCXX20_CONSTEXPR void
 372:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	destroy(_Alloc& __a, _Tp* __p)
 373:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	noexcept(noexcept(_S_destroy(__a, __p, 0)))
 374:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	{ _S_destroy(__a, __p, 0); }
 375:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 376:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       /**
 377:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  @brief  The maximum supported allocation size
 378:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 379:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  @return @c __a.max_size() or @c numeric_limits<size_type>::max()
 380:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *
 381:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  Returns @c __a.max_size() if that expression is well-formed,
 382:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  otherwise returns @c numeric_limits<size_type>::max()
 383:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       */
 384:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR size_type
 385:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       max_size(const _Alloc& __a) noexcept
 386:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       { return _S_max_size(__a, 0); }
 387:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 388:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       /**
 389:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  @brief  Obtain an allocator to use when copying a container.
 390:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  @param  __rhs  An allocator.
 391:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  @return @c __rhs.select_on_container_copy_construction() or @a __rhs
 392:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *
 393:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  Returns @c __rhs.select_on_container_copy_construction() if that
 394:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  expression is well-formed, otherwise returns @a __rhs
 395:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       */
ARM GAS  /tmp/ccw5fbVv.s 			page 55


 396:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR _Alloc
 397:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       select_on_container_copy_construction(const _Alloc& __rhs)
 398:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       { return _S_select(__rhs, 0); }
 399:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     };
 400:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 401:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** #if __cplusplus > 201703L
 402:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** # define __cpp_lib_constexpr_dynamic_alloc 201907L
 403:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** #endif
 404:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 405:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****   /// Partial specialization for std::allocator.
 406:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****   template<typename _Tp>
 407:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     struct allocator_traits<allocator<_Tp>>
 408:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     {
 409:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       /// The allocator type
 410:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       using allocator_type = allocator<_Tp>;
 411:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 412:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       /// The allocated type
 413:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       using value_type = _Tp;
 414:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 415:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       /// The allocator's pointer type.
 416:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       using pointer = _Tp*;
 417:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 418:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       /// The allocator's const pointer type.
 419:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       using const_pointer = const _Tp*;
 420:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 421:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       /// The allocator's void pointer type.
 422:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       using void_pointer = void*;
 423:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 424:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       /// The allocator's const void pointer type.
 425:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       using const_void_pointer = const void*;
 426:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 427:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       /// The allocator's difference type
 428:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       using difference_type = std::ptrdiff_t;
 429:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 430:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       /// The allocator's size type
 431:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       using size_type = std::size_t;
 432:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 433:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       /// How the allocator is propagated on copy assignment
 434:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       using propagate_on_container_copy_assignment = false_type;
 435:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 436:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       /// How the allocator is propagated on move assignment
 437:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       using propagate_on_container_move_assignment = true_type;
 438:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 439:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       /// How the allocator is propagated on swap
 440:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       using propagate_on_container_swap = false_type;
 441:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 442:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       /// Whether all instances of the allocator type compare equal.
 443:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       using is_always_equal = true_type;
 444:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 445:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       template<typename _Up>
 446:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	using rebind_alloc = allocator<_Up>;
 447:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 448:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       template<typename _Up>
 449:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	using rebind_traits = allocator_traits<allocator<_Up>>;
 450:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 451:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       /**
 452:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  @brief  Allocate memory.
ARM GAS  /tmp/ccw5fbVv.s 			page 56


 453:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 454:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 455:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *
 456:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  Calls @c a.allocate(n)
 457:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       */
 458:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
 459:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       allocate(allocator_type& __a, size_type __n)
 460:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       { return __a.allocate(__n); }
 461:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 462:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       /**
 463:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  @brief  Allocate memory.
 464:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 465:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 466:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  @param  __hint Aid to locality.
 467:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  @return Memory of suitable size and alignment for @a n objects
 468:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *          of type @c value_type
 469:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *
 470:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  Returns <tt> a.allocate(n, hint) </tt>
 471:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       */
 472:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
 473:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       allocate(allocator_type& __a, size_type __n, const_void_pointer __hint)
 474:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       {
 475:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** #if __cplusplus <= 201703L
 476:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	return __a.allocate(__n, __hint);
 477:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** #else
 478:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	return __a.allocate(__n);
 479:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** #endif
 480:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       }
 481:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 482:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       /**
 483:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  @brief  Deallocate memory.
 484:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 485:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  @param  __p  Pointer to the memory to deallocate.
 486:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  @param  __n  The number of objects space was allocated for.
 487:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *
 488:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  Calls <tt> a.deallocate(p, n) </tt>
 489:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       */
 490:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR void
 491:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       deallocate(allocator_type& __a, pointer __p, size_type __n)
 492:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 493:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 494:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       /**
 495:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  @brief  Construct an object of type `_Up`
 496:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 497:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  @param  __p  Pointer to memory of suitable size and alignment for
 498:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *	       an object of type `_Up`.
 499:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  @param  __args Constructor arguments.
 500:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *
 501:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  Calls `__a.construct(__p, std::forward<_Args>(__args)...)`
 502:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  in C++11, C++14 and C++17. Changed in C++20 to call
 503:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
 504:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       */
 505:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       template<typename _Up, typename... _Args>
 506:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	static _GLIBCXX20_CONSTEXPR void
 507:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 508:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 		  _Args&&... __args)
 509:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
ARM GAS  /tmp/ccw5fbVv.s 			page 57


 510:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	{
 511:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** #if __cplusplus <= 201703L
 512:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	  __a.construct(__p, std::forward<_Args>(__args)...);
 513:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** #else
 514:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	  std::construct_at(__p, std::forward<_Args>(__args)...);
 515:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** #endif
 516:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	}
 517:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 518:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       /**
 519:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  @brief  Destroy an object of type @a _Up
 520:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 521:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  @param  __p  Pointer to the object to destroy
 522:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *
 523:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  Calls @c __a.destroy(__p).
 524:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       */
 525:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       template<typename _Up>
 526:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	static _GLIBCXX20_CONSTEXPR void
 527:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 528:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	noexcept(is_nothrow_destructible<_Up>::value)
 529:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	{
 530:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** #if __cplusplus <= 201703L
 531:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	  __a.destroy(__p);
 532:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** #else
 533:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	  std::destroy_at(__p);
 534:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** #endif
 535:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	}
 536:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 537:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       /**
 538:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  @brief  The maximum supported allocation size
 539:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 540:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  @return @c __a.max_size()
 541:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       */
 542:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR size_type
 543:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 544:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       {
 545:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** #if __cplusplus <= 201703L
 546:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	return __a.max_size();
 547:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** #else
 548:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	return size_t(-1) / sizeof(value_type);
 549:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** #endif
 550:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       }
 551:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 552:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       /**
 553:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  @brief  Obtain an allocator to use when copying a container.
 554:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  @param  __rhs  An allocator.
 555:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****        *  @return @c __rhs
 556:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       */
 557:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR allocator_type
 558:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       select_on_container_copy_construction(const allocator_type& __rhs)
 559:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       { return __rhs; }
 560:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     };
 561:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 562:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** #if __cplusplus < 201703L
 563:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****   template<typename _Alloc>
 564:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     inline void
 565:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     __do_alloc_on_copy(_Alloc& __one, const _Alloc& __two, true_type)
 566:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     { __one = __two; }
ARM GAS  /tmp/ccw5fbVv.s 			page 58


 567:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 568:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****   template<typename _Alloc>
 569:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     inline void
 570:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
 571:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     { }
 572:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** #endif
 573:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 574:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****   template<typename _Alloc>
 575:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     _GLIBCXX14_CONSTEXPR inline void
 576:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
 577:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     {
 578:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       typedef allocator_traits<_Alloc> __traits;
 579:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       typedef typename __traits::propagate_on_container_copy_assignment __pocca;
 580:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** #if __cplusplus >= 201703L
 581:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       if constexpr (__pocca::value)
 582:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	__one = __two;
 583:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** #else
 584:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       __do_alloc_on_copy(__one, __two, __pocca());
 585:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** #endif
 586:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     }
 587:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 588:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****   template<typename _Alloc>
 589:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     constexpr _Alloc
 590:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     __alloc_on_copy(const _Alloc& __a)
 591:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     {
 592:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       typedef allocator_traits<_Alloc> __traits;
 593:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       return __traits::select_on_container_copy_construction(__a);
 594:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     }
 595:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 596:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** #if __cplusplus < 201703L
 597:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****   template<typename _Alloc>
 598:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 599:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     { __one = std::move(__two); }
 600:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 601:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****   template<typename _Alloc>
 602:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     inline void __do_alloc_on_move(_Alloc&, _Alloc&, false_type)
 603:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     { }
 604:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** #endif
 605:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 606:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****   template<typename _Alloc>
 607:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     _GLIBCXX14_CONSTEXPR inline void
 608:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     __alloc_on_move(_Alloc& __one, _Alloc& __two)
 609:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     {
 610:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       typedef allocator_traits<_Alloc> __traits;
 611:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       typedef typename __traits::propagate_on_container_move_assignment __pocma;
 612:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** #if __cplusplus >= 201703L
 613:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       if constexpr (__pocma::value)
 614:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	__one = std::move(__two);
 615:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** #else
 616:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       __do_alloc_on_move(__one, __two, __pocma());
 617:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** #endif
 618:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     }
 619:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 620:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** #if __cplusplus < 201703L
 621:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****   template<typename _Alloc>
 622:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     inline void __do_alloc_on_swap(_Alloc& __one, _Alloc& __two, true_type)
 623:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     {
ARM GAS  /tmp/ccw5fbVv.s 			page 59


 624:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       using std::swap;
 625:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       swap(__one, __two);
 626:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     }
 627:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 628:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****   template<typename _Alloc>
 629:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     inline void __do_alloc_on_swap(_Alloc&, _Alloc&, false_type)
 630:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     { }
 631:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** #endif
 632:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 633:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****   template<typename _Alloc>
 634:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     _GLIBCXX14_CONSTEXPR inline void
 635:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     __alloc_on_swap(_Alloc& __one, _Alloc& __two)
 636:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     {
 637:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       typedef allocator_traits<_Alloc> __traits;
 638:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       typedef typename __traits::propagate_on_container_swap __pocs;
 639:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** #if __cplusplus >= 201703L
 640:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       if constexpr (__pocs::value)
 641:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	{
 642:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	  using std::swap;
 643:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	  swap(__one, __two);
 644:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	}
 645:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** #else
 646:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       __do_alloc_on_swap(__one, __two, __pocs());
 647:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** #endif
 648:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     }
 649:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 650:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****   template<typename _Alloc, typename _Tp,
 651:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	   typename _ValueT = __remove_cvref_t<typename _Alloc::value_type>,
 652:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	   typename = void>
 653:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     struct __is_alloc_insertable_impl
 654:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     : false_type
 655:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     { };
 656:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 657:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****   template<typename _Alloc, typename _Tp, typename _ValueT>
 658:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     struct __is_alloc_insertable_impl<_Alloc, _Tp, _ValueT,
 659:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       __void_t<decltype(allocator_traits<_Alloc>::construct(
 660:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 		   std::declval<_Alloc&>(), std::declval<_ValueT*>(),
 661:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 		   std::declval<_Tp>()))>>
 662:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     : true_type
 663:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     { };
 664:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 665:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****   // true if _Alloc::value_type is CopyInsertable into containers using _Alloc
 666:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****   // (might be wrong if _Alloc::construct exists but is not constrained,
 667:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****   // i.e. actually trying to use it would still be invalid. Use with caution.)
 668:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****   template<typename _Alloc>
 669:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     struct __is_copy_insertable
 670:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     : __is_alloc_insertable_impl<_Alloc,
 671:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 				 typename _Alloc::value_type const&>::type
 672:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     { };
 673:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 674:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****   // std::allocator<_Tp> just requires CopyConstructible
 675:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****   template<typename _Tp>
 676:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     struct __is_copy_insertable<allocator<_Tp>>
 677:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     : is_copy_constructible<_Tp>
 678:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     { };
 679:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 680:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****   // true if _Alloc::value_type is MoveInsertable into containers using _Alloc
ARM GAS  /tmp/ccw5fbVv.s 			page 60


 681:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****   // (might be wrong if _Alloc::construct exists but is not constrained,
 682:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****   // i.e. actually trying to use it would still be invalid. Use with caution.)
 683:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****   template<typename _Alloc>
 684:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     struct __is_move_insertable
 685:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     : __is_alloc_insertable_impl<_Alloc, typename _Alloc::value_type>::type
 686:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     { };
 687:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 688:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****   // std::allocator<_Tp> just requires MoveConstructible
 689:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****   template<typename _Tp>
 690:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     struct __is_move_insertable<allocator<_Tp>>
 691:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     : is_move_constructible<_Tp>
 692:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     { };
 693:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 694:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****   // Trait to detect Allocator-like types.
 695:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****   template<typename _Alloc, typename = void>
 696:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     struct __is_allocator : false_type { };
 697:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 698:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****   template<typename _Alloc>
 699:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     struct __is_allocator<_Alloc,
 700:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       __void_t<typename _Alloc::value_type,
 701:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	       decltype(std::declval<_Alloc&>().allocate(size_t{}))>>
 702:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     : true_type { };
 703:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 704:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****   template<typename _Alloc>
 705:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     using _RequireAllocator
 706:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       = typename enable_if<__is_allocator<_Alloc>::value, _Alloc>::type;
 707:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 708:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****   template<typename _Alloc>
 709:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     using _RequireNotAllocator
 710:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       = typename enable_if<!__is_allocator<_Alloc>::value, _Alloc>::type;
 711:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** #endif // C++11
 712:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 713:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****   /**
 714:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****    * Destroy a range of objects using the supplied allocator.  For
 715:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****    * non-default allocators we do not optimize away invocation of
 716:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****    * destroy() even if _Tp has a trivial destructor.
 717:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****    */
 718:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 719:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****   template<typename _ForwardIterator, typename _Allocator>
 720:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     void
 721:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 722:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	     _Allocator& __alloc)
 723:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     {
 724:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       for (; __first != __last; ++__first)
 725:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** #if __cplusplus < 201103L
 726:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	__alloc.destroy(std::__addressof(*__first));
 727:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** #else
 728:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 	allocator_traits<_Allocator>::destroy(__alloc,
 729:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 					      std::__addressof(*__first));
 730:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** #endif
 731:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     }
 732:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 733:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****   template<typename _ForwardIterator, typename _Tp>
 734:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     inline void
 735:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 282              		.loc 9 735 5 is_stmt 1 view .LVU47
 283              		.loc 9 735 5 is_stmt 0 view .LVU48
ARM GAS  /tmp/ccw5fbVv.s 			page 61


 284              	.LBE1665:
 285              	.LBB1666:
 286              	.LBI1666:
 333:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       {
 287              		.loc 2 333 7 is_stmt 1 view .LVU49
 288              	.LBB1667:
 289              	.LBB1668:
 290              	.LBI1668:
 350:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       {
 291              		.loc 2 350 7 view .LVU50
 292              	.LBB1669:
 353:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 293              		.loc 2 353 2 is_stmt 0 view .LVU51
 294 0014 18B1     		cbz	r0, .L6
 295              	.LVL10:
 296              	.LBB1670:
 297              	.LBI1670:
 491:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 298              		.loc 9 491 7 is_stmt 1 view .LVU52
 299              	.LBB1671:
 300              	.LBB1672:
 301              	.LBI1672:
  80:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** 
  81:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****       _GLIBCXX20_CONSTEXPR
  82:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****       new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
  83:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** 
  84:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****       template<typename _Tp1>
  85:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** 	_GLIBCXX20_CONSTEXPR
  86:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** 	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
  87:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** 
  88:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** #if __cplusplus <= 201703L
  89:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****       ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  90:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** 
  91:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****       pointer
  92:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****       address(reference __x) const _GLIBCXX_NOEXCEPT
  93:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****       { return std::__addressof(__x); }
  94:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** 
  95:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****       const_pointer
  96:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****       address(const_reference __x) const _GLIBCXX_NOEXCEPT
  97:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****       { return std::__addressof(__x); }
  98:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** #endif
  99:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** 
 100:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****       // NB: __n is permitted to be 0.  The C++ standard says nothing
 101:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****       // about what the return value is when __n == 0.
 102:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****       _GLIBCXX_NODISCARD _Tp*
 103:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****       allocate(size_type __n, const void* = static_cast<const void*>(0))
 104:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****       {
 105:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** 	if (__n > this->_M_max_size())
 106:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** 	  std::__throw_bad_alloc();
 107:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** 
 108:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** #if __cpp_aligned_new
 109:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** 	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
 110:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** 	  {
 111:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** 	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
 112:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** 	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
 113:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** 	  }
 114:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** #endif
ARM GAS  /tmp/ccw5fbVv.s 			page 62


 115:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** 	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 116:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****       }
 117:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** 
 118:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****       // __p is not permitted to be a null pointer.
 119:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****       void
 120:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****       deallocate(_Tp* __p, size_type __t)
 302              		.loc 4 120 7 view .LVU53
 303              	.LBE1672:
 304              	.LBE1671:
 305              	.LBE1670:
 306              	.LBE1669:
 307              	.LBE1668:
 336:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       }
 308              		.loc 2 336 35 is_stmt 0 view .LVU54
 309 0016 E169     		ldr	r1, [r4, #28]
 310              	.LBB1678:
 311              	.LBB1677:
 312              	.LBB1676:
 313              	.LBB1675:
 314              	.LBB1674:
 315              	.LBB1673:
 121:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****       {
 122:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** #if __cpp_aligned_new
 123:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** 	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
 124:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** 	  {
 125:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** 	    ::operator delete(__p,
 126:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** # if __cpp_sized_deallocation
 127:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** 			      __t * sizeof(_Tp),
 128:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** # endif
 129:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** 			      std::align_val_t(alignof(_Tp)));
 130:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** 	    return;
 131:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** 	  }
 132:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** #endif
 133:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** 	::operator delete(__p
 316              		.loc 4 133 19 view .LVU55
 317 0018 091A     		subs	r1, r1, r0
 318 001a FFF7FEFF 		bl	_ZdlPvj
 319              	.LVL11:
 320              	.L6:
 321              		.loc 4 133 19 view .LVU56
 322              	.LBE1673:
 323              	.LBE1674:
 324              	.LBE1675:
 325              	.LBE1676:
 326              	.LBE1677:
 327              	.LBE1678:
 328              	.LBB1679:
 329              	.LBI1679:
 128:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	: public _Tp_alloc_type, public _Vector_impl_data
 330              		.loc 2 128 14 is_stmt 1 view .LVU57
 331              	.LBB1680:
 332              	.LBI1680:
 145:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** 
 146:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****       _GLIBCXX20_CONSTEXPR
 147:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****       allocator(const allocator& __a) _GLIBCXX_NOTHROW
 148:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 149:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** 
ARM GAS  /tmp/ccw5fbVv.s 			page 63


 150:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** #if __cplusplus >= 201103L
 151:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****       // Avoid implicit deprecation.
 152:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****       allocator& operator=(const allocator&) = default;
 153:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** #endif
 154:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** 
 155:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****       template<typename _Tp1>
 156:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** 	_GLIBCXX20_CONSTEXPR
 157:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** 	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 158:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** 
 159:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** #if __cpp_constexpr_dynamic_alloc
 160:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****       constexpr
 161:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h **** #endif
 162:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/allocator.h ****       ~allocator() _GLIBCXX_NOTHROW { }
 333              		.loc 3 162 7 view .LVU58
 334              	.LBB1681:
 335              	.LBI1681:
  89:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** 
 336              		.loc 4 89 7 view .LVU59
  89:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** 
 337              		.loc 4 89 7 is_stmt 0 view .LVU60
 338              	.LBE1681:
 339              	.LBE1680:
 340              	.LBE1679:
 341              	.LBE1667:
 342              	.LBE1666:
 343              	.LBE1663:
 344              	.LBE1662:
 345              		.loc 1 19 35 view .LVU61
 346 001e 2046     		mov	r0, r4
 347 0020 FFF7FEFF 		bl	_ZN7HistoryD2Ev
 348              	.LVL12:
 349              	.LBE1684:
  20:ImpulseResponse/ImpulseResponse.cpp **** {
  21:ImpulseResponse/ImpulseResponse.cpp ****     // No Code Needed
  22:ImpulseResponse/ImpulseResponse.cpp **** }
 350              		.loc 1 22 1 view .LVU62
 351 0024 2046     		mov	r0, r4
 352 0026 10BD     		pop	{r4, pc}
 353              		.loc 1 22 1 view .LVU63
 354              		.cfi_endproc
 355              	.LFE8118:
 357              		.global	_ZN15ImpulseResponseD1Ev
 358              		.thumb_set _ZN15ImpulseResponseD1Ev,_ZN15ImpulseResponseD2Ev
 359              		.section	.rodata._ZN15ImpulseResponse7ProcessEf.str1.4,"aMS",%progbits,1
 360              		.align	2
 361              	.LC0:
 362 0000 76656353 		.ascii	"vecSize >= 0\000"
 362      697A6520 
 362      3E3D2030 
 362      00
 363 000d 000000   		.align	2
 364              	.LC1:
 365 0010 45696765 		.ascii	"Eigen::MapBase<Derived, 0>::MapBase(Eigen::MapBase<"
 365      6E3A3A4D 
 365      61704261 
 365      73653C44 
 365      65726976 
ARM GAS  /tmp/ccw5fbVv.s 			page 64


 366 0043 44657269 		.ascii	"Derived, 0>::PointerType, Eigen::Index) [with Deriv"
 366      7665642C 
 366      20303E3A 
 366      3A506F69 
 366      6E746572 
 367 0076 6564203D 		.ascii	"ed = Eigen::Map<const Eigen::Matrix<float, -1, 1>, "
 367      20456967 
 367      656E3A3A 
 367      4D61703C 
 367      636F6E73 
 368 00a9 302C2045 		.ascii	"0, Eigen::Stride<0, 0> >; Eigen::MapBase<Derived, 0"
 368      6967656E 
 368      3A3A5374 
 368      72696465 
 368      3C302C20 
 369 00dc 3E3A3A50 		.ascii	">::PointerType = const float*; Eigen::Index = int]\000"
 369      6F696E74 
 369      65725479 
 369      7065203D 
 369      20636F6E 
 370 010f 00       		.align	2
 371              	.LC2:
 372 0110 2E2E2F2E 		.ascii	"../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase"
 372      2E2F5254 
 372      4E657572 
 372      616C2F6D 
 372      6F64756C 
 373 0143 2E6800   		.ascii	".h\000"
 374 0146 0000     		.align	2
 375              	.LC3:
 376 0148 73697A65 		.ascii	"size() == other.size()\000"
 376      2829203D 
 376      3D206F74 
 376      6865722E 
 376      73697A65 
 377 015f 00       		.align	2
 378              	.LC4:
 379 0160 74797065 		.ascii	"typename Eigen::ScalarBinaryOpTraits<typename Eigen"
 379      6E616D65 
 379      20456967 
 379      656E3A3A 
 379      5363616C 
 380 0193 3A3A696E 		.ascii	"::internal::traits<T>::Scalar, typename Eigen::inte"
 380      7465726E 
 380      616C3A3A 
 380      74726169 
 380      74733C54 
 381 01c6 726E616C 		.ascii	"rnal::traits<OtherDerived>::Scalar>::ReturnType Eig"
 381      3A3A7472 
 381      61697473 
 381      3C4F7468 
 381      65724465 
 382 01f9 656E3A3A 		.ascii	"en::MatrixBase<Derived>::dot(const Eigen::MatrixBas"
 382      4D617472 
 382      69784261 
 382      73653C44 
 382      65726976 
ARM GAS  /tmp/ccw5fbVv.s 			page 65


 383 022c 653C4F74 		.ascii	"e<OtherDerived>&) const [with OtherDerived = Eigen:"
 383      68657244 
 383      65726976 
 383      65643E26 
 383      2920636F 
 384 025f 3A4D6170 		.ascii	":Map<const Eigen::Matrix<float, -1, 1>, 0, Eigen::S"
 384      3C636F6E 
 384      73742045 
 384      6967656E 
 384      3A3A4D61 
 385 0292 74726964 		.ascii	"tride<0, 0> >; Derived = Eigen::Matrix<float, -1, 1"
 385      653C302C 
 385      20303E20 
 385      3E3B2044 
 385      65726976 
 386 02c5 3E3B2074 		.ascii	">; typename Eigen::ScalarBinaryOpTraits<typename Ei"
 386      7970656E 
 386      616D6520 
 386      45696765 
 386      6E3A3A53 
 387 02f8 67656E3A 		.ascii	"gen::internal::traits<T>::Scalar, typename Eigen::i"
 387      3A696E74 
 387      65726E61 
 387      6C3A3A74 
 387      72616974 
 388 032b 6E746572 		.ascii	"nternal::traits<OtherDerived>::Scalar>::ReturnType "
 388      6E616C3A 
 388      3A747261 
 388      6974733C 
 388      4F746865 
 389 035e 3D20666C 		.ascii	"= float]\000"
 389      6F61745D 
 389      00
 390 0367 00       		.align	2
 391              	.LC5:
 392 0368 2E2E2F2E 		.ascii	"../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h\000"
 392      2E2F5254 
 392      4E657572 
 392      616C2F6D 
 392      6F64756C 
 393              		.section	.text._ZN15ImpulseResponse7ProcessEf,"ax",%progbits
 394              		.align	1
 395              		.p2align 2,,3
 396              		.global	_ZN15ImpulseResponse7ProcessEf
 397              		.syntax unified
 398              		.thumb
 399              		.thumb_func
 400              		.fpu fpv5-d16
 402              	_ZN15ImpulseResponse7ProcessEf:
 403              	.LVL13:
 404              	.LFB8121:
  23:ImpulseResponse/ImpulseResponse.cpp **** 
  24:ImpulseResponse/ImpulseResponse.cpp **** 
  25:ImpulseResponse/ImpulseResponse.cpp **** void ImpulseResponse::Init(std::vector<float> irData)
  26:ImpulseResponse/ImpulseResponse.cpp **** {
  27:ImpulseResponse/ImpulseResponse.cpp ****   mRawAudio = irData;
  28:ImpulseResponse/ImpulseResponse.cpp ****   _SetWeights();
ARM GAS  /tmp/ccw5fbVv.s 			page 66


  29:ImpulseResponse/ImpulseResponse.cpp **** }
  30:ImpulseResponse/ImpulseResponse.cpp **** 
  31:ImpulseResponse/ImpulseResponse.cpp **** float ImpulseResponse::Process(float inputs)
  32:ImpulseResponse/ImpulseResponse.cpp **** {
 405              		.loc 1 32 1 is_stmt 1 view -0
 406              		.cfi_startproc
 407              		@ args = 0, pretend = 0, frame = 0
 408              		@ frame_needed = 0, uses_anonymous_args = 0
  33:ImpulseResponse/ImpulseResponse.cpp **** 
  34:ImpulseResponse/ImpulseResponse.cpp ****   _UpdateHistory(inputs);
 409              		.loc 1 34 3 view .LVU65
  32:ImpulseResponse/ImpulseResponse.cpp **** 
 410              		.loc 1 32 1 is_stmt 0 view .LVU66
 411 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 412              		.cfi_def_cfa_offset 24
 413              		.cfi_offset 4, -24
 414              		.cfi_offset 5, -20
 415              		.cfi_offset 6, -16
 416              		.cfi_offset 7, -12
 417              		.cfi_offset 8, -8
 418              		.cfi_offset 14, -4
  32:ImpulseResponse/ImpulseResponse.cpp **** 
 419              		.loc 1 32 1 view .LVU67
 420 0004 0446     		mov	r4, r0
 421              		.loc 1 34 17 view .LVU68
 422 0006 FFF7FEFF 		bl	_ZN7History14_UpdateHistoryEf
 423              	.LVL14:
  35:ImpulseResponse/ImpulseResponse.cpp **** 
  36:ImpulseResponse/ImpulseResponse.cpp ****   int j = mHistoryIndex - mHistoryRequired;
 424              		.loc 1 36 3 is_stmt 1 view .LVU69
 425              		.loc 1 36 11 is_stmt 0 view .LVU70
 426 000a D4E90378 		ldrd	r7, r8, [r4, #12]
 427              	.LVL15:
  37:ImpulseResponse/ImpulseResponse.cpp ****   auto input = Eigen::Map<const Eigen::VectorXf>(&mHistory[j], mHistoryRequired + 1);
 428              		.loc 1 37 3 is_stmt 1 view .LVU71
 429              	.LBB1842:
 430              	.LBI1842:
 681:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 		      _M_get_Tp_allocator());
 682:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
 683:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       }
 684:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 685:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**
 686:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @brief  %Vector assignment operator.
 687:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 688:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *
 689:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  All the elements of @a __x are copied, but any unused capacity in
 690:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @a __x will not be copied.
 691:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *
 692:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  Whether the allocator is copied depends on the allocator traits.
 693:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        */
 694:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       vector&
 695:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       operator=(const vector& __x);
 696:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 697:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 698:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**
 699:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @brief  %Vector move assignment operator.
 700:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
ARM GAS  /tmp/ccw5fbVv.s 			page 67


 701:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *
 702:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  The contents of @a __x are moved into this %vector (without copying,
 703:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  if the allocators permit it).
 704:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  Afterwards @a __x is a valid, but unspecified %vector.
 705:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *
 706:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  Whether the allocator is moved depends on the allocator traits.
 707:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        */
 708:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       vector&
 709:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 710:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       {
 711:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	constexpr bool __move_storage =
 712:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  _Alloc_traits::_S_propagate_on_move_assign()
 713:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  || _Alloc_traits::_S_always_equal();
 714:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 715:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	return *this;
 716:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       }
 717:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 718:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**
 719:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @brief  %Vector list assignment operator.
 720:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 721:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *
 722:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 723:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  initializer list @a __l.
 724:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *
 725:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 726:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 727:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  of elements assigned.
 728:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        */
 729:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       vector&
 730:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       operator=(initializer_list<value_type> __l)
 731:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       {
 732:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	this->_M_assign_aux(__l.begin(), __l.end(),
 733:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 			    random_access_iterator_tag());
 734:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	return *this;
 735:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       }
 736:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #endif
 737:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 738:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**
 739:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @brief  Assigns a given value to a %vector.
 740:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @param  __n  Number of elements to be assigned.
 741:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @param  __val  Value to be assigned.
 742:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *
 743:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  This function fills a %vector with @a __n copies of the given
 744:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  value.  Note that the assignment completely changes the
 745:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  %vector and that the resulting %vector's size is the same as
 746:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  the number of elements assigned.
 747:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        */
 748:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       void
 749:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       assign(size_type __n, const value_type& __val)
 750:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       { _M_fill_assign(__n, __val); }
 751:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 752:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**
 753:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @brief  Assigns a range to a %vector.
 754:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @param  __first  An input iterator.
 755:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @param  __last   An input iterator.
 756:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *
 757:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
ARM GAS  /tmp/ccw5fbVv.s 			page 68


 758:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  range [__first,__last).
 759:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *
 760:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 761:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 762:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  of elements assigned.
 763:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        */
 764:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 765:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       template<typename _InputIterator,
 766:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 767:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	void
 768:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	assign(_InputIterator __first, _InputIterator __last)
 769:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	{ _M_assign_dispatch(__first, __last, __false_type()); }
 770:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #else
 771:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       template<typename _InputIterator>
 772:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	void
 773:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	assign(_InputIterator __first, _InputIterator __last)
 774:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	{
 775:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 776:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 777:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  _M_assign_dispatch(__first, __last, _Integral());
 778:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	}
 779:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #endif
 780:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 781:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 782:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**
 783:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @brief  Assigns an initializer list to a %vector.
 784:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 785:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *
 786:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 787:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  initializer list @a __l.
 788:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *
 789:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 790:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 791:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  of elements assigned.
 792:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        */
 793:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       void
 794:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       assign(initializer_list<value_type> __l)
 795:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       {
 796:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	this->_M_assign_aux(__l.begin(), __l.end(),
 797:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 			    random_access_iterator_tag());
 798:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       }
 799:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #endif
 800:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 801:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /// Get a copy of the memory allocation object.
 802:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       using _Base::get_allocator;
 803:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 804:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       // iterators
 805:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**
 806:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  Returns a read/write iterator that points to the first
 807:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
 808:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  element order.
 809:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        */
 810:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       iterator
 811:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       begin() _GLIBCXX_NOEXCEPT
 812:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_start); }
 813:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 814:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**
ARM GAS  /tmp/ccw5fbVv.s 			page 69


 815:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points to the
 816:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  first element in the %vector.  Iteration is done in ordinary
 817:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  element order.
 818:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        */
 819:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       const_iterator
 820:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       begin() const _GLIBCXX_NOEXCEPT
 821:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 822:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 823:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**
 824:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  Returns a read/write iterator that points one past the last
 825:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
 826:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  element order.
 827:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        */
 828:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       iterator
 829:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       end() _GLIBCXX_NOEXCEPT
 830:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 831:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 832:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**
 833:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points one past
 834:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  the last element in the %vector.  Iteration is done in
 835:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  ordinary element order.
 836:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        */
 837:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       const_iterator
 838:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       end() const _GLIBCXX_NOEXCEPT
 839:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 840:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 841:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**
 842:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  Returns a read/write reverse iterator that points to the
 843:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  last element in the %vector.  Iteration is done in reverse
 844:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  element order.
 845:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        */
 846:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       reverse_iterator
 847:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       rbegin() _GLIBCXX_NOEXCEPT
 848:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       { return reverse_iterator(end()); }
 849:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 850:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**
 851:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 852:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  to the last element in the %vector.  Iteration is done in
 853:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  reverse element order.
 854:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        */
 855:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       const_reverse_iterator
 856:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       rbegin() const _GLIBCXX_NOEXCEPT
 857:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       { return const_reverse_iterator(end()); }
 858:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 859:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**
 860:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  Returns a read/write reverse iterator that points to one
 861:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  before the first element in the %vector.  Iteration is done
 862:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  in reverse element order.
 863:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        */
 864:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       reverse_iterator
 865:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       rend() _GLIBCXX_NOEXCEPT
 866:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       { return reverse_iterator(begin()); }
 867:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 868:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**
 869:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 870:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  to one before the first element in the %vector.  Iteration
 871:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  is done in reverse element order.
ARM GAS  /tmp/ccw5fbVv.s 			page 70


 872:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        */
 873:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       const_reverse_iterator
 874:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       rend() const _GLIBCXX_NOEXCEPT
 875:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       { return const_reverse_iterator(begin()); }
 876:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 877:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 878:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**
 879:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points to the
 880:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  first element in the %vector.  Iteration is done in ordinary
 881:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  element order.
 882:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        */
 883:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       const_iterator
 884:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       cbegin() const noexcept
 885:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 886:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 887:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**
 888:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points one past
 889:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  the last element in the %vector.  Iteration is done in
 890:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  ordinary element order.
 891:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        */
 892:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       const_iterator
 893:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       cend() const noexcept
 894:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 895:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 896:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**
 897:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 898:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  to the last element in the %vector.  Iteration is done in
 899:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  reverse element order.
 900:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        */
 901:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       const_reverse_iterator
 902:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       crbegin() const noexcept
 903:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       { return const_reverse_iterator(end()); }
 904:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 905:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**
 906:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 907:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  to one before the first element in the %vector.  Iteration
 908:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  is done in reverse element order.
 909:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        */
 910:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       const_reverse_iterator
 911:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       crend() const noexcept
 912:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       { return const_reverse_iterator(begin()); }
 913:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #endif
 914:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 915:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       // [23.2.4.2] capacity
 916:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**  Returns the number of elements in the %vector.  */
 917:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       size_type
 918:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       size() const _GLIBCXX_NOEXCEPT
 919:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 920:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 921:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**  Returns the size() of the largest possible %vector.  */
 922:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       size_type
 923:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       max_size() const _GLIBCXX_NOEXCEPT
 924:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       { return _S_max_size(_M_get_Tp_allocator()); }
 925:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 926:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 927:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**
 928:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
ARM GAS  /tmp/ccw5fbVv.s 			page 71


 929:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @param  __new_size  Number of elements the %vector should contain.
 930:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *
 931:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  This function will %resize the %vector to the specified
 932:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  number of elements.  If the number is smaller than the
 933:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 934:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  default constructed elements are appended.
 935:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        */
 936:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       void
 937:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       resize(size_type __new_size)
 938:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       {
 939:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	if (__new_size > size())
 940:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  _M_default_append(__new_size - size());
 941:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	else if (__new_size < size())
 942:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 943:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       }
 944:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 945:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**
 946:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 947:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @param  __new_size  Number of elements the %vector should contain.
 948:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @param  __x  Data with which new elements should be populated.
 949:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *
 950:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  This function will %resize the %vector to the specified
 951:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  number of elements.  If the number is smaller than the
 952:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 953:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  the %vector is extended and new elements are populated with
 954:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  given data.
 955:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        */
 956:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       void
 957:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       resize(size_type __new_size, const value_type& __x)
 958:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       {
 959:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	if (__new_size > size())
 960:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  _M_fill_insert(end(), __new_size - size(), __x);
 961:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	else if (__new_size < size())
 962:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 963:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       }
 964:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #else
 965:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**
 966:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 967:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @param  __new_size  Number of elements the %vector should contain.
 968:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @param  __x  Data with which new elements should be populated.
 969:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *
 970:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  This function will %resize the %vector to the specified
 971:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  number of elements.  If the number is smaller than the
 972:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 973:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  the %vector is extended and new elements are populated with
 974:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  given data.
 975:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        */
 976:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       void
 977:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       resize(size_type __new_size, value_type __x = value_type())
 978:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       {
 979:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	if (__new_size > size())
 980:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  _M_fill_insert(end(), __new_size - size(), __x);
 981:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	else if (__new_size < size())
 982:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 983:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       }
 984:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #endif
 985:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
ARM GAS  /tmp/ccw5fbVv.s 			page 72


 986:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 987:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**  A non-binding request to reduce capacity() to size().  */
 988:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       void
 989:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       shrink_to_fit()
 990:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       { _M_shrink_to_fit(); }
 991:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #endif
 992:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 993:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**
 994:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  Returns the total number of elements that the %vector can
 995:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  hold before needing to allocate more memory.
 996:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        */
 997:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       size_type
 998:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       capacity() const _GLIBCXX_NOEXCEPT
 999:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_end_of_storage
1000:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 			 - this->_M_impl._M_start); }
1001:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1002:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**
1003:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  Returns true if the %vector is empty.  (Thus begin() would
1004:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  equal end().)
1005:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        */
1006:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       _GLIBCXX_NODISCARD bool
1007:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       empty() const _GLIBCXX_NOEXCEPT
1008:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       { return begin() == end(); }
1009:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1010:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**
1011:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @brief  Attempt to preallocate enough memory for specified number of
1012:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *          elements.
1013:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @param  __n  Number of elements required.
1014:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @throw  std::length_error  If @a n exceeds @c max_size().
1015:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *
1016:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  This function attempts to reserve enough memory for the
1017:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  %vector to hold the specified number of elements.  If the
1018:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  number requested is more than max_size(), length_error is
1019:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  thrown.
1020:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *
1021:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  The advantage of this function is that if optimal code is a
1022:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  necessity and the user can determine the number of elements
1023:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  that will be required, the user can reserve the memory in
1024:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  %advance, and thus prevent a possible reallocation of memory
1025:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  and copying of %vector data.
1026:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        */
1027:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       void
1028:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       reserve(size_type __n);
1029:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1030:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       // element access
1031:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**
1032:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @brief  Subscript access to the data contained in the %vector.
1033:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @param __n The index of the element for which data should be
1034:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  accessed.
1035:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @return  Read/write reference to data.
1036:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *
1037:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  This operator allows for easy, array-style, data access.
1038:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  Note that data access with this operator is unchecked and
1039:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  out_of_range lookups are not defined. (For checked lookups
1040:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  see at().)
1041:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        */
1042:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       reference
ARM GAS  /tmp/ccw5fbVv.s 			page 73


1043:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       operator[](size_type __n) _GLIBCXX_NOEXCEPT
 431              		.loc 2 1043 7 view .LVU72
 432              	.LBB1843:
1044:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       {
1045:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	__glibcxx_requires_subscript(__n);
1046:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	return *(this->_M_impl._M_start + __n);
 433              		.loc 2 1046 25 is_stmt 0 view .LVU73
 434 000e 2568     		ldr	r5, [r4]
 435              	.LVL16:
 436              		.loc 2 1046 25 view .LVU74
 437              	.LBE1843:
 438              	.LBE1842:
 439              	.LBB1845:
 440              	.LBI1845:
 441              		.file 10 "../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h"
   1:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h **** // This file is part of Eigen, a lightweight C++ template library
   2:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h **** // for linear algebra.
   3:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h **** //
   4:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h **** // Copyright (C) 2010 Benoit Jacob <jacob.benoit.1@gmail.com>
   5:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h **** //
   6:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h **** // This Source Code Form is subject to the terms of the Mozilla
   7:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h **** // Public License v. 2.0. If a copy of the MPL was not distributed
   8:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h **** // with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
   9:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h **** 
  10:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h **** #ifndef EIGEN_STRIDE_H
  11:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h **** #define EIGEN_STRIDE_H
  12:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h **** 
  13:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h **** #include "./InternalHeaderCheck.h"
  14:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h **** 
  15:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h **** namespace Eigen {
  16:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h **** 
  17:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h **** /** \class Stride
  18:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****   * \ingroup Core_Module
  19:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****   *
  20:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****   * \brief Holds strides information for Map
  21:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****   *
  22:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****   * This class holds the strides information for mapping arrays with strides with class Map.
  23:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****   *
  24:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****   * It holds two values: the inner stride and the outer stride.
  25:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****   *
  26:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****   * The inner stride is the pointer increment between two consecutive entries within a given row of
  27:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****   * row-major matrix or within a given column of a column-major matrix.
  28:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****   *
  29:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****   * The outer stride is the pointer increment between two consecutive rows of a row-major matrix or
  30:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****   * between two consecutive columns of a column-major matrix.
  31:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****   *
  32:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****   * These two values can be passed either at compile-time as template parameters, or at runtime as
  33:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****   * arguments to the constructor.
  34:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****   *
  35:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****   * Indeed, this class takes two template parameters:
  36:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****   *  \tparam OuterStrideAtCompileTime_ the outer stride, or Dynamic if you want to specify it at ru
  37:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****   *  \tparam InnerStrideAtCompileTime_ the inner stride, or Dynamic if you want to specify it at ru
  38:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****   *
  39:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****   * Here is an example:
  40:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****   * \include Map_general_stride.cpp
  41:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****   * Output: \verbinclude Map_general_stride.out
  42:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****   *
ARM GAS  /tmp/ccw5fbVv.s 			page 74


  43:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****   * Both strides can be negative. However, a negative stride of -1 cannot be specified at compile t
  44:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****   * because of the ambiguity with Dynamic which is defined to -1 (historically, negative strides we
  45:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****   * not allowed).
  46:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****   *
  47:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****   * Note that for compile-time vectors (ColsAtCompileTime==1 or RowsAtCompile==1),
  48:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****   * the inner stride is the pointer increment between two consecutive elements,
  49:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****   * regardless of storage layout.
  50:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****   *
  51:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****   * \sa class InnerStride, class OuterStride, \ref TopicStorageOrders
  52:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****   */
  53:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h **** template<int OuterStrideAtCompileTime_, int InnerStrideAtCompileTime_>
  54:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h **** class Stride
  55:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h **** {
  56:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****   public:
  57:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****     typedef Eigen::Index Index; ///< \deprecated since Eigen 3.3
  58:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****     enum {
  59:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****       InnerStrideAtCompileTime = InnerStrideAtCompileTime_,
  60:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****       OuterStrideAtCompileTime = OuterStrideAtCompileTime_
  61:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****     };
  62:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h **** 
  63:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****     /** Default constructor, for use when strides are fixed at compile time */
  64:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****     EIGEN_DEVICE_FUNC
  65:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****     Stride()
 442              		.loc 10 65 5 is_stmt 1 view .LVU75
 443              	.LBB1846:
 444              	.LBB1847:
 445              	.LBI1847:
 446              		.file 11 "../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h"
   1:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** // This file is part of Eigen, a lightweight C++ template library
   2:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** // for linear algebra.
   3:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** //
   4:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** // Copyright (C) 2008 Gael Guennebaud <gael.guennebaud@inria.fr>
   5:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** // Copyright (C) 2006-2008 Benoit Jacob <jacob.benoit.1@gmail.com>
   6:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** //
   7:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** // This Source Code Form is subject to the terms of the Mozilla
   8:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** // Public License v. 2.0. If a copy of the MPL was not distributed
   9:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** // with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
  10:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** 
  11:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** #ifndef EIGEN_XPRHELPER_H
  12:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** #define EIGEN_XPRHELPER_H
  13:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** 
  14:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** #include "../InternalHeaderCheck.h"
  15:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** 
  16:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** namespace Eigen {
  17:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** 
  18:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** namespace internal {
  19:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** 
  20:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** template<typename IndexDest, typename IndexSrc>
  21:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** EIGEN_DEVICE_FUNC
  22:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** inline IndexDest convert_index(const IndexSrc& idx) {
  23:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h ****   // for sizeof(IndexDest)>=sizeof(IndexSrc) compilers should be able to optimize this away:
  24:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h ****   eigen_internal_assert(idx <= NumTraits<IndexDest>::highest() && "Index value to big for target ty
  25:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h ****   return IndexDest(idx);
  26:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** }
  27:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** 
  28:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** // true if T can be considered as an integral index (i.e., and integral type or enum)
  29:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** template<typename T> struct is_valid_index_type
ARM GAS  /tmp/ccw5fbVv.s 			page 75


  30:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** {
  31:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h ****   enum { value = internal::is_integral<T>::value || std::is_enum<T>::value
  32:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h ****   };
  33:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** };
  34:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** 
  35:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** // true if both types are not valid index types
  36:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** template<typename RowIndices, typename ColIndices>
  37:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** struct valid_indexed_view_overload {
  38:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h ****   enum { value = !(internal::is_valid_index_type<RowIndices>::value && internal::is_valid_index_typ
  39:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** };
  40:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** 
  41:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** // promote_scalar_arg is an helper used in operation between an expression and a scalar, like:
  42:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** //    expression * scalar
  43:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** // Its role is to determine how the type T of the scalar operand should be promoted given the scala
  44:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** // The IsSupported template parameter must be provided by the caller as: internal::has_ReturnType<S
  45:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** // Then the logic is as follows:
  46:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** //  - if the operation is natively supported as defined by IsSupported, then the scalar type is not
  47:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** //  - otherwise, NumTraits<ExprScalar>::Literal is returned if T is implicitly convertible to NumTr
  48:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** //  - otherwise, ExprScalar is returned if T is implicitly convertible to ExprScalar AND that this 
  49:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** //  - In all other cases, the promoted type is not defined, and the respective operation is thus in
  50:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** template<typename ExprScalar,typename T, bool IsSupported>
  51:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** struct promote_scalar_arg;
  52:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** 
  53:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** template<typename S,typename T>
  54:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** struct promote_scalar_arg<S,T,true>
  55:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** {
  56:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h ****   typedef T type;
  57:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** };
  58:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** 
  59:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** // Recursively check safe conversion to PromotedType, and then ExprScalar if they are different.
  60:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** template<typename ExprScalar,typename T,typename PromotedType,
  61:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h ****   bool ConvertibleToLiteral = internal::is_convertible<T,PromotedType>::value,
  62:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h ****   bool IsSafe = NumTraits<T>::IsInteger || !NumTraits<PromotedType>::IsInteger>
  63:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** struct promote_scalar_arg_unsupported;
  64:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** 
  65:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** // Start recursion with NumTraits<ExprScalar>::Literal
  66:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** template<typename S,typename T>
  67:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** struct promote_scalar_arg<S,T,false> : promote_scalar_arg_unsupported<S,T,typename NumTraits<S>::Li
  68:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** 
  69:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** // We found a match!
  70:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** template<typename S,typename T, typename PromotedType>
  71:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** struct promote_scalar_arg_unsupported<S,T,PromotedType,true,true>
  72:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** {
  73:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h ****   typedef PromotedType type;
  74:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** };
  75:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** 
  76:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** // No match, but no real-to-integer issues, and ExprScalar and current PromotedType are different,
  77:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** // so let's try to promote to ExprScalar
  78:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** template<typename ExprScalar,typename T, typename PromotedType>
  79:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** struct promote_scalar_arg_unsupported<ExprScalar,T,PromotedType,false,true>
  80:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h ****    : promote_scalar_arg_unsupported<ExprScalar,T,ExprScalar>
  81:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** {};
  82:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** 
  83:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** // Unsafe real-to-integer, let's stop.
  84:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** template<typename S,typename T, typename PromotedType, bool ConvertibleToLiteral>
  85:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** struct promote_scalar_arg_unsupported<S,T,PromotedType,ConvertibleToLiteral,false> {};
  86:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** 
ARM GAS  /tmp/ccw5fbVv.s 			page 76


  87:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** // T is not even convertible to ExprScalar, let's stop.
  88:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** template<typename S,typename T>
  89:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** struct promote_scalar_arg_unsupported<S,T,S,false,true> {};
  90:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** 
  91:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** //classes inheriting no_assignment_operator don't generate a default operator=.
  92:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** class no_assignment_operator
  93:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** {
  94:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h ****   private:
  95:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h ****     no_assignment_operator& operator=(const no_assignment_operator&);
  96:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h ****   protected:
  97:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEFAULT_COPY_CONSTRUCTOR(no_assignment_operator)
  98:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(no_assignment_operator)
  99:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** };
 100:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** 
 101:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** /** \internal return the index type with the largest number of bits */
 102:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** template<typename I1, typename I2>
 103:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** struct promote_index_type
 104:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** {
 105:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h ****   typedef std::conditional_t<(sizeof(I1)<sizeof(I2)), I2, I1> type;
 106:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** };
 107:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** 
 108:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** /** \internal If the template parameter Value is Dynamic, this class is just a wrapper around a T v
 109:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h ****   * can be accessed using value() and setValue().
 110:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h ****   * Otherwise, this class is an empty structure and value() just returns the template parameter Val
 111:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h ****   */
 112:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** template<typename T, int Value> class variable_if_dynamic
 113:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** {
 114:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h ****   public:
 115:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(variable_if_dynamic)
 116:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T v) { EIGEN_ONLY_USED_FOR_D
 447              		.loc 11 116 52 view .LVU76
 448              		.loc 11 116 52 is_stmt 0 view .LVU77
 449              	.LBE1847:
 450              	.LBB1848:
 451              	.LBI1848:
 452              		.loc 11 116 52 is_stmt 1 view .LVU78
 453              		.loc 11 116 52 is_stmt 0 view .LVU79
 454              	.LBE1848:
 455              	.LBE1846:
 456              	.LBE1845:
 457              	.LBB1849:
 458              	.LBI1849:
 459              		.file 12 "../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h"
   1:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h **** // This file is part of Eigen, a lightweight C++ template library
   2:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h **** // for linear algebra.
   3:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h **** //
   4:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h **** // Copyright (C) 2007-2010 Benoit Jacob <jacob.benoit.1@gmail.com>
   5:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h **** // Copyright (C) 2008 Gael Guennebaud <gael.guennebaud@inria.fr>
   6:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h **** //
   7:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h **** // This Source Code Form is subject to the terms of the Mozilla
   8:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h **** // Public License v. 2.0. If a copy of the MPL was not distributed
   9:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h **** // with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
  10:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h **** 
  11:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h **** #ifndef EIGEN_MAP_H
  12:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h **** #define EIGEN_MAP_H
  13:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h **** 
  14:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h **** #include "./InternalHeaderCheck.h"
ARM GAS  /tmp/ccw5fbVv.s 			page 77


  15:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h **** 
  16:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h **** namespace Eigen {
  17:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h **** 
  18:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h **** namespace internal {
  19:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h **** template<typename PlainObjectType, int MapOptions, typename StrideType>
  20:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h **** struct traits<Map<PlainObjectType, MapOptions, StrideType> >
  21:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****   : public traits<PlainObjectType>
  22:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h **** {
  23:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****   typedef traits<PlainObjectType> TraitsBase;
  24:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****   enum {
  25:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****     PlainObjectTypeInnerSize = ((traits<PlainObjectType>::Flags&RowMajorBit)==RowMajorBit)
  26:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****                              ? PlainObjectType::ColsAtCompileTime
  27:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****                              : PlainObjectType::RowsAtCompileTime,
  28:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h **** 
  29:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****     InnerStrideAtCompileTime = StrideType::InnerStrideAtCompileTime == 0
  30:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****                              ? int(PlainObjectType::InnerStrideAtCompileTime)
  31:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****                              : int(StrideType::InnerStrideAtCompileTime),
  32:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****     OuterStrideAtCompileTime = StrideType::OuterStrideAtCompileTime == 0
  33:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****                              ? (InnerStrideAtCompileTime==Dynamic || PlainObjectTypeInnerSize==Dyna
  34:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****                                 ? Dynamic
  35:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****                                 : int(InnerStrideAtCompileTime) * int(PlainObjectTypeInnerSize))
  36:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****                              : int(StrideType::OuterStrideAtCompileTime),
  37:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****     Alignment = int(MapOptions)&int(AlignedMask),
  38:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****     Flags0 = TraitsBase::Flags & (~NestByRefBit),
  39:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****     Flags = is_lvalue<PlainObjectType>::value ? int(Flags0) : (int(Flags0) & ~LvalueBit)
  40:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****   };
  41:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h **** private:
  42:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****   enum { Options }; // Expressions don't have Options
  43:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h **** };
  44:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h **** }
  45:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h **** 
  46:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h **** /** \class Map
  47:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****   * \ingroup Core_Module
  48:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****   *
  49:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****   * \brief A matrix or vector expression mapping an existing array of data.
  50:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****   *
  51:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****   * \tparam PlainObjectType the equivalent matrix type of the mapped data
  52:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****   * \tparam MapOptions specifies the pointer alignment in bytes. It can be: \c #Aligned128, \c #Ali
  53:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****   *                The default is \c #Unaligned.
  54:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****   * \tparam StrideType optionally specifies strides. By default, Map assumes the memory layout
  55:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****   *                   of an ordinary, contiguous array. This can be overridden by specifying stride
  56:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****   *                   The type passed here must be a specialization of the Stride template, see exa
  57:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****   *
  58:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****   * This class represents a matrix or vector expression mapping an existing array of data.
  59:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****   * It can be used to let Eigen interface without any overhead with non-Eigen data structures,
  60:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****   * such as plain C arrays or structures from other libraries. By default, it assumes that the
  61:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****   * data is laid out contiguously in memory. You can however override this by explicitly specifying
  62:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****   * inner and outer strides.
  63:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****   *
  64:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****   * Here's an example of simply mapping a contiguous array as a \ref TopicStorageOrders "column-maj
  65:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****   * \include Map_simple.cpp
  66:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****   * Output: \verbinclude Map_simple.out
  67:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****   *
  68:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****   * If you need to map non-contiguous arrays, you can do so by specifying strides:
  69:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****   *
  70:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****   * Here's an example of mapping an array as a vector, specifying an inner stride, that is, the poi
  71:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****   * increment between two consecutive coefficients. Here, we're specifying the inner stride as a co
ARM GAS  /tmp/ccw5fbVv.s 			page 78


  72:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****   * fixed value.
  73:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****   * \include Map_inner_stride.cpp
  74:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****   * Output: \verbinclude Map_inner_stride.out
  75:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****   *
  76:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****   * Here's an example of mapping an array while specifying an outer stride. Here, since we're mappi
  77:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****   * as a column-major matrix, 'outer stride' means the pointer increment between two consecutive co
  78:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****   * Here, we're specifying the outer stride as a runtime parameter. Note that here \c OuterStride<>
  79:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****   * a short version of \c OuterStride<Dynamic> because the default template parameter of OuterStrid
  80:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****   * is  \c Dynamic
  81:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****   * \include Map_outer_stride.cpp
  82:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****   * Output: \verbinclude Map_outer_stride.out
  83:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****   *
  84:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****   * For more details and for an example of specifying both an inner and an outer stride, see class 
  85:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****   *
  86:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****   * \b Tip: to change the array of data mapped by a Map object, you can use the C++
  87:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****   * placement new syntax:
  88:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****   *
  89:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****   * Example: \include Map_placement_new.cpp
  90:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****   * Output: \verbinclude Map_placement_new.out
  91:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****   *
  92:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****   * This class is the return type of PlainObjectBase::Map() but can also be used directly.
  93:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****   *
  94:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****   * \sa PlainObjectBase::Map(), \ref TopicStorageOrders
  95:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****   */
  96:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h **** template<typename PlainObjectType, int MapOptions, typename StrideType> class Map
  97:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****   : public MapBase<Map<PlainObjectType, MapOptions, StrideType> >
  98:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h **** {
  99:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****   public:
 100:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h **** 
 101:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****     typedef MapBase<Map> Base;
 102:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****     EIGEN_DENSE_PUBLIC_INTERFACE(Map)
 103:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h **** 
 104:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****     typedef typename Base::PointerType PointerType;
 105:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****     typedef PointerType PointerArgType;
 106:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****     EIGEN_DEVICE_FUNC
 107:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****     inline PointerType cast_to_pointer_type(PointerArgType ptr) { return ptr; }
 108:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h **** 
 109:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****     EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
 110:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****     inline Index innerStride() const
 111:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****     {
 112:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****       return StrideType::InnerStrideAtCompileTime != 0 ? m_stride.inner() : 1;
 113:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****     }
 114:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h **** 
 115:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****     EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
 116:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****     inline Index outerStride() const
 117:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****     {
 118:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****       return StrideType::OuterStrideAtCompileTime != 0 ? m_stride.outer()
 119:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****            : internal::traits<Map>::OuterStrideAtCompileTime != Dynamic ? Index(internal::traits<Ma
 120:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****            : IsVectorAtCompileTime ? (this->size() * innerStride())
 121:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****            : int(Flags)&RowMajorBit ? (this->cols() * innerStride())
 122:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****            : (this->rows() * innerStride());
 123:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****     }
 124:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h **** 
 125:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****     /** Constructor in the fixed-size case.
 126:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****       *
 127:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****       * \param dataPtr pointer to the array to map
 128:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****       * \param stride optional Stride object, passing the strides.
ARM GAS  /tmp/ccw5fbVv.s 			page 79


 129:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****       */
 130:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****     EIGEN_DEVICE_FUNC
 131:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****     explicit inline Map(PointerArgType dataPtr, const StrideType& stride = StrideType())
 132:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****       : Base(cast_to_pointer_type(dataPtr)), m_stride(stride)
 133:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****     {
 134:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****     }
 135:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h **** 
 136:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****     /** Constructor in the dynamic-size vector case.
 137:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****       *
 138:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****       * \param dataPtr pointer to the array to map
 139:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****       * \param size the size of the vector expression
 140:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****       * \param stride optional Stride object, passing the strides.
 141:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****       */
 142:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****     EIGEN_DEVICE_FUNC
 143:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****     inline Map(PointerArgType dataPtr, Index size, const StrideType& stride = StrideType())
 460              		.loc 12 143 12 is_stmt 1 view .LVU80
 461              	.LBB1850:
 462              	.LBI1850:
 107:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h **** 
 463              		.loc 12 107 24 view .LVU81
 107:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h **** 
 464              		.loc 12 107 24 is_stmt 0 view .LVU82
 465              	.LBE1850:
 466              	.LBB1851:
 467              	.LBI1851:
 468              		.file 13 "../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h"
   1:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h **** // This file is part of Eigen, a lightweight C++ template library
   2:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h **** // for linear algebra.
   3:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h **** //
   4:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h **** // Copyright (C) 2007-2010 Benoit Jacob <jacob.benoit.1@gmail.com>
   5:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h **** // Copyright (C) 2008 Gael Guennebaud <gael.guennebaud@inria.fr>
   6:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h **** //
   7:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h **** // This Source Code Form is subject to the terms of the Mozilla
   8:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h **** // Public License v. 2.0. If a copy of the MPL was not distributed
   9:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h **** // with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
  10:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h **** 
  11:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h **** #ifndef EIGEN_MAPBASE_H
  12:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h **** #define EIGEN_MAPBASE_H
  13:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h **** 
  14:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h **** #define EIGEN_STATIC_ASSERT_INDEX_BASED_ACCESS(Derived) \
  15:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****       EIGEN_STATIC_ASSERT((int(internal::evaluator<Derived>::Flags) & LinearAccessBit) || Derived::
  16:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****                           YOU_ARE_TRYING_TO_USE_AN_INDEX_BASED_ACCESSOR_ON_AN_EXPRESSION_THAT_DOES_
  17:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h **** 
  18:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h **** #include "./InternalHeaderCheck.h"
  19:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h **** 
  20:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h **** namespace Eigen {
  21:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h **** 
  22:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h **** /** \ingroup Core_Module
  23:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****   *
  24:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****   * \brief Base class for dense Map and Block expression with direct access
  25:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****   *
  26:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****   * This base class provides the const low-level accessors (e.g. coeff, coeffRef) of dense
  27:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****   * Map and Block objects with direct access.
  28:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****   * Typical users do not have to directly deal with this class.
  29:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****   *
  30:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****   * This class can be extended by through the macro plugin \c EIGEN_MAPBASE_PLUGIN.
  31:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****   * See \link TopicCustomizing_Plugins customizing Eigen \endlink for details.
ARM GAS  /tmp/ccw5fbVv.s 			page 80


  32:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****   *
  33:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****   * The \c Derived class has to provide the following two methods describing the memory layout:
  34:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****   *  \code Index innerStride() const; \endcode
  35:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****   *  \code Index outerStride() const; \endcode
  36:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****   *
  37:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****   * \sa class Map, class Block
  38:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****   */
  39:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h **** template<typename Derived> class MapBase<Derived, ReadOnlyAccessors>
  40:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****   : public internal::dense_xpr_base<Derived>::type
  41:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h **** {
  42:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****   public:
  43:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h **** 
  44:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     typedef typename internal::dense_xpr_base<Derived>::type Base;
  45:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     enum {
  46:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****       RowsAtCompileTime = internal::traits<Derived>::RowsAtCompileTime,
  47:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****       ColsAtCompileTime = internal::traits<Derived>::ColsAtCompileTime,
  48:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****       InnerStrideAtCompileTime = internal::traits<Derived>::InnerStrideAtCompileTime,
  49:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****       SizeAtCompileTime = Base::SizeAtCompileTime
  50:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     };
  51:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h **** 
  52:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     typedef typename internal::traits<Derived>::StorageKind StorageKind;
  53:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     typedef typename internal::traits<Derived>::Scalar Scalar;
  54:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     typedef typename internal::packet_traits<Scalar>::type PacketScalar;
  55:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     typedef typename NumTraits<Scalar>::Real RealScalar;
  56:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     typedef std::conditional_t<
  57:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****                 bool(internal::is_lvalue<Derived>::value),
  58:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****                 Scalar *,
  59:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****                 const Scalar *>
  60:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****             PointerType;
  61:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h **** 
  62:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     using Base::derived;
  63:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h **** //    using Base::RowsAtCompileTime;
  64:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h **** //    using Base::ColsAtCompileTime;
  65:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h **** //    using Base::SizeAtCompileTime;
  66:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     using Base::MaxRowsAtCompileTime;
  67:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     using Base::MaxColsAtCompileTime;
  68:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     using Base::MaxSizeAtCompileTime;
  69:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     using Base::IsVectorAtCompileTime;
  70:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     using Base::Flags;
  71:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     using Base::IsRowMajor;
  72:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h **** 
  73:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     using Base::rows;
  74:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     using Base::cols;
  75:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     using Base::size;
  76:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     using Base::coeff;
  77:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     using Base::coeffRef;
  78:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     using Base::lazyAssign;
  79:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     using Base::eval;
  80:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h **** 
  81:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     using Base::innerStride;
  82:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     using Base::outerStride;
  83:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     using Base::rowStride;
  84:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     using Base::colStride;
  85:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h **** 
  86:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     // bug 217 - compile error on ICC 11.1
  87:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     using Base::operator=;
  88:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h **** 
ARM GAS  /tmp/ccw5fbVv.s 			page 81


  89:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     typedef typename Base::CoeffReturnType CoeffReturnType;
  90:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h **** 
  91:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     /** \copydoc DenseBase::rows() */
  92:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
  93:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     inline Index rows() const EIGEN_NOEXCEPT { return m_rows.value(); }
  94:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     /** \copydoc DenseBase::cols() */
  95:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
  96:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     inline Index cols() const EIGEN_NOEXCEPT { return m_cols.value(); }
  97:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h **** 
  98:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     /** Returns a pointer to the first coefficient of the matrix or vector.
  99:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****       *
 100:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****       * \note When addressing this data, make sure to honor the strides returned by innerStride() a
 101:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****       *
 102:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****       * \sa innerStride(), outerStride()
 103:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****       */
 104:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     EIGEN_DEVICE_FUNC inline const Scalar* data() const { return m_data; }
 105:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h **** 
 106:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     /** \copydoc PlainObjectBase::coeff(Index,Index) const */
 107:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     EIGEN_DEVICE_FUNC
 108:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     inline const Scalar& coeff(Index rowId, Index colId) const
 109:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     {
 110:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****       return m_data[colId * colStride() + rowId * rowStride()];
 111:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     }
 112:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h **** 
 113:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     /** \copydoc PlainObjectBase::coeff(Index) const */
 114:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     EIGEN_DEVICE_FUNC
 115:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     inline const Scalar& coeff(Index index) const
 116:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     {
 117:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****       EIGEN_STATIC_ASSERT_INDEX_BASED_ACCESS(Derived)
 118:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****       return m_data[index * innerStride()];
 119:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     }
 120:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h **** 
 121:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     /** \copydoc PlainObjectBase::coeffRef(Index,Index) const */
 122:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     EIGEN_DEVICE_FUNC
 123:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     inline const Scalar& coeffRef(Index rowId, Index colId) const
 124:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     {
 125:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****       return this->m_data[colId * colStride() + rowId * rowStride()];
 126:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     }
 127:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h **** 
 128:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     /** \copydoc PlainObjectBase::coeffRef(Index) const */
 129:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     EIGEN_DEVICE_FUNC
 130:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     inline const Scalar& coeffRef(Index index) const
 131:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     {
 132:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****       EIGEN_STATIC_ASSERT_INDEX_BASED_ACCESS(Derived)
 133:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****       return this->m_data[index * innerStride()];
 134:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     }
 135:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h **** 
 136:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     /** \internal */
 137:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     template<int LoadMode>
 138:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     inline PacketScalar packet(Index rowId, Index colId) const
 139:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     {
 140:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****       return internal::ploadt<PacketScalar, LoadMode>
 141:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****                (m_data + (colId * colStride() + rowId * rowStride()));
 142:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     }
 143:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h **** 
 144:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     /** \internal */
 145:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     template<int LoadMode>
ARM GAS  /tmp/ccw5fbVv.s 			page 82


 146:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     inline PacketScalar packet(Index index) const
 147:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     {
 148:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****       EIGEN_STATIC_ASSERT_INDEX_BASED_ACCESS(Derived)
 149:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****       return internal::ploadt<PacketScalar, LoadMode>(m_data + index * innerStride());
 150:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     }
 151:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h **** 
 152:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     /** \internal Constructor for fixed size matrices or vectors */
 153:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     EIGEN_DEVICE_FUNC
 154:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     explicit inline MapBase(PointerType dataPtr) : m_data(dataPtr), m_rows(RowsAtCompileTime), m_co
 155:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     {
 156:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****       EIGEN_STATIC_ASSERT_FIXED_SIZE(Derived)
 157:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****       checkSanity<Derived>();
 158:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     }
 159:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h **** 
 160:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     /** \internal Constructor for dynamically sized vectors */
 161:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     EIGEN_DEVICE_FUNC
 162:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     inline MapBase(PointerType dataPtr, Index vecSize)
 469              		.loc 13 162 12 is_stmt 1 view .LVU83
 470              	.LBB1852:
 471              	.LBB1853:
 472              	.LBI1853:
 473              		.file 14 "../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h"
   1:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** // This file is part of Eigen, a lightweight C++ template library
   2:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** // for linear algebra.
   3:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** //
   4:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** // Copyright (C) 2006-2009 Benoit Jacob <jacob.benoit.1@gmail.com>
   5:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** // Copyright (C) 2008 Gael Guennebaud <gael.guennebaud@inria.fr>
   6:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** //
   7:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** // This Source Code Form is subject to the terms of the Mozilla
   8:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** // Public License v. 2.0. If a copy of the MPL was not distributed
   9:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** // with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
  10:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
  11:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** #ifndef EIGEN_MATRIXBASE_H
  12:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** #define EIGEN_MATRIXBASE_H
  13:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
  14:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** #include "./InternalHeaderCheck.h"
  15:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
  16:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** namespace Eigen {
  17:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
  18:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** /** \class MatrixBase
  19:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****   * \ingroup Core_Module
  20:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****   *
  21:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****   * \brief Base class for all dense matrices, vectors, and expressions
  22:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****   *
  23:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****   * This class is the base that is inherited by all matrix, vector, and related expression
  24:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****   * types. Most of the Eigen API is contained in this class, and its base classes. Other important
  25:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****   * classes for the Eigen API are Matrix, and VectorwiseOp.
  26:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****   *
  27:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****   * Note that some methods are defined in other modules such as the \ref LU_Module LU module
  28:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****   * for all functions related to matrix inversions.
  29:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****   *
  30:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****   * \tparam Derived is the derived type, e.g. a matrix type, or an expression, etc.
  31:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****   *
  32:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****   * When writing a function taking Eigen objects as argument, if you want your function
  33:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****   * to take as argument any matrix, vector, or expression, just let it take a
  34:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****   * MatrixBase argument. As an example, here is a function printFirstRow which, given
  35:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****   * a matrix, vector, or expression \a x, prints the first row of \a x.
ARM GAS  /tmp/ccw5fbVv.s 			page 83


  36:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****   *
  37:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****   * \code
  38:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     template<typename Derived>
  39:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     void printFirstRow(const Eigen::MatrixBase<Derived>& x)
  40:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     {
  41:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****       cout << x.row(0) << endl;
  42:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     }
  43:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****   * \endcode
  44:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****   *
  45:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****   * This class can be extended with the help of the plugin mechanism described on the page
  46:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****   * \ref TopicCustomizing_Plugins by defining the preprocessor symbol \c EIGEN_MATRIXBASE_PLUGIN.
  47:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****   *
  48:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****   * \sa \blank \ref TopicClassHierarchy
  49:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****   */
  50:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** template<typename Derived> class MatrixBase
  51:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****   : public DenseBase<Derived>
  52:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** {
  53:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****   public:
  54:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** #ifndef EIGEN_PARSED_BY_DOXYGEN
  55:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     typedef MatrixBase StorageBaseType;
  56:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     typedef typename internal::traits<Derived>::StorageKind StorageKind;
  57:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     typedef typename internal::traits<Derived>::StorageIndex StorageIndex;
  58:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     typedef typename internal::traits<Derived>::Scalar Scalar;
  59:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     typedef typename internal::packet_traits<Scalar>::type PacketScalar;
  60:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     typedef typename NumTraits<Scalar>::Real RealScalar;
  61:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
  62:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     typedef DenseBase<Derived> Base;
  63:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     using Base::RowsAtCompileTime;
  64:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     using Base::ColsAtCompileTime;
  65:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     using Base::SizeAtCompileTime;
  66:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     using Base::MaxRowsAtCompileTime;
  67:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     using Base::MaxColsAtCompileTime;
  68:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     using Base::MaxSizeAtCompileTime;
  69:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     using Base::IsVectorAtCompileTime;
  70:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     using Base::Flags;
  71:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
  72:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     using Base::derived;
  73:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     using Base::const_cast_derived;
  74:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     using Base::rows;
  75:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     using Base::cols;
  76:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     using Base::size;
  77:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     using Base::coeff;
  78:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     using Base::coeffRef;
  79:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     using Base::lazyAssign;
  80:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     using Base::eval;
  81:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     using Base::operator-;
  82:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     using Base::operator+=;
  83:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     using Base::operator-=;
  84:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     using Base::operator*=;
  85:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     using Base::operator/=;
  86:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
  87:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     typedef typename Base::CoeffReturnType CoeffReturnType;
  88:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     typedef typename Base::ConstTransposeReturnType ConstTransposeReturnType;
  89:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     typedef typename Base::RowXpr RowXpr;
  90:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     typedef typename Base::ColXpr ColXpr;
  91:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** #endif // not EIGEN_PARSED_BY_DOXYGEN
  92:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
ARM GAS  /tmp/ccw5fbVv.s 			page 84


  93:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
  94:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
  95:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** #ifndef EIGEN_PARSED_BY_DOXYGEN
  96:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     /** type of the equivalent square matrix */
  97:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     typedef Matrix<Scalar, internal::max_size_prefer_dynamic(RowsAtCompileTime, ColsAtCompileTime),
  98:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****                            internal::max_size_prefer_dynamic(RowsAtCompileTime, ColsAtCompileTime)>
  99:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** #endif // not EIGEN_PARSED_BY_DOXYGEN
 100:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 101:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     /** \returns the size of the main diagonal, which is min(rows(),cols()).
 102:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****       * \sa rows(), cols(), SizeAtCompileTime. */
 103:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 104:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     inline Index diagonalSize() const { return (numext::mini)(rows(),cols()); }
 105:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 106:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     typedef typename Base::PlainObject PlainObject;
 107:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 108:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** #ifndef EIGEN_PARSED_BY_DOXYGEN
 109:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     /** \internal Represents a matrix with all coefficients equal to one another*/
 110:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     typedef CwiseNullaryOp<internal::scalar_constant_op<Scalar>,PlainObject> ConstantReturnType;
 111:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     /** \internal the return type of MatrixBase::adjoint() */
 112:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     typedef std::conditional_t<NumTraits<Scalar>::IsComplex,
 113:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****                CwiseUnaryOp<internal::scalar_conjugate_op<Scalar>, ConstTransposeReturnType>,
 114:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****                ConstTransposeReturnType
 115:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****             > AdjointReturnType;
 116:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     /** \internal Return type of eigenvalues() */
 117:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     typedef Matrix<std::complex<RealScalar>, internal::traits<Derived>::ColsAtCompileTime, 1, ColMa
 118:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     /** \internal the return type of identity */
 119:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     typedef CwiseNullaryOp<internal::scalar_identity_op<Scalar>,PlainObject> IdentityReturnType;
 120:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     /** \internal the return type of unit vectors */
 121:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     typedef Block<const CwiseNullaryOp<internal::scalar_identity_op<Scalar>, SquareMatrixType>,
 122:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****                   internal::traits<Derived>::RowsAtCompileTime,
 123:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****                   internal::traits<Derived>::ColsAtCompileTime> BasisReturnType;
 124:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** #endif // not EIGEN_PARSED_BY_DOXYGEN
 125:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 126:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** #define EIGEN_CURRENT_STORAGE_BASE_CLASS Eigen::MatrixBase
 127:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** #define EIGEN_DOC_UNARY_ADDONS(X,Y)
 128:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** #   include "../plugins/CommonCwiseBinaryOps.h"
 129:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** #   include "../plugins/MatrixCwiseUnaryOps.h"
 130:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** #   include "../plugins/MatrixCwiseBinaryOps.h"
 131:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** #   ifdef EIGEN_MATRIXBASE_PLUGIN
 132:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** #     include EIGEN_MATRIXBASE_PLUGIN
 133:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** #   endif
 134:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** #undef EIGEN_CURRENT_STORAGE_BASE_CLASS
 135:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** #undef EIGEN_DOC_UNARY_ADDONS
 136:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 137:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     /** Special case of the template operator=, in order to prevent the compiler
 138:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****       * from generating a default operator= (issue hit with g++ 4.1)
 139:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****       */
 140:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 141:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     Derived& operator=(const MatrixBase& other);
 142:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 143:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     // We cannot inherit here via Base::operator= since it is causing
 144:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     // trouble with MSVC.
 145:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 146:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     template <typename OtherDerived>
 147:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 148:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     Derived& operator=(const DenseBase<OtherDerived>& other);
 149:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
ARM GAS  /tmp/ccw5fbVv.s 			page 85


 150:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     template <typename OtherDerived>
 151:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 152:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     Derived& operator=(const EigenBase<OtherDerived>& other);
 153:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 154:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     template<typename OtherDerived>
 155:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 156:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     Derived& operator=(const ReturnByValue<OtherDerived>& other);
 157:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 158:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     template<typename OtherDerived>
 159:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 160:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     Derived& operator+=(const MatrixBase<OtherDerived>& other);
 161:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     template<typename OtherDerived>
 162:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 163:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     Derived& operator-=(const MatrixBase<OtherDerived>& other);
 164:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 165:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     template<typename OtherDerived>
 166:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 167:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     const Product<Derived,OtherDerived>
 168:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     operator*(const MatrixBase<OtherDerived> &other) const;
 169:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 170:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     template<typename OtherDerived>
 171:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 172:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     const Product<Derived,OtherDerived,LazyProduct>
 173:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     lazyProduct(const MatrixBase<OtherDerived> &other) const;
 174:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 175:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     template<typename OtherDerived>
 176:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     Derived& operator*=(const EigenBase<OtherDerived>& other);
 177:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 178:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     template<typename OtherDerived>
 179:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     void applyOnTheLeft(const EigenBase<OtherDerived>& other);
 180:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 181:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     template<typename OtherDerived>
 182:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     void applyOnTheRight(const EigenBase<OtherDerived>& other);
 183:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 184:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     template<typename DiagonalDerived>
 185:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 186:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     const Product<Derived, DiagonalDerived, LazyProduct>
 187:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     operator*(const DiagonalBase<DiagonalDerived> &diagonal) const;
 188:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 189:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     template<typename SkewDerived>
 190:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 191:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     const Product<Derived, SkewDerived, LazyProduct>
 192:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     operator*(const SkewSymmetricBase<SkewDerived> &skew) const;
 193:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 194:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     template<typename OtherDerived>
 195:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 196:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     typename ScalarBinaryOpTraits<typename internal::traits<Derived>::Scalar,typename internal::tra
 197:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     dot(const MatrixBase<OtherDerived>& other) const;
 198:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 199:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC RealScalar squaredNorm() const;
 200:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC RealScalar norm() const;
 201:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     RealScalar stableNorm() const;
 202:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     RealScalar blueNorm() const;
 203:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     RealScalar hypotNorm() const;
 204:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC const PlainObject normalized() const;
 205:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC const PlainObject stableNormalized() const;
 206:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC void normalize();
ARM GAS  /tmp/ccw5fbVv.s 			page 86


 207:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC void stableNormalize();
 208:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 209:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC const AdjointReturnType adjoint() const;
 210:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC void adjointInPlace();
 211:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 212:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     typedef Diagonal<Derived> DiagonalReturnType;
 213:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 214:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     DiagonalReturnType diagonal();
 215:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 216:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     typedef Diagonal<const Derived> ConstDiagonalReturnType;
 217:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 218:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     const ConstDiagonalReturnType diagonal() const;
 219:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 220:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     template<int Index>
 221:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 222:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     Diagonal<Derived, Index> diagonal();
 223:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 224:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     template<int Index>
 225:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 226:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     const Diagonal<const Derived, Index> diagonal() const;
 227:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 228:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 229:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     Diagonal<Derived, DynamicIndex> diagonal(Index index);
 230:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 231:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     const Diagonal<const Derived, DynamicIndex> diagonal(Index index) const;
 232:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 233:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     template<unsigned int Mode> struct TriangularViewReturnType { typedef TriangularView<Derived, M
 234:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     template<unsigned int Mode> struct ConstTriangularViewReturnType { typedef const TriangularView
 235:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 236:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     template<unsigned int Mode>
 237:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 238:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     typename TriangularViewReturnType<Mode>::Type triangularView();
 239:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     template<unsigned int Mode>
 240:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 241:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     typename ConstTriangularViewReturnType<Mode>::Type triangularView() const;
 242:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 243:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     template<unsigned int UpLo> struct SelfAdjointViewReturnType { typedef SelfAdjointView<Derived,
 244:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     template<unsigned int UpLo> struct ConstSelfAdjointViewReturnType { typedef const SelfAdjointVi
 245:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 246:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     template<unsigned int UpLo>
 247:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 248:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     typename SelfAdjointViewReturnType<UpLo>::Type selfadjointView();
 249:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     template<unsigned int UpLo>
 250:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 251:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     typename ConstSelfAdjointViewReturnType<UpLo>::Type selfadjointView() const;
 252:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 253:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     const SparseView<Derived> sparseView(const Scalar& m_reference = Scalar(0),
 254:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****                                          const typename NumTraits<Scalar>::Real& m_epsilon = NumTra
 255:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC static const IdentityReturnType Identity();
 256:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC static const IdentityReturnType Identity(Index rows, Index cols);
 257:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC static const BasisReturnType Unit(Index size, Index i);
 258:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC static const BasisReturnType Unit(Index i);
 259:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC static const BasisReturnType UnitX();
 260:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC static const BasisReturnType UnitY();
 261:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC static const BasisReturnType UnitZ();
 262:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC static const BasisReturnType UnitW();
 263:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
ARM GAS  /tmp/ccw5fbVv.s 			page 87


 264:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 265:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     const DiagonalWrapper<const Derived> asDiagonal() const;
 266:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     const PermutationWrapper<const Derived> asPermutation() const;
 267:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 268:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     const SkewSymmetricWrapper<const Derived> asSkewSymmetric() const;
 269:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 270:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 271:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     Derived& setIdentity();
 272:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 273:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     Derived& setIdentity(Index rows, Index cols);
 274:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC Derived& setUnit(Index i);
 275:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC Derived& setUnit(Index newSize, Index i);
 276:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 277:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     bool isIdentity(const RealScalar& prec = NumTraits<Scalar>::dummy_precision()) const;
 278:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     bool isDiagonal(const RealScalar& prec = NumTraits<Scalar>::dummy_precision()) const;
 279:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 280:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     bool isUpperTriangular(const RealScalar& prec = NumTraits<Scalar>::dummy_precision()) const;
 281:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     bool isLowerTriangular(const RealScalar& prec = NumTraits<Scalar>::dummy_precision()) const;
 282:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 283:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     bool isSkewSymmetric(const RealScalar& prec = NumTraits<Scalar>::dummy_precision()) const;
 284:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 285:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     template<typename OtherDerived>
 286:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     bool isOrthogonal(const MatrixBase<OtherDerived>& other,
 287:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****                       const RealScalar& prec = NumTraits<Scalar>::dummy_precision()) const;
 288:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     bool isUnitary(const RealScalar& prec = NumTraits<Scalar>::dummy_precision()) const;
 289:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 290:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     /** \returns true if each coefficients of \c *this and \a other are all exactly equal.
 291:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****       * \warning When using floating point scalar values you probably should rather use a
 292:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****       *          fuzzy comparison such as isApprox()
 293:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****       * \sa isApprox(), operator!= */
 294:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     template<typename OtherDerived>
 295:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC inline bool operator==(const MatrixBase<OtherDerived>& other) const
 296:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     { return cwiseEqual(other).all(); }
 297:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 298:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     /** \returns true if at least one pair of coefficients of \c *this and \a other are not exactly
 299:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****       * \warning When using floating point scalar values you probably should rather use a
 300:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****       *          fuzzy comparison such as isApprox()
 301:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****       * \sa isApprox(), operator== */
 302:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     template<typename OtherDerived>
 303:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC inline bool operator!=(const MatrixBase<OtherDerived>& other) const
 304:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     { return cwiseNotEqual(other).any(); }
 305:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 306:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     NoAlias<Derived,Eigen::MatrixBase > EIGEN_DEVICE_FUNC noalias();
 307:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 308:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     // TODO forceAlignedAccess is temporarily disabled
 309:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     // Need to find a nicer workaround.
 310:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     inline const Derived& forceAlignedAccess() const { return derived(); }
 311:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     inline Derived& forceAlignedAccess() { return derived(); }
 312:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     template<bool Enable> inline const Derived& forceAlignedAccessIf() const { return derived(); }
 313:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     template<bool Enable> inline Derived& forceAlignedAccessIf() { return derived(); }
 314:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 315:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC Scalar trace() const;
 316:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 317:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     template<int p> EIGEN_DEVICE_FUNC RealScalar lpNorm() const;
 318:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 319:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC MatrixBase<Derived>& matrix() { return *this; }
 320:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC const MatrixBase<Derived>& matrix() const { return *this; }
ARM GAS  /tmp/ccw5fbVv.s 			page 88


 321:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 322:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     /** \returns an \link Eigen::ArrayBase Array \endlink expression of this matrix
 323:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****       * \sa ArrayBase::matrix() */
 324:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ArrayWrapper<Derived> array() { return ArrayWrapper<Deriv
 325:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     /** \returns a const \link Eigen::ArrayBase Array \endlink expression of this matrix
 326:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****       * \sa ArrayBase::matrix() */
 327:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const ArrayWrapper<const Derived> array() const { return 
 328:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 329:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** /////////// LU module ///////////
 330:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 331:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     template<typename PermutationIndex = DefaultPermutationIndex> inline const FullPivLU<PlainObjec
 332:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     template<typename PermutationIndex = DefaultPermutationIndex> inline const PartialPivLU<PlainOb
 333:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 334:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     template<typename PermutationIndex = DefaultPermutationIndex> inline const PartialPivLU<PlainOb
 335:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 336:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 337:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     inline const Inverse<Derived> inverse() const;
 338:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 339:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     template<typename ResultType>
 340:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     inline void computeInverseAndDetWithCheck(
 341:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****       ResultType& inverse,
 342:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****       typename ResultType::Scalar& determinant,
 343:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****       bool& invertible,
 344:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****       const RealScalar& absDeterminantThreshold = NumTraits<Scalar>::dummy_precision()
 345:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     ) const;
 346:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 347:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     template<typename ResultType>
 348:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     inline void computeInverseWithCheck(
 349:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****       ResultType& inverse,
 350:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****       bool& invertible,
 351:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****       const RealScalar& absDeterminantThreshold = NumTraits<Scalar>::dummy_precision()
 352:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     ) const;
 353:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 354:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 355:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     Scalar determinant() const;
 356:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 357:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** /////////// Cholesky module ///////////
 358:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 359:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     inline const LLT<PlainObject>  llt() const;
 360:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     inline const LDLT<PlainObject> ldlt() const;
 361:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 362:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** /////////// QR module ///////////
 363:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 364:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     inline const HouseholderQR<PlainObject> householderQr() const;
 365:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     template<typename PermutationIndex = DefaultPermutationIndex> inline const ColPivHouseholderQR<
 366:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     template<typename PermutationIndex = DefaultPermutationIndex> inline const FullPivHouseholderQR
 367:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     template<typename PermutationIndex = DefaultPermutationIndex> inline const CompleteOrthogonalDe
 368:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 369:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** /////////// Eigenvalues module ///////////
 370:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 371:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     inline EigenvaluesReturnType eigenvalues() const;
 372:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     inline RealScalar operatorNorm() const;
 373:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 374:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** /////////// SVD module ///////////
 375:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 376:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     template<int Options = 0>
 377:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     inline JacobiSVD<PlainObject, Options> jacobiSvd() const;
ARM GAS  /tmp/ccw5fbVv.s 			page 89


 378:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     template<int Options = 0>
 379:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEPRECATED
 380:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     inline JacobiSVD<PlainObject, Options> jacobiSvd(unsigned int computationOptions) const;
 381:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 382:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     template<int Options = 0>
 383:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     inline BDCSVD<PlainObject, Options> bdcSvd() const;
 384:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     template<int Options = 0>
 385:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEPRECATED
 386:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     inline BDCSVD<PlainObject, Options> bdcSvd(unsigned int computationOptions) const;
 387:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 388:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** /////////// Geometry module ///////////
 389:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 390:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     template<typename OtherDerived>
 391:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 392:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     inline typename internal::cross_impl<Derived, OtherDerived>::return_type
 393:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     cross(const MatrixBase<OtherDerived>& other) const;
 394:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 395:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     template<typename OtherDerived>
 396:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 397:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     inline PlainObject cross3(const MatrixBase<OtherDerived>& other) const;
 398:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 399:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 400:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     inline PlainObject unitOrthogonal(void) const;
 401:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 402:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEPRECATED EIGEN_DEVICE_FUNC
 403:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     inline Matrix<Scalar,3,1> eulerAngles(Index a0, Index a1, Index a2) const;
 404:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 405:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 406:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     inline Matrix<Scalar,3,1> canonicalEulerAngles(Index a0, Index a1, Index a2) const;
 407:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 408:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     // put this as separate enum value to work around possible GCC 4.3 bug (?)
 409:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     enum { HomogeneousReturnTypeDirection = ColsAtCompileTime==1&&RowsAtCompileTime==1 ? ((internal
 410:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****                                           : ColsAtCompileTime==1 ? Vertical : Horizontal };
 411:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     typedef Homogeneous<Derived, HomogeneousReturnTypeDirection> HomogeneousReturnType;
 412:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 413:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     inline HomogeneousReturnType homogeneous() const;
 414:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 415:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     enum {
 416:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****       SizeMinusOne = SizeAtCompileTime==Dynamic ? Dynamic : SizeAtCompileTime-1
 417:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     };
 418:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     typedef Block<const Derived,
 419:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****                   internal::traits<Derived>::ColsAtCompileTime==1 ? SizeMinusOne : 1,
 420:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****                   internal::traits<Derived>::ColsAtCompileTime==1 ? 1 : SizeMinusOne> ConstStartMin
 421:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     typedef EIGEN_EXPR_BINARYOP_SCALAR_RETURN_TYPE(ConstStartMinusOne,Scalar,quotient) HNormalizedR
 422:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 423:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     inline const HNormalizedReturnType hnormalized() const;
 424:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 425:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** ////////// Householder module ///////////
 426:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 427:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 428:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     void makeHouseholderInPlace(Scalar& tau, RealScalar& beta);
 429:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     template<typename EssentialPart>
 430:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 431:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     void makeHouseholder(EssentialPart& essential,
 432:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****                          Scalar& tau, RealScalar& beta) const;
 433:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     template<typename EssentialPart>
 434:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
ARM GAS  /tmp/ccw5fbVv.s 			page 90


 435:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     void applyHouseholderOnTheLeft(const EssentialPart& essential,
 436:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****                                    const Scalar& tau,
 437:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****                                    Scalar* workspace);
 438:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     template<typename EssentialPart>
 439:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 440:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     void applyHouseholderOnTheRight(const EssentialPart& essential,
 441:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****                                     const Scalar& tau,
 442:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****                                     Scalar* workspace);
 443:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 444:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** ///////// Jacobi module /////////
 445:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 446:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     template<typename OtherScalar>
 447:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 448:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     void applyOnTheLeft(Index p, Index q, const JacobiRotation<OtherScalar>& j);
 449:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     template<typename OtherScalar>
 450:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEVICE_FUNC
 451:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     void applyOnTheRight(Index p, Index q, const JacobiRotation<OtherScalar>& j);
 452:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 453:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** ///////// SparseCore module /////////
 454:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 455:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     template<typename OtherDerived>
 456:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_STRONG_INLINE const typename SparseMatrixBase<OtherDerived>::template CwiseProductDenseRe
 457:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     cwiseProduct(const SparseMatrixBase<OtherDerived> &other) const
 458:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     {
 459:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****       return other.cwiseProduct(derived());
 460:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     }
 461:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 462:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** ///////// MatrixFunctions module /////////
 463:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 464:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     typedef typename internal::stem_function<Scalar>::type StemFunction;
 465:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** #define EIGEN_MATRIX_FUNCTION(ReturnType, Name, Description) \
 466:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     /** \returns an expression of the matrix Description of \c *this. \brief This function requires
 467:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     const ReturnType<Derived> Name() const;
 468:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** #define EIGEN_MATRIX_FUNCTION_1(ReturnType, Name, Description, Argument) \
 469:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     /** \returns an expression of the matrix Description of \c *this. \brief This function requires
 470:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     const ReturnType<Derived> Name(Argument) const;
 471:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 472:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_MATRIX_FUNCTION(MatrixExponentialReturnValue, exp, exponential)
 473:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     /** \brief Helper function for the <a href="unsupported/group__MatrixFunctions__Module.html"> u
 474:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     const MatrixFunctionReturnValue<Derived> matrixFunction(StemFunction f) const;
 475:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_MATRIX_FUNCTION(MatrixFunctionReturnValue, cosh, hyperbolic cosine)
 476:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_MATRIX_FUNCTION(MatrixFunctionReturnValue, sinh, hyperbolic sine)
 477:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_MATRIX_FUNCTION(MatrixFunctionReturnValue, atanh, inverse hyperbolic cosine)
 478:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_MATRIX_FUNCTION(MatrixFunctionReturnValue, acosh, inverse hyperbolic cosine)
 479:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_MATRIX_FUNCTION(MatrixFunctionReturnValue, asinh, inverse hyperbolic sine)
 480:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_MATRIX_FUNCTION(MatrixFunctionReturnValue, cos, cosine)
 481:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_MATRIX_FUNCTION(MatrixFunctionReturnValue, sin, sine)
 482:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_MATRIX_FUNCTION(MatrixSquareRootReturnValue, sqrt, square root)
 483:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_MATRIX_FUNCTION(MatrixLogarithmReturnValue, log, logarithm)
 484:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_MATRIX_FUNCTION_1(MatrixPowerReturnValue,        pow, power to \c p, const RealScalar& p)
 485:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_MATRIX_FUNCTION_1(MatrixComplexPowerReturnValue, pow, power to \c p, const std::complex<R
 486:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h **** 
 487:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****   protected:
 488:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEFAULT_COPY_CONSTRUCTOR(MatrixBase)
 489:../../RTNeural/modules/Eigen/Eigen/src/Core/MatrixBase.h ****     EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(MatrixBase)
 474              		.loc 14 489 5 view .LVU84
 475              	.LBB1854:
ARM GAS  /tmp/ccw5fbVv.s 			page 91


 476              	.LBI1854:
 477              		.file 15 "../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h"
   1:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** // This file is part of Eigen, a lightweight C++ template library
   2:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** // for linear algebra.
   3:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** //
   4:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** // Copyright (C) 2007-2010 Benoit Jacob <jacob.benoit.1@gmail.com>
   5:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** // Copyright (C) 2008-2010 Gael Guennebaud <gael.guennebaud@inria.fr>
   6:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** //
   7:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** // This Source Code Form is subject to the terms of the Mozilla
   8:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** // Public License v. 2.0. If a copy of the MPL was not distributed
   9:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** // with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
  10:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
  11:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** #ifndef EIGEN_DENSEBASE_H
  12:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** #define EIGEN_DENSEBASE_H
  13:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
  14:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** #include "./InternalHeaderCheck.h"
  15:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
  16:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** namespace Eigen {
  17:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
  18:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** // The index type defined by EIGEN_DEFAULT_DENSE_INDEX_TYPE must be a signed type.
  19:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** EIGEN_STATIC_ASSERT(NumTraits<DenseIndex>::IsSigned,THE_INDEX_TYPE_MUST_BE_A_SIGNED_TYPE)
  20:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
  21:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** /** \class DenseBase
  22:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****   * \ingroup Core_Module
  23:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****   *
  24:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****   * \brief Base class for all dense matrices, vectors, and arrays
  25:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****   *
  26:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****   * This class is the base that is inherited by all dense objects (matrix, vector, arrays,
  27:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****   * and related expression types). The common Eigen API for dense objects is contained in this clas
  28:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****   *
  29:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****   * \tparam Derived is the derived type, e.g., a matrix type or an expression.
  30:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****   *
  31:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****   * This class can be extended with the help of the plugin mechanism described on the page
  32:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****   * \ref TopicCustomizing_Plugins by defining the preprocessor symbol \c EIGEN_DENSEBASE_PLUGIN.
  33:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****   *
  34:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****   * \sa \blank \ref TopicClassHierarchy
  35:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****   */
  36:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** template<typename Derived> class DenseBase
  37:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** #ifndef EIGEN_PARSED_BY_DOXYGEN
  38:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****   : public DenseCoeffsBase<Derived, internal::accessors_level<Derived>::value>
  39:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** #else
  40:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****   : public DenseCoeffsBase<Derived,DirectWriteAccessors>
  41:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** #endif // not EIGEN_PARSED_BY_DOXYGEN
  42:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** {
  43:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****   public:
  44:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
  45:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     /** Inner iterator type to iterate over the coefficients of a row or column.
  46:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       * \sa class InnerIterator
  47:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       */
  48:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     typedef Eigen::InnerIterator<Derived> InnerIterator;
  49:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
  50:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     typedef typename internal::traits<Derived>::StorageKind StorageKind;
  51:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
  52:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     /**
  53:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       * \brief The type used to store indices
  54:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       * \details This typedef is relevant for types that store multiple indices such as
  55:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       *          PermutationMatrix or Transpositions, otherwise it defaults to Eigen::Index
ARM GAS  /tmp/ccw5fbVv.s 			page 92


  56:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       * \sa \blank \ref TopicPreprocessorDirectives, Eigen::Index, SparseMatrixBase.
  57:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****      */
  58:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     typedef typename internal::traits<Derived>::StorageIndex StorageIndex;
  59:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
  60:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     /** The numeric type of the expression' coefficients, e.g. float, double, int or std::complex<f
  61:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     typedef typename internal::traits<Derived>::Scalar Scalar;
  62:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
  63:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     /** The numeric type of the expression' coefficients, e.g. float, double, int or std::complex<f
  64:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       *
  65:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       * It is an alias for the Scalar type */
  66:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     typedef Scalar value_type;
  67:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
  68:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     typedef typename NumTraits<Scalar>::Real RealScalar;
  69:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     typedef DenseCoeffsBase<Derived, internal::accessors_level<Derived>::value> Base;
  70:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
  71:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     using Base::derived;
  72:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     using Base::const_cast_derived;
  73:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     using Base::rows;
  74:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     using Base::cols;
  75:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     using Base::size;
  76:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     using Base::rowIndexByOuterInner;
  77:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     using Base::colIndexByOuterInner;
  78:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     using Base::coeff;
  79:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     using Base::coeffByOuterInner;
  80:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     using Base::operator();
  81:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     using Base::operator[];
  82:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     using Base::x;
  83:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     using Base::y;
  84:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     using Base::z;
  85:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     using Base::w;
  86:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     using Base::stride;
  87:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     using Base::innerStride;
  88:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     using Base::outerStride;
  89:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     using Base::rowStride;
  90:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     using Base::colStride;
  91:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     typedef typename Base::CoeffReturnType CoeffReturnType;
  92:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
  93:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     enum {
  94:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
  95:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       RowsAtCompileTime = internal::traits<Derived>::RowsAtCompileTime,
  96:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****         /**< The number of rows at compile-time. This is just a copy of the value provided
  97:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****           * by the \a Derived type. If a value is not known at compile-time,
  98:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****           * it is set to the \a Dynamic constant.
  99:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****           * \sa MatrixBase::rows(), MatrixBase::cols(), ColsAtCompileTime, SizeAtCompileTime */
 100:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 101:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       ColsAtCompileTime = internal::traits<Derived>::ColsAtCompileTime,
 102:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****         /**< The number of columns at compile-time. This is just a copy of the value provided
 103:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****           * by the \a Derived type. If a value is not known at compile-time,
 104:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****           * it is set to the \a Dynamic constant.
 105:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****           * \sa MatrixBase::rows(), MatrixBase::cols(), RowsAtCompileTime, SizeAtCompileTime */
 106:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 107:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 108:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       SizeAtCompileTime = (internal::size_of_xpr_at_compile_time<Derived>::ret),
 109:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****         /**< This is equal to the number of coefficients, i.e. the number of
 110:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****           * rows times the number of columns, or to \a Dynamic if this is not
 111:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****           * known at compile-time. \sa RowsAtCompileTime, ColsAtCompileTime */
 112:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
ARM GAS  /tmp/ccw5fbVv.s 			page 93


 113:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       MaxRowsAtCompileTime = internal::traits<Derived>::MaxRowsAtCompileTime,
 114:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****         /**< This value is equal to the maximum possible number of rows that this expression
 115:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****           * might have. If this expression might have an arbitrarily high number of rows,
 116:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****           * this value is set to \a Dynamic.
 117:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****           *
 118:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****           * This value is useful to know when evaluating an expression, in order to determine
 119:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****           * whether it is possible to avoid doing a dynamic memory allocation.
 120:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****           *
 121:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****           * \sa RowsAtCompileTime, MaxColsAtCompileTime, MaxSizeAtCompileTime
 122:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****           */
 123:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 124:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       MaxColsAtCompileTime = internal::traits<Derived>::MaxColsAtCompileTime,
 125:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****         /**< This value is equal to the maximum possible number of columns that this expression
 126:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****           * might have. If this expression might have an arbitrarily high number of columns,
 127:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****           * this value is set to \a Dynamic.
 128:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****           *
 129:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****           * This value is useful to know when evaluating an expression, in order to determine
 130:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****           * whether it is possible to avoid doing a dynamic memory allocation.
 131:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****           *
 132:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****           * \sa ColsAtCompileTime, MaxRowsAtCompileTime, MaxSizeAtCompileTime
 133:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****           */
 134:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 135:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       MaxSizeAtCompileTime = internal::size_at_compile_time(internal::traits<Derived>::MaxRowsAtCom
 136:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****                                                             internal::traits<Derived>::MaxColsAtCom
 137:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****         /**< This value is equal to the maximum possible number of coefficients that this expressio
 138:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****           * might have. If this expression might have an arbitrarily high number of coefficients,
 139:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****           * this value is set to \a Dynamic.
 140:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****           *
 141:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****           * This value is useful to know when evaluating an expression, in order to determine
 142:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****           * whether it is possible to avoid doing a dynamic memory allocation.
 143:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****           *
 144:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****           * \sa SizeAtCompileTime, MaxRowsAtCompileTime, MaxColsAtCompileTime
 145:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****           */
 146:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 147:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       IsVectorAtCompileTime = internal::traits<Derived>::RowsAtCompileTime == 1
 148:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****                            || internal::traits<Derived>::ColsAtCompileTime == 1,
 149:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****         /**< This is set to true if either the number of rows or the number of
 150:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****           * columns is known at compile-time to be equal to 1. Indeed, in that case,
 151:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****           * we are dealing with a column-vector (if there is only one column) or with
 152:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****           * a row-vector (if there is only one row). */
 153:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 154:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       NumDimensions = int(MaxSizeAtCompileTime) == 1 ? 0 : bool(IsVectorAtCompileTime) ? 1 : 2,
 155:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****         /**< This value is equal to Tensor::NumDimensions, i.e. 0 for scalars, 1 for vectors,
 156:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****          * and 2 for matrices.
 157:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****          */
 158:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 159:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       Flags = internal::traits<Derived>::Flags,
 160:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****         /**< This stores expression \ref flags flags which may or may not be inherited by new expre
 161:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****           * constructed from this one. See the \ref flags "list of flags".
 162:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****           */
 163:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 164:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       IsRowMajor = int(Flags) & RowMajorBit, /**< True if this expression has row-major storage ord
 165:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 166:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       InnerSizeAtCompileTime = int(IsVectorAtCompileTime) ? int(SizeAtCompileTime)
 167:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****                              : int(IsRowMajor) ? int(ColsAtCompileTime) : int(RowsAtCompileTime),
 168:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 169:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       InnerStrideAtCompileTime = internal::inner_stride_at_compile_time<Derived>::ret,
ARM GAS  /tmp/ccw5fbVv.s 			page 94


 170:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       OuterStrideAtCompileTime = internal::outer_stride_at_compile_time<Derived>::ret
 171:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     };
 172:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 173:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     typedef typename internal::find_best_packet<Scalar,SizeAtCompileTime>::type PacketScalar;
 174:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 175:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     enum { IsPlainObjectBase = 0 };
 176:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 177:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     /** The plain matrix type corresponding to this expression.
 178:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       * \sa PlainObject */
 179:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     typedef Matrix<typename internal::traits<Derived>::Scalar,
 180:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****                 internal::traits<Derived>::RowsAtCompileTime,
 181:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****                 internal::traits<Derived>::ColsAtCompileTime,
 182:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****                 AutoAlign | (internal::traits<Derived>::Flags&RowMajorBit ? RowMajor : ColMajor),
 183:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****                 internal::traits<Derived>::MaxRowsAtCompileTime,
 184:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****                 internal::traits<Derived>::MaxColsAtCompileTime
 185:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****           > PlainMatrix;
 186:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 187:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     /** The plain array type corresponding to this expression.
 188:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       * \sa PlainObject */
 189:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     typedef Array<typename internal::traits<Derived>::Scalar,
 190:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****                 internal::traits<Derived>::RowsAtCompileTime,
 191:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****                 internal::traits<Derived>::ColsAtCompileTime,
 192:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****                 AutoAlign | (internal::traits<Derived>::Flags&RowMajorBit ? RowMajor : ColMajor),
 193:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****                 internal::traits<Derived>::MaxRowsAtCompileTime,
 194:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****                 internal::traits<Derived>::MaxColsAtCompileTime
 195:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****           > PlainArray;
 196:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 197:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     /** \brief The plain matrix or array type corresponding to this expression.
 198:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       *
 199:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       * This is not necessarily exactly the return type of eval(). In the case of plain matrices,
 200:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       * the return type of eval() is a const reference to a matrix, not a matrix! It is however gua
 201:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       * that the return type of eval() is either PlainObject or const PlainObject&.
 202:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       */
 203:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     typedef std::conditional_t<internal::is_same<typename internal::traits<Derived>::XprKind,Matrix
 204:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****                                  PlainMatrix, PlainArray> PlainObject;
 205:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 206:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     /** \returns the outer size.
 207:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       *
 208:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       * \note For a vector, this returns just 1. For a matrix (non-vector), this is the major dimen
 209:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       * with respect to the \ref TopicStorageOrders "storage order", i.e., the number of columns fo
 210:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       * column-major matrix, and the number of rows for a row-major matrix. */
 211:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
 212:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     Index outerSize() const
 213:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     {
 214:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       return IsVectorAtCompileTime ? 1
 215:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****            : int(IsRowMajor) ? this->rows() : this->cols();
 216:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     }
 217:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 218:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     /** \returns the inner size.
 219:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       *
 220:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       * \note For a vector, this is just the size. For a matrix (non-vector), this is the minor dim
 221:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       * with respect to the \ref TopicStorageOrders "storage order", i.e., the number of rows for a
 222:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       * column-major matrix, and the number of columns for a row-major matrix. */
 223:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
 224:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     Index innerSize() const
 225:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     {
 226:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       return IsVectorAtCompileTime ? this->size()
ARM GAS  /tmp/ccw5fbVv.s 			page 95


 227:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****            : int(IsRowMajor) ? this->cols() : this->rows();
 228:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     }
 229:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 230:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     /** Only plain matrices/arrays, not expressions, may be resized; therefore the only useful resi
 231:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       * Matrix::resize() and Array::resize(). The present method only asserts that the new size equ
 232:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       * nothing else.
 233:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       */
 234:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC
 235:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     void resize(Index newSize)
 236:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     {
 237:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       EIGEN_ONLY_USED_FOR_DEBUG(newSize);
 238:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       eigen_assert(newSize == this->size()
 239:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****                 && "DenseBase::resize() does not actually allow to resize.");
 240:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     }
 241:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     /** Only plain matrices/arrays, not expressions, may be resized; therefore the only useful resi
 242:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       * Matrix::resize() and Array::resize(). The present method only asserts that the new size equ
 243:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       * nothing else.
 244:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       */
 245:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC
 246:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     void resize(Index rows, Index cols)
 247:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     {
 248:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       EIGEN_ONLY_USED_FOR_DEBUG(rows);
 249:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       EIGEN_ONLY_USED_FOR_DEBUG(cols);
 250:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       eigen_assert(rows == this->rows() && cols == this->cols()
 251:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****                 && "DenseBase::resize() does not actually allow to resize.");
 252:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     }
 253:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 254:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** #ifndef EIGEN_PARSED_BY_DOXYGEN
 255:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     /** \internal Represents a matrix with all coefficients equal to one another*/
 256:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     typedef CwiseNullaryOp<internal::scalar_constant_op<Scalar>,PlainObject> ConstantReturnType;
 257:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     /** \internal \deprecated Represents a vector with linearly spaced coefficients that allows seq
 258:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEPRECATED typedef CwiseNullaryOp<internal::linspaced_op<Scalar>,PlainObject> SequentialL
 259:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     /** \internal Represents a vector with linearly spaced coefficients that allows random access. 
 260:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     typedef CwiseNullaryOp<internal::linspaced_op<Scalar>,PlainObject> RandomAccessLinSpacedReturnT
 261:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     /** \internal Represents a vector with equally spaced coefficients that allows random access. *
 262:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     typedef CwiseNullaryOp<internal::equalspaced_op<Scalar>, PlainObject> RandomAccessEqualSpacedRe
 263:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     /** \internal the return type of MatrixBase::eigenvalues() */
 264:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     typedef Matrix<typename NumTraits<typename internal::traits<Derived>::Scalar>::Real, internal::
 265:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 266:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** #endif // not EIGEN_PARSED_BY_DOXYGEN
 267:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 268:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     /** Copies \a other into *this. \returns a reference to *this. */
 269:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     template<typename OtherDerived>
 270:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 271:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     Derived& operator=(const DenseBase<OtherDerived>& other);
 272:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 273:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     /** Special case of the template operator=, in order to prevent the compiler
 274:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       * from generating a default operator= (issue hit with g++ 4.1)
 275:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       */
 276:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 277:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     Derived& operator=(const DenseBase& other);
 278:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 279:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     template<typename OtherDerived>
 280:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC
 281:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     Derived& operator=(const EigenBase<OtherDerived> &other);
 282:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 283:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     template<typename OtherDerived>
ARM GAS  /tmp/ccw5fbVv.s 			page 96


 284:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC
 285:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     Derived& operator+=(const EigenBase<OtherDerived> &other);
 286:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 287:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     template<typename OtherDerived>
 288:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC
 289:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     Derived& operator-=(const EigenBase<OtherDerived> &other);
 290:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 291:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     template<typename OtherDerived>
 292:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC
 293:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     Derived& operator=(const ReturnByValue<OtherDerived>& func);
 294:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 295:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     /** \internal
 296:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       * Copies \a other into *this without evaluating other. \returns a reference to *this. */
 297:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     template<typename OtherDerived>
 298:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     /** \deprecated */
 299:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEPRECATED EIGEN_DEVICE_FUNC
 300:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     Derived& lazyAssign(const DenseBase<OtherDerived>& other);
 301:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 302:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC
 303:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     CommaInitializer<Derived> operator<< (const Scalar& s);
 304:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 305:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     template<unsigned int Added,unsigned int Removed>
 306:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     /** \deprecated it now returns \c *this */
 307:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEPRECATED
 308:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     const Derived& flagged() const
 309:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     { return derived(); }
 310:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 311:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     template<typename OtherDerived>
 312:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC
 313:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     CommaInitializer<Derived> operator<< (const DenseBase<OtherDerived>& other);
 314:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 315:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     typedef Transpose<Derived> TransposeReturnType;
 316:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC
 317:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     TransposeReturnType transpose();
 318:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     typedef Transpose<const Derived> ConstTransposeReturnType;
 319:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC
 320:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     const ConstTransposeReturnType transpose() const;
 321:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC
 322:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     void transposeInPlace();
 323:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 324:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC static const ConstantReturnType
 325:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     Constant(Index rows, Index cols, const Scalar& value);
 326:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC static const ConstantReturnType
 327:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     Constant(Index size, const Scalar& value);
 328:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC static const ConstantReturnType
 329:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     Constant(const Scalar& value);
 330:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 331:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEPRECATED EIGEN_DEVICE_FUNC static const RandomAccessLinSpacedReturnType
 332:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     LinSpaced(Sequential_t, Index size, const Scalar& low, const Scalar& high);
 333:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEPRECATED EIGEN_DEVICE_FUNC static const RandomAccessLinSpacedReturnType
 334:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     LinSpaced(Sequential_t, const Scalar& low, const Scalar& high);
 335:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 336:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC static const RandomAccessLinSpacedReturnType
 337:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     LinSpaced(Index size, const Scalar& low, const Scalar& high);
 338:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC static const RandomAccessLinSpacedReturnType
 339:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     LinSpaced(const Scalar& low, const Scalar& high);
 340:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
ARM GAS  /tmp/ccw5fbVv.s 			page 97


 341:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC static const RandomAccessEqualSpacedReturnType
 342:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EqualSpaced(Index size, const Scalar& low, const Scalar& step);
 343:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC static const RandomAccessEqualSpacedReturnType
 344:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EqualSpaced(const Scalar& low, const Scalar& step);
 345:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 346:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     template<typename CustomNullaryOp> EIGEN_DEVICE_FUNC
 347:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     static const CwiseNullaryOp<CustomNullaryOp, PlainObject>
 348:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     NullaryExpr(Index rows, Index cols, const CustomNullaryOp& func);
 349:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     template<typename CustomNullaryOp> EIGEN_DEVICE_FUNC
 350:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     static const CwiseNullaryOp<CustomNullaryOp, PlainObject>
 351:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     NullaryExpr(Index size, const CustomNullaryOp& func);
 352:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     template<typename CustomNullaryOp> EIGEN_DEVICE_FUNC
 353:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     static const CwiseNullaryOp<CustomNullaryOp, PlainObject>
 354:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     NullaryExpr(const CustomNullaryOp& func);
 355:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 356:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC static const ConstantReturnType Zero(Index rows, Index cols);
 357:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC static const ConstantReturnType Zero(Index size);
 358:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC static const ConstantReturnType Zero();
 359:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC static const ConstantReturnType Ones(Index rows, Index cols);
 360:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC static const ConstantReturnType Ones(Index size);
 361:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC static const ConstantReturnType Ones();
 362:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 363:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC void fill(const Scalar& value);
 364:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC Derived& setConstant(const Scalar& value);
 365:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC Derived& setLinSpaced(Index size, const Scalar& low, const Scalar& high);
 366:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC Derived& setLinSpaced(const Scalar& low, const Scalar& high);
 367:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC Derived& setEqualSpaced(Index size, const Scalar& low, const Scalar& step);
 368:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC Derived& setEqualSpaced(const Scalar& low, const Scalar& step);
 369:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC Derived& setZero();
 370:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC Derived& setOnes();
 371:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC Derived& setRandom();
 372:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 373:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     template<typename OtherDerived> EIGEN_DEVICE_FUNC
 374:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     bool isApprox(const DenseBase<OtherDerived>& other,
 375:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****                   const RealScalar& prec = NumTraits<Scalar>::dummy_precision()) const;
 376:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC
 377:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     bool isMuchSmallerThan(const RealScalar& other,
 378:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****                            const RealScalar& prec = NumTraits<Scalar>::dummy_precision()) const;
 379:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     template<typename OtherDerived> EIGEN_DEVICE_FUNC
 380:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     bool isMuchSmallerThan(const DenseBase<OtherDerived>& other,
 381:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****                            const RealScalar& prec = NumTraits<Scalar>::dummy_precision()) const;
 382:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 383:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC bool isApproxToConstant(const Scalar& value, const RealScalar& prec = NumTrai
 384:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC bool isConstant(const Scalar& value, const RealScalar& prec = NumTraits<Scala
 385:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC bool isZero(const RealScalar& prec = NumTraits<Scalar>::dummy_precision()) co
 386:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC bool isOnes(const RealScalar& prec = NumTraits<Scalar>::dummy_precision()) co
 387:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 388:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC inline bool hasNaN() const;
 389:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC inline bool allFinite() const;
 390:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 391:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 392:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     Derived& operator*=(const Scalar& other);
 393:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 394:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     Derived& operator/=(const Scalar& other);
 395:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 396:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     typedef internal::add_const_on_value_type_t<typename internal::eval<Derived>::type> EvalReturnT
 397:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     /** \returns the matrix or vector obtained by evaluating this expression.
ARM GAS  /tmp/ccw5fbVv.s 			page 98


 398:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       *
 399:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       * Notice that in the case of a plain matrix or vector (not an expression) this function just 
 400:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       * a const reference, in order to avoid a useless copy.
 401:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       *
 402:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       * \warning Be careful with eval() and the auto C++ keyword, as detailed in this \link TopicPi
 403:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       */
 404:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC
 405:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_STRONG_INLINE EvalReturnType eval() const
 406:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     {
 407:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       // Even though MSVC does not honor strong inlining when the return type
 408:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       // is a dynamic matrix, we desperately need strong inlining for fixed
 409:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       // size types on MSVC.
 410:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       return typename internal::eval<Derived>::type(derived());
 411:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     }
 412:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 413:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     /** swaps *this with the expression \a other.
 414:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       *
 415:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       */
 416:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     template<typename OtherDerived>
 417:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 418:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     void swap(const DenseBase<OtherDerived>& other)
 419:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     {
 420:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       EIGEN_STATIC_ASSERT(!OtherDerived::IsPlainObjectBase,THIS_EXPRESSION_IS_NOT_A_LVALUE__IT_IS_R
 421:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       eigen_assert(rows()==other.rows() && cols()==other.cols());
 422:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       call_assignment(derived(), other.const_cast_derived(), internal::swap_assign_op<Scalar>());
 423:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     }
 424:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 425:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     /** swaps *this with the matrix or array \a other.
 426:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       *
 427:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       */
 428:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     template<typename OtherDerived>
 429:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 430:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     void swap(PlainObjectBase<OtherDerived>& other)
 431:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     {
 432:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       eigen_assert(rows()==other.rows() && cols()==other.cols());
 433:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       call_assignment(derived(), other.derived(), internal::swap_assign_op<Scalar>());
 434:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     }
 435:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 436:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC inline const NestByValue<Derived> nestByValue() const;
 437:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC inline const ForceAlignedAccess<Derived> forceAlignedAccess() const;
 438:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC inline ForceAlignedAccess<Derived> forceAlignedAccess();
 439:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     template<bool Enable> EIGEN_DEVICE_FUNC
 440:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     inline const std::conditional_t<Enable,ForceAlignedAccess<Derived>,Derived&> forceAlignedAccess
 441:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     template<bool Enable> EIGEN_DEVICE_FUNC
 442:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     inline std::conditional_t<Enable,ForceAlignedAccess<Derived>,Derived&> forceAlignedAccessIf();
 443:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 444:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC Scalar sum() const;
 445:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC Scalar mean() const;
 446:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC Scalar trace() const;
 447:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 448:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC Scalar prod() const;
 449:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 450:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     template<int NaNPropagation>
 451:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC typename internal::traits<Derived>::Scalar minCoeff() const;
 452:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     template<int NaNPropagation>
 453:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC typename internal::traits<Derived>::Scalar maxCoeff() const;
 454:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
ARM GAS  /tmp/ccw5fbVv.s 			page 99


 455:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 456:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     // By default, the fastest version with undefined NaN propagation semantics is
 457:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     // used.
 458:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     // TODO(rmlarsen): Replace with default template argument when we move to
 459:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     // c++11 or beyond.
 460:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC inline typename internal::traits<Derived>::Scalar minCoeff() const {
 461:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       return minCoeff<PropagateFast>();
 462:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     }
 463:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC inline typename internal::traits<Derived>::Scalar maxCoeff() const {
 464:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       return maxCoeff<PropagateFast>();
 465:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     }
 466:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 467:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     template<int NaNPropagation, typename IndexType>
 468:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC
 469:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     typename internal::traits<Derived>::Scalar minCoeff(IndexType* row, IndexType* col) const;
 470:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     template<int NaNPropagation, typename IndexType>
 471:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC
 472:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     typename internal::traits<Derived>::Scalar maxCoeff(IndexType* row, IndexType* col) const;
 473:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     template<int NaNPropagation, typename IndexType>
 474:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC
 475:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     typename internal::traits<Derived>::Scalar minCoeff(IndexType* index) const;
 476:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     template<int NaNPropagation, typename IndexType>
 477:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC
 478:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     typename internal::traits<Derived>::Scalar maxCoeff(IndexType* index) const;
 479:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 480:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     // TODO(rmlarsen): Replace these methods with a default template argument.
 481:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     template<typename IndexType>
 482:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC inline
 483:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     typename internal::traits<Derived>::Scalar minCoeff(IndexType* row, IndexType* col) const {
 484:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       return minCoeff<PropagateFast>(row, col);
 485:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     }
 486:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     template<typename IndexType>
 487:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC inline
 488:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     typename internal::traits<Derived>::Scalar maxCoeff(IndexType* row, IndexType* col) const {
 489:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       return maxCoeff<PropagateFast>(row, col);
 490:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     }
 491:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     template<typename IndexType>
 492:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****      EIGEN_DEVICE_FUNC inline
 493:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     typename internal::traits<Derived>::Scalar minCoeff(IndexType* index) const {
 494:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       return minCoeff<PropagateFast>(index);
 495:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     }
 496:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     template<typename IndexType>
 497:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC inline
 498:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     typename internal::traits<Derived>::Scalar maxCoeff(IndexType* index) const {
 499:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       return maxCoeff<PropagateFast>(index);
 500:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     }
 501:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****   
 502:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     template<typename BinaryOp>
 503:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC
 504:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     Scalar redux(const BinaryOp& func) const;
 505:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 506:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     template<typename Visitor>
 507:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC
 508:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     void visit(Visitor& func) const;
 509:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 510:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     /** \returns a WithFormat proxy object allowing to print a matrix the with given
 511:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       * format \a fmt.
ARM GAS  /tmp/ccw5fbVv.s 			page 100


 512:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       *
 513:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       * See class IOFormat for some examples.
 514:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       *
 515:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       * \sa class IOFormat, class WithFormat
 516:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       */
 517:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     inline const WithFormat<Derived> format(const IOFormat& fmt) const
 518:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     {
 519:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       return WithFormat<Derived>(derived(), fmt);
 520:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     }
 521:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 522:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     /** \returns the unique coefficient of a 1x1 expression */
 523:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC
 524:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     CoeffReturnType value() const
 525:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     {
 526:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       EIGEN_STATIC_ASSERT_SIZE_1x1(Derived)
 527:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       eigen_assert(this->rows() == 1 && this->cols() == 1);
 528:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       return derived().coeff(0,0);
 529:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     }
 530:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 531:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC bool all() const;
 532:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC bool any() const;
 533:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC Index count() const;
 534:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 535:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     typedef VectorwiseOp<Derived, Horizontal> RowwiseReturnType;
 536:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     typedef const VectorwiseOp<const Derived, Horizontal> ConstRowwiseReturnType;
 537:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     typedef VectorwiseOp<Derived, Vertical> ColwiseReturnType;
 538:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     typedef const VectorwiseOp<const Derived, Vertical> ConstColwiseReturnType;
 539:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 540:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     /** \returns a VectorwiseOp wrapper of *this for broadcasting and partial reductions
 541:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     *
 542:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     * Example: \include MatrixBase_rowwise.cpp
 543:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     * Output: \verbinclude MatrixBase_rowwise.out
 544:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     *
 545:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     * \sa colwise(), class VectorwiseOp, \ref TutorialReductionsVisitorsBroadcasting
 546:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     */
 547:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     //Code moved here due to a CUDA compiler bug
 548:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC inline ConstRowwiseReturnType rowwise() const {
 549:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       return ConstRowwiseReturnType(derived());
 550:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     }
 551:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC RowwiseReturnType rowwise();
 552:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 553:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     /** \returns a VectorwiseOp wrapper of *this broadcasting and partial reductions
 554:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     *
 555:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     * Example: \include MatrixBase_colwise.cpp
 556:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     * Output: \verbinclude MatrixBase_colwise.out
 557:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     *
 558:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     * \sa rowwise(), class VectorwiseOp, \ref TutorialReductionsVisitorsBroadcasting
 559:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     */
 560:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC inline ConstColwiseReturnType colwise() const {
 561:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       return ConstColwiseReturnType(derived());
 562:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     }
 563:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC ColwiseReturnType colwise();
 564:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 565:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     typedef CwiseNullaryOp<internal::scalar_random_op<Scalar>,PlainObject> RandomReturnType;
 566:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     static const RandomReturnType Random(Index rows, Index cols);
 567:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     static const RandomReturnType Random(Index size);
 568:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     static const RandomReturnType Random();
ARM GAS  /tmp/ccw5fbVv.s 			page 101


 569:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 570:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     template <typename ThenDerived, typename ElseDerived>
 571:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     inline EIGEN_DEVICE_FUNC
 572:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****         CwiseTernaryOp<internal::scalar_boolean_select_op<typename DenseBase<ThenDerived>::Scalar,
 573:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****                            typename DenseBase<ElseDerived>::Scalar, Scalar>,
 574:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****         ThenDerived, ElseDerived, Derived>
 575:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****         select(const DenseBase<ThenDerived>& thenMatrix, const DenseBase<ElseDerived>& elseMatrix) 
 576:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 577:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     template <typename ThenDerived>
 578:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     inline EIGEN_DEVICE_FUNC
 579:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****         CwiseTernaryOp<internal::scalar_boolean_select_op<typename DenseBase<ThenDerived>::Scalar,
 580:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****                            typename DenseBase<ThenDerived>::Scalar, Scalar>,
 581:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****         ThenDerived, typename DenseBase<ThenDerived>::ConstantReturnType, Derived>
 582:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****         select(const DenseBase<ThenDerived>& thenMatrix,
 583:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****                const typename DenseBase<ThenDerived>::Scalar& elseScalar) const;
 584:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 585:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     template <typename ElseDerived>
 586:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     inline EIGEN_DEVICE_FUNC
 587:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****         CwiseTernaryOp<internal::scalar_boolean_select_op<typename DenseBase<ElseDerived>::Scalar,
 588:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****                            typename DenseBase<ElseDerived>::Scalar, Scalar>,
 589:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****         typename DenseBase<ElseDerived>::ConstantReturnType, ElseDerived, Derived>
 590:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****         select(const typename DenseBase<ElseDerived>::Scalar& thenScalar,
 591:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****                const DenseBase<ElseDerived>& elseMatrix) const;
 592:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 593:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     template<int p> RealScalar lpNorm() const;
 594:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 595:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     template<int RowFactor, int ColFactor>
 596:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC
 597:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     const Replicate<Derived,RowFactor,ColFactor> replicate() const;
 598:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     /**
 599:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     * \return an expression of the replication of \c *this
 600:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     *
 601:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     * Example: \include MatrixBase_replicate_int_int.cpp
 602:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     * Output: \verbinclude MatrixBase_replicate_int_int.out
 603:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     *
 604:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     * \sa VectorwiseOp::replicate(), DenseBase::replicate<int,int>(), class Replicate
 605:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     */
 606:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     //Code moved here due to a CUDA compiler bug
 607:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC
 608:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     const Replicate<Derived, Dynamic, Dynamic> replicate(Index rowFactor, Index colFactor) const
 609:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     {
 610:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       return Replicate<Derived, Dynamic, Dynamic>(derived(), rowFactor, colFactor);
 611:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     }
 612:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 613:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     typedef Reverse<Derived, BothDirections> ReverseReturnType;
 614:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     typedef const Reverse<const Derived, BothDirections> ConstReverseReturnType;
 615:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC ReverseReturnType reverse();
 616:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     /** This is the const version of reverse(). */
 617:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     //Code moved here due to a CUDA compiler bug
 618:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC ConstReverseReturnType reverse() const
 619:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     {
 620:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       return ConstReverseReturnType(derived());
 621:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     }
 622:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC void reverseInPlace();
 623:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 624:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     #ifdef EIGEN_PARSED_BY_DOXYGEN
 625:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     /** STL-like <a href="https://en.cppreference.com/w/cpp/named_req/RandomAccessIterator">RandomA
ARM GAS  /tmp/ccw5fbVv.s 			page 102


 626:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       * iterator type as returned by the begin() and end() methods.
 627:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       */
 628:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     typedef random_access_iterator_type iterator;
 629:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     /** This is the const version of iterator (aka read-only) */
 630:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     typedef random_access_iterator_type const_iterator;
 631:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     #else
 632:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     typedef std::conditional_t< (Flags&DirectAccessBit)==DirectAccessBit,
 633:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****                                      internal::pointer_based_stl_iterator<Derived>,
 634:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****                                      internal::generic_randaccess_stl_iterator<Derived>
 635:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****                                    > iterator_type;
 636:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 637:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     typedef std::conditional_t< (Flags&DirectAccessBit)==DirectAccessBit,
 638:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****                                      internal::pointer_based_stl_iterator<const Derived>,
 639:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****                                      internal::generic_randaccess_stl_iterator<const Derived>
 640:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****                                    > const_iterator_type;
 641:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 642:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     // Stl-style iterators are supported only for vectors.
 643:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 644:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     typedef std::conditional_t<IsVectorAtCompileTime, iterator_type, void> iterator;
 645:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 646:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     typedef std::conditional_t<IsVectorAtCompileTime, const_iterator_type, void> const_iterator;
 647:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     #endif
 648:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 649:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     inline iterator begin();
 650:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     inline const_iterator begin() const;
 651:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     inline const_iterator cbegin() const;
 652:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     inline iterator end();
 653:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     inline const_iterator end() const;
 654:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     inline const_iterator cend() const;
 655:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 656:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** #define EIGEN_CURRENT_STORAGE_BASE_CLASS Eigen::DenseBase
 657:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** #define EIGEN_DOC_BLOCK_ADDONS_NOT_INNER_PANEL
 658:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** #define EIGEN_DOC_BLOCK_ADDONS_INNER_PANEL_IF(COND)
 659:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** #define EIGEN_DOC_UNARY_ADDONS(X,Y)
 660:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** #   include "../plugins/CommonCwiseUnaryOps.h"
 661:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** #   include "../plugins/BlockMethods.h"
 662:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** #   include "../plugins/IndexedViewMethods.h"
 663:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** #   include "../plugins/ReshapedMethods.h"
 664:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** #   ifdef EIGEN_DENSEBASE_PLUGIN
 665:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** #     include EIGEN_DENSEBASE_PLUGIN
 666:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** #   endif
 667:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** #undef EIGEN_CURRENT_STORAGE_BASE_CLASS
 668:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** #undef EIGEN_DOC_BLOCK_ADDONS_NOT_INNER_PANEL
 669:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** #undef EIGEN_DOC_BLOCK_ADDONS_INNER_PANEL_IF
 670:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** #undef EIGEN_DOC_UNARY_ADDONS
 671:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 672:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     // disable the use of evalTo for dense objects with a nice compilation error
 673:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     template<typename Dest>
 674:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC
 675:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     inline void evalTo(Dest& ) const
 676:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     {
 677:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****       EIGEN_STATIC_ASSERT((internal::is_same<Dest,void>::value),THE_EVAL_EVALTO_FUNCTION_SHOULD_NEV
 678:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     }
 679:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h **** 
 680:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****   protected:
 681:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEFAULT_COPY_CONSTRUCTOR(DenseBase)
 682:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     /** Default constructor. Do nothing. */
ARM GAS  /tmp/ccw5fbVv.s 			page 103


 683:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseBase.h ****     EIGEN_DEVICE_FUNC constexpr DenseBase() {
 478              		.loc 15 683 33 view .LVU85
 479              		.loc 15 683 33 is_stmt 0 view .LVU86
 480              	.LBE1854:
 481              	.LBE1853:
 482              	.LBB1855:
 483              	.LBI1855:
 117:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE EIGEN_CONSTEXPR
 118:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h ****     T value() { return T(Value); }
 119:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE EIGEN_CONSTEXPR
 120:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h ****     operator T() const { return T(Value); }
 121:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 122:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h ****     void setValue(T v) const { EIGEN_ONLY_USED_FOR_DEBUG(v); eigen_assert(v == T(Value)); }
 123:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** };
 124:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** 
 125:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** template<typename T> class variable_if_dynamic<T, Dynamic>
 126:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h **** {
 127:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h ****     T m_value;
 128:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h ****   public:
 129:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit variable_if_dynamic(T value = 0) EIGEN_NO_THROW 
 484              		.loc 11 129 52 is_stmt 1 view .LVU87
 485              		.loc 11 129 52 is_stmt 0 view .LVU88
 486              	.LBE1855:
 487              	.LBB1856:
 488              	.LBI1856:
 116:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE EIGEN_CONSTEXPR
 489              		.loc 11 116 52 is_stmt 1 view .LVU89
 116:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE EIGEN_CONSTEXPR
 490              		.loc 11 116 52 is_stmt 0 view .LVU90
 491              	.LBE1856:
 163:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****             : m_data(dataPtr),
 164:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****               m_rows(RowsAtCompileTime == Dynamic ? vecSize : Index(RowsAtCompileTime)),
 165:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****               m_cols(ColsAtCompileTime == Dynamic ? vecSize : Index(ColsAtCompileTime))
 166:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     {
 167:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****       EIGEN_STATIC_ASSERT_VECTOR_ONLY(Derived)
 168:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****       eigen_assert(vecSize >= 0);
 492              		.loc 13 168 7 view .LVU91
 493 0010 7E1C     		adds	r6, r7, #1
 494              	.LVL17:
 495              		.loc 13 168 7 view .LVU92
 496 0012 2CD4     		bmi	.L23
 497              	.LVL18:
 498              	.LBB1857:
 499              	.LBI1857:
 169:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****       eigen_assert(dataPtr == 0 || SizeAtCompileTime == Dynamic || SizeAtCompileTime == vecSize);
 170:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****       checkSanity<Derived>();
 171:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     }
 172:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h **** 
 173:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     /** \internal Constructor for dynamically sized matrices */
 174:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     EIGEN_DEVICE_FUNC
 175:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     inline MapBase(PointerType dataPtr, Index rows, Index cols)
 176:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****             : m_data(dataPtr), m_rows(rows), m_cols(cols)
 177:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     {
 178:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****       eigen_assert( (dataPtr == 0)
 179:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****               || (   rows >= 0 && (RowsAtCompileTime == Dynamic || RowsAtCompileTime == rows)
 180:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****                   && cols >= 0 && (ColsAtCompileTime == Dynamic || ColsAtCompileTime == cols)));
 181:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****       checkSanity<Derived>();
ARM GAS  /tmp/ccw5fbVv.s 			page 104


 182:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     }
 183:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h **** 
 184:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     #ifdef EIGEN_MAPBASE_PLUGIN
 185:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     #include EIGEN_MAPBASE_PLUGIN
 186:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     #endif
 187:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h **** 
 188:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****   protected:
 189:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     EIGEN_DEFAULT_COPY_CONSTRUCTOR(MapBase)
 190:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(MapBase)
 191:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h **** 
 192:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     template<typename T>
 193:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     EIGEN_DEVICE_FUNC
 194:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     void checkSanity(std::enable_if_t<(internal::traits<T>::Alignment>0),void*> = 0) const
 195:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     {
 196:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h **** #if EIGEN_MAX_ALIGN_BYTES>0
 197:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****       // innerStride() is not set yet when this function is called, so we optimistically assume the
 198:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****       const Index minInnerStride = InnerStrideAtCompileTime == Dynamic ? 1 : Index(InnerStrideAtCom
 199:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****       EIGEN_ONLY_USED_FOR_DEBUG(minInnerStride);
 200:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****       eigen_assert((   ((std::uintptr_t(m_data) % internal::traits<Derived>::Alignment) == 0)
 201:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****                     || (cols() * rows() * minInnerStride * sizeof(Scalar)) < internal::traits<Deriv
 202:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h **** #endif
 203:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     }
 204:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h **** 
 205:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     template<typename T>
 206:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     EIGEN_DEVICE_FUNC
 207:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     void checkSanity(std::enable_if_t<internal::traits<T>::Alignment==0,void*> = 0) const
 500              		.loc 13 207 10 is_stmt 1 view .LVU93
 501              		.loc 13 207 10 is_stmt 0 view .LVU94
 502              	.LBE1857:
 503              	.LBE1852:
 504              	.LBE1851:
 505              	.LBB1859:
 506              	.LBI1859:
  66:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****       : m_outer(OuterStrideAtCompileTime), m_inner(InnerStrideAtCompileTime)
  67:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****     {
  68:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****       // FIXME: for Eigen 4 we should use DynamicIndex instead of Dynamic.
  69:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****       // FIXME: for Eigen 4 we should also unify this API with fix<>
  70:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****       eigen_assert(InnerStrideAtCompileTime != Dynamic && OuterStrideAtCompileTime != Dynamic);
  71:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****     }
  72:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h **** 
  73:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****     /** Constructor allowing to pass the strides at runtime */
  74:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****     EIGEN_DEVICE_FUNC
  75:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****     Stride(Index outerStride, Index innerStride)
  76:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****       : m_outer(outerStride), m_inner(innerStride)
  77:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****     {
  78:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****     }
  79:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h **** 
  80:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****     /** Copy constructor */
  81:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****     EIGEN_DEVICE_FUNC
  82:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****     Stride(const Stride& other)
 507              		.loc 10 82 5 is_stmt 1 view .LVU95
 508              	.LBB1860:
 509              	.LBI1860:
  83:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****       : m_outer(other.outer()), m_inner(other.inner())
  84:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****     {}
  85:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h **** 
  86:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****     /** \returns the outer stride */
ARM GAS  /tmp/ccw5fbVv.s 			page 105


  87:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****     EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
  88:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****     inline Index outer() const { return m_outer.value(); }
 510              		.loc 10 88 18 view .LVU96
 511              		.loc 10 88 18 is_stmt 0 view .LVU97
 512              	.LBE1860:
 513              	.LBB1861:
 514              	.LBI1861:
 116:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE EIGEN_CONSTEXPR
 515              		.loc 11 116 52 is_stmt 1 view .LVU98
 116:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE EIGEN_CONSTEXPR
 516              		.loc 11 116 52 is_stmt 0 view .LVU99
 517              	.LBE1861:
 518              	.LBB1862:
 519              	.LBI1862:
  89:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****     /** \returns the inner stride */
  90:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****     EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
  91:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****     inline Index inner() const { return m_inner.value(); }
 520              		.loc 10 91 18 is_stmt 1 view .LVU100
 521              		.loc 10 91 18 is_stmt 0 view .LVU101
 522              	.LBE1862:
 523              	.LBB1863:
 524              	.LBI1863:
 116:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE EIGEN_CONSTEXPR
 525              		.loc 11 116 52 is_stmt 1 view .LVU102
 116:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE EIGEN_CONSTEXPR
 526              		.loc 11 116 52 is_stmt 0 view .LVU103
 527              	.LBE1863:
 528              	.LBE1859:
 529              	.LBE1849:
  38:ImpulseResponse/ImpulseResponse.cpp ****   
  39:ImpulseResponse/ImpulseResponse.cpp ****   _AdvanceHistoryIndex(1); // KAB MOD - for Daisy implementation numFrames is always 1
 530              		.loc 1 39 3 is_stmt 1 view .LVU104
 531              		.loc 1 39 23 is_stmt 0 view .LVU105
 532 0014 0121     		movs	r1, #1
 533 0016 2046     		mov	r0, r4
 534 0018 FFF7FEFF 		bl	_ZN7History20_AdvanceHistoryIndexEj
 535              	.LVL19:
  40:ImpulseResponse/ImpulseResponse.cpp **** 
  41:ImpulseResponse/ImpulseResponse.cpp ****   return (float)mWeight.dot(input);
 536              		.loc 1 41 3 is_stmt 1 view .LVU106
 537              	.LBB1865:
 538              	.LBI1865:
 539              		.file 16 "../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h"
   1:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h **** // This file is part of Eigen, a lightweight C++ template library
   2:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h **** // for linear algebra.
   3:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h **** //
   4:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h **** // Copyright (C) 2006-2008, 2010 Benoit Jacob <jacob.benoit.1@gmail.com>
   5:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h **** //
   6:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h **** // This Source Code Form is subject to the terms of the Mozilla
   7:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h **** // Public License v. 2.0. If a copy of the MPL was not distributed
   8:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h **** // with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
   9:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h **** 
  10:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h **** #ifndef EIGEN_DOT_H
  11:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h **** #define EIGEN_DOT_H
  12:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h **** 
  13:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h **** #include "./InternalHeaderCheck.h"
  14:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h **** 
ARM GAS  /tmp/ccw5fbVv.s 			page 106


  15:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h **** namespace Eigen { 
  16:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h **** 
  17:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h **** namespace internal {
  18:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h **** 
  19:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h **** // helper function for dot(). The problem is that if we put that in the body of dot(), then upon ca
  20:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h **** // with mismatched types, the compiler emits errors about failing to instantiate cwiseProduct BEFOR
  21:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h **** // looking at the static assertions. Thus this is a trick to get better compile errors.
  22:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h **** template<typename T, typename U,
  23:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h ****          bool NeedToTranspose = T::IsVectorAtCompileTime && U::IsVectorAtCompileTime &&
  24:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h ****                 ((int(T::RowsAtCompileTime) == 1 && int(U::ColsAtCompileTime) == 1) ||
  25:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h ****                  (int(T::ColsAtCompileTime) == 1 && int(U::RowsAtCompileTime) == 1))>
  26:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h **** struct dot_nocheck
  27:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h **** {
  28:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h ****   typedef scalar_conj_product_op<typename traits<T>::Scalar,typename traits<U>::Scalar> conj_prod;
  29:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h ****   typedef typename conj_prod::result_type ResScalar;
  30:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h ****   EIGEN_DEVICE_FUNC
  31:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h ****   EIGEN_STRONG_INLINE
  32:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h ****   static ResScalar run(const MatrixBase<T>& a, const MatrixBase<U>& b)
  33:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h ****   {
  34:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h ****     return a.template binaryExpr<conj_prod>(b).sum();
  35:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h ****   }
  36:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h **** };
  37:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h **** 
  38:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h **** template<typename T, typename U>
  39:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h **** struct dot_nocheck<T, U, true>
  40:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h **** {
  41:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h ****   typedef scalar_conj_product_op<typename traits<T>::Scalar,typename traits<U>::Scalar> conj_prod;
  42:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h ****   typedef typename conj_prod::result_type ResScalar;
  43:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h ****   EIGEN_DEVICE_FUNC
  44:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h ****   EIGEN_STRONG_INLINE
  45:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h ****   static ResScalar run(const MatrixBase<T>& a, const MatrixBase<U>& b)
  46:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h ****   {
  47:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h ****     return a.transpose().template binaryExpr<conj_prod>(b).sum();
  48:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h ****   }
  49:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h **** };
  50:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h **** 
  51:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h **** } // end namespace internal
  52:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h **** 
  53:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h **** /** \fn MatrixBase::dot
  54:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h ****   * \returns the dot product of *this with other.
  55:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h ****   *
  56:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h ****   * \only_for_vectors
  57:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h ****   *
  58:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h ****   * \note If the scalar type is complex numbers, then this function returns the hermitian
  59:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h ****   * (sesquilinear) dot product, conjugate-linear in the first variable and linear in the
  60:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h ****   * second variable.
  61:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h ****   *
  62:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h ****   * \sa squaredNorm(), norm()
  63:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h ****   */
  64:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h **** template<typename Derived>
  65:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h **** template<typename OtherDerived>
  66:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h **** EIGEN_DEVICE_FUNC
  67:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h **** EIGEN_STRONG_INLINE
  68:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h **** typename ScalarBinaryOpTraits<typename internal::traits<Derived>::Scalar,typename internal::traits<
  69:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h **** MatrixBase<Derived>::dot(const MatrixBase<OtherDerived>& other) const
 540              		.loc 16 69 1 view .LVU107
 541              	.LBB1866:
ARM GAS  /tmp/ccw5fbVv.s 			page 107


 542              	.LBB1867:
 543              	.LBI1867:
 544              		.file 17 "../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h"
   1:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h **** // This file is part of Eigen, a lightweight C++ template library
   2:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h **** // for linear algebra.
   3:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h **** //
   4:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h **** // Copyright (C) 2009 Benoit Jacob <jacob.benoit.1@gmail.com>
   5:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h **** // Copyright (C) 2009 Gael Guennebaud <gael.guennebaud@inria.fr>
   6:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h **** //
   7:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h **** // This Source Code Form is subject to the terms of the Mozilla
   8:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h **** // Public License v. 2.0. If a copy of the MPL was not distributed
   9:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h **** // with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
  10:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h **** 
  11:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h **** #ifndef EIGEN_EIGENBASE_H
  12:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h **** #define EIGEN_EIGENBASE_H
  13:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h **** 
  14:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h **** #include "./InternalHeaderCheck.h"
  15:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h **** 
  16:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h **** namespace Eigen {
  17:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h **** 
  18:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h **** /** \class EigenBase
  19:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h ****   * \ingroup Core_Module
  20:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h ****   *
  21:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h ****   * Common base class for all classes T such that MatrixBase has an operator=(T) and a constructor 
  22:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h ****   *
  23:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h ****   * In other words, an EigenBase object is an object that can be copied into a MatrixBase.
  24:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h ****   *
  25:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h ****   * Besides MatrixBase-derived classes, this also includes special matrix classes such as diagonal 
  26:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h ****   *
  27:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h ****   * Notice that this class is trivial, it is only used to disambiguate overloaded functions.
  28:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h ****   *
  29:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h ****   * \sa \blank \ref TopicClassHierarchy
  30:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h ****   */
  31:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h **** template<typename Derived> struct EigenBase
  32:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h **** {
  33:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h **** //   typedef typename internal::plain_matrix_type<Derived>::type PlainObject;
  34:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h **** 
  35:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h ****   /** \brief The interface type of indices
  36:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h ****     * \details To change this, \c \#define the preprocessor symbol \c EIGEN_DEFAULT_DENSE_INDEX_TYP
  37:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h ****     * \sa StorageIndex, \ref TopicPreprocessorDirectives.
  38:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h ****     * DEPRECATED: Since Eigen 3.3, its usage is deprecated. Use Eigen::Index instead.
  39:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h ****     * Deprecation is not marked with a doxygen comment because there are too many existing usages t
  40:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h ****     */
  41:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h ****   typedef Eigen::Index Index;
  42:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h **** 
  43:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h ****   // FIXME is it needed?
  44:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h ****   typedef typename internal::traits<Derived>::StorageKind StorageKind;
  45:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h **** 
  46:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h ****   /** \returns a reference to the derived object */
  47:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h ****   EIGEN_DEVICE_FUNC
  48:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h ****   Derived& derived() { return *static_cast<Derived*>(this); }
  49:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h ****   /** \returns a const reference to the derived object */
  50:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h ****   EIGEN_DEVICE_FUNC
  51:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h ****   const Derived& derived() const { return *static_cast<const Derived*>(this); }
  52:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h **** 
  53:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h ****   EIGEN_DEVICE_FUNC
  54:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h ****   inline Derived& const_cast_derived() const
ARM GAS  /tmp/ccw5fbVv.s 			page 108


  55:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h ****   { return *static_cast<Derived*>(const_cast<EigenBase*>(this)); }
  56:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h ****   EIGEN_DEVICE_FUNC
  57:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h ****   inline const Derived& const_derived() const
  58:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h ****   { return *static_cast<const Derived*>(this); }
  59:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h **** 
  60:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h ****   /** \returns the number of rows. \sa cols(), RowsAtCompileTime */
  61:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h ****   EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
  62:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h ****   inline Index rows() const EIGEN_NOEXCEPT { return derived().rows(); }
  63:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h ****   /** \returns the number of columns. \sa rows(), ColsAtCompileTime*/
  64:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h ****   EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
  65:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h ****   inline Index cols() const EIGEN_NOEXCEPT { return derived().cols(); }
  66:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h ****   /** \returns the number of coefficients, which is rows()*cols().
  67:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h ****     * \sa rows(), cols(), SizeAtCompileTime. */
  68:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h ****   EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR
  69:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h ****   inline Index size() const EIGEN_NOEXCEPT { return rows() * cols(); }
 545              		.loc 17 69 16 view .LVU108
 546              	.LBB1868:
 547              	.LBI1868:
  62:../../RTNeural/modules/Eigen/Eigen/src/Core/EigenBase.h ****   /** \returns the number of columns. \sa rows(), ColsAtCompileTime*/
 548              		.loc 17 62 16 view .LVU109
 549              	.LBB1869:
 550              	.LBI1869:
  96:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** #endif
  97:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** {
  98:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****   public:
  99:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     enum { Options = internal::traits<Derived>::Options };
 100:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     typedef typename internal::dense_xpr_base<Derived>::type Base;
 101:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** 
 102:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     typedef typename internal::traits<Derived>::StorageKind StorageKind;
 103:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     typedef typename internal::traits<Derived>::Scalar Scalar;
 104:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** 
 105:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     typedef typename internal::packet_traits<Scalar>::type PacketScalar;
 106:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     typedef typename NumTraits<Scalar>::Real RealScalar;
 107:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     typedef Derived DenseType;
 108:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** 
 109:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     using Base::RowsAtCompileTime;
 110:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     using Base::ColsAtCompileTime;
 111:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     using Base::SizeAtCompileTime;
 112:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     using Base::MaxRowsAtCompileTime;
 113:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     using Base::MaxColsAtCompileTime;
 114:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     using Base::MaxSizeAtCompileTime;
 115:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     using Base::IsVectorAtCompileTime;
 116:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     using Base::Flags;
 117:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** 
 118:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     typedef Eigen::Map<Derived, Unaligned>  MapType;
 119:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     typedef const Eigen::Map<const Derived, Unaligned> ConstMapType;
 120:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     typedef Eigen::Map<Derived, AlignedMax> AlignedMapType;
 121:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     typedef const Eigen::Map<const Derived, AlignedMax> ConstAlignedMapType;
 122:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     template<typename StrideType> struct StridedMapType { typedef Eigen::Map<Derived, Unaligned, St
 123:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     template<typename StrideType> struct StridedConstMapType { typedef Eigen::Map<const Derived, Un
 124:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     template<typename StrideType> struct StridedAlignedMapType { typedef Eigen::Map<Derived, Aligne
 125:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     template<typename StrideType> struct StridedConstAlignedMapType { typedef Eigen::Map<const Deri
 126:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** 
 127:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****   protected:
 128:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     DenseStorage<Scalar, Base::MaxSizeAtCompileTime, Base::RowsAtCompileTime, Base::ColsAtCompileTi
 129:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** 
 130:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****   public:
ARM GAS  /tmp/ccw5fbVv.s 			page 109


 131:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     enum { NeedsToAlign = (SizeAtCompileTime != Dynamic) && (internal::traits<Derived>::Alignment>0
 132:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     EIGEN_MAKE_ALIGNED_OPERATOR_NEW_IF(NeedsToAlign)
 133:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** 
 134:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     EIGEN_STATIC_ASSERT(internal::check_implication(MaxRowsAtCompileTime==1 && MaxColsAtCompileTime
 135:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     EIGEN_STATIC_ASSERT(internal::check_implication(MaxColsAtCompileTime==1 && MaxRowsAtCompileTime
 136:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     EIGEN_STATIC_ASSERT((RowsAtCompileTime == Dynamic) || (RowsAtCompileTime >= 0), INVALID_MATRIX_
 137:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     EIGEN_STATIC_ASSERT((ColsAtCompileTime == Dynamic) || (ColsAtCompileTime >= 0), INVALID_MATRIX_
 138:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     EIGEN_STATIC_ASSERT((MaxRowsAtCompileTime == Dynamic) || (MaxRowsAtCompileTime >= 0), INVALID_M
 139:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     EIGEN_STATIC_ASSERT((MaxColsAtCompileTime == Dynamic) || (MaxColsAtCompileTime >= 0), INVALID_M
 140:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     EIGEN_STATIC_ASSERT((MaxRowsAtCompileTime == RowsAtCompileTime || RowsAtCompileTime==Dynamic), 
 141:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     EIGEN_STATIC_ASSERT((MaxColsAtCompileTime == ColsAtCompileTime || ColsAtCompileTime==Dynamic), 
 142:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     EIGEN_STATIC_ASSERT(((Options & (DontAlign|RowMajor)) == Options), INVALID_MATRIX_TEMPLATE_PARA
 143:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** 
 144:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC
 145:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     Base& base() { return *static_cast<Base*>(this); }
 146:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC
 147:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     const Base& base() const { return *static_cast<const Base*>(this); }
 148:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** 
 149:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE EIGEN_CONSTEXPR
 150:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     Index rows() const EIGEN_NOEXCEPT { return m_storage.rows(); }
 551              		.loc 7 150 11 view .LVU110
 552              	.LBB1870:
 553              	.LBI1870:
 658:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC void swap(DenseStorage& other) {
 659:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       numext::swap(m_data,other.m_data);
 660:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       numext::swap(m_rows,other.m_rows);
 661:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     }
 662:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC Index rows(void) const EIGEN_NOEXCEPT {return m_rows;}
 554              		.loc 5 662 29 view .LVU111
 555              		.loc 5 662 29 is_stmt 0 view .LVU112
 556              	.LBE1870:
 557              	.LBE1869:
 558              	.LBE1868:
 559              	.LBE1867:
  70:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h **** {
  71:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h ****   EIGEN_STATIC_ASSERT_VECTOR_ONLY(Derived)
  72:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h ****   EIGEN_STATIC_ASSERT_VECTOR_ONLY(OtherDerived)
  73:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h ****   EIGEN_STATIC_ASSERT_SAME_VECTOR_SIZE(Derived,OtherDerived)
  74:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h **** #if !(defined(EIGEN_NO_STATIC_ASSERT) && defined(EIGEN_NO_DEBUG))
  75:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h ****   typedef internal::scalar_conj_product_op<Scalar,typename OtherDerived::Scalar> func;
  76:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h ****   EIGEN_CHECK_BINARY_COMPATIBILIY(func,Scalar,typename OtherDerived::Scalar);
  77:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h **** #endif
  78:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h ****   
  79:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h ****   eigen_assert(size() == other.size());
 560              		.loc 16 79 3 view .LVU113
 561 001c 236B     		ldr	r3, [r4, #48]
 562 001e 9E42     		cmp	r6, r3
 563 0020 1FD1     		bne	.L24
 564              	.LVL20:
 565              	.LBB1871:
 566              	.LBI1871:
  32:../../RTNeural/modules/Eigen/Eigen/src/Core/Dot.h ****   {
 567              		.loc 16 32 20 is_stmt 1 view .LVU114
 568              	.LBB1872:
 569              	.LBI1872:
 570              		.file 18 "../../RTNeural/modules/Eigen/Eigen/src/Core/../plugins/CommonCwiseBinaryOps.h"
   1:../../RTNeural/modules/Eigen/Eigen/src/Core/../plugins/CommonCwiseBinaryOps.h **** // This file is part of Eigen, a lightweight C++ template library
ARM GAS  /tmp/ccw5fbVv.s 			page 110


   2:../../RTNeural/modules/Eigen/Eigen/src/Core/../plugins/CommonCwiseBinaryOps.h **** // for linear algebra.
   3:../../RTNeural/modules/Eigen/Eigen/src/Core/../plugins/CommonCwiseBinaryOps.h **** //
   4:../../RTNeural/modules/Eigen/Eigen/src/Core/../plugins/CommonCwiseBinaryOps.h **** // Copyright (C) 2008-2016 Gael Guennebaud <gael.guennebaud@inria.fr>
   5:../../RTNeural/modules/Eigen/Eigen/src/Core/../plugins/CommonCwiseBinaryOps.h **** // Copyright (C) 2006-2008 Benoit Jacob <jacob.benoit.1@gmail.com>
   6:../../RTNeural/modules/Eigen/Eigen/src/Core/../plugins/CommonCwiseBinaryOps.h **** //
   7:../../RTNeural/modules/Eigen/Eigen/src/Core/../plugins/CommonCwiseBinaryOps.h **** // This Source Code Form is subject to the terms of the Mozilla
   8:../../RTNeural/modules/Eigen/Eigen/src/Core/../plugins/CommonCwiseBinaryOps.h **** // Public License v. 2.0. If a copy of the MPL was not distributed
   9:../../RTNeural/modules/Eigen/Eigen/src/Core/../plugins/CommonCwiseBinaryOps.h **** // with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
  10:../../RTNeural/modules/Eigen/Eigen/src/Core/../plugins/CommonCwiseBinaryOps.h **** 
  11:../../RTNeural/modules/Eigen/Eigen/src/Core/../plugins/CommonCwiseBinaryOps.h **** // This file is a base class plugin containing common coefficient wise functions.
  12:../../RTNeural/modules/Eigen/Eigen/src/Core/../plugins/CommonCwiseBinaryOps.h **** 
  13:../../RTNeural/modules/Eigen/Eigen/src/Core/../plugins/CommonCwiseBinaryOps.h **** /** \returns an expression of the difference of \c *this and \a other
  14:../../RTNeural/modules/Eigen/Eigen/src/Core/../plugins/CommonCwiseBinaryOps.h ****   *
  15:../../RTNeural/modules/Eigen/Eigen/src/Core/../plugins/CommonCwiseBinaryOps.h ****   * \note If you want to subtract a given scalar from all coefficients, see Cwise::operator-().
  16:../../RTNeural/modules/Eigen/Eigen/src/Core/../plugins/CommonCwiseBinaryOps.h ****   *
  17:../../RTNeural/modules/Eigen/Eigen/src/Core/../plugins/CommonCwiseBinaryOps.h ****   * \sa class CwiseBinaryOp, operator-=()
  18:../../RTNeural/modules/Eigen/Eigen/src/Core/../plugins/CommonCwiseBinaryOps.h ****   */
  19:../../RTNeural/modules/Eigen/Eigen/src/Core/../plugins/CommonCwiseBinaryOps.h **** EIGEN_MAKE_CWISE_BINARY_OP(operator-,difference)
  20:../../RTNeural/modules/Eigen/Eigen/src/Core/../plugins/CommonCwiseBinaryOps.h **** 
  21:../../RTNeural/modules/Eigen/Eigen/src/Core/../plugins/CommonCwiseBinaryOps.h **** /** \returns an expression of the sum of \c *this and \a other
  22:../../RTNeural/modules/Eigen/Eigen/src/Core/../plugins/CommonCwiseBinaryOps.h ****   *
  23:../../RTNeural/modules/Eigen/Eigen/src/Core/../plugins/CommonCwiseBinaryOps.h ****   * \note If you want to add a given scalar to all coefficients, see Cwise::operator+().
  24:../../RTNeural/modules/Eigen/Eigen/src/Core/../plugins/CommonCwiseBinaryOps.h ****   *
  25:../../RTNeural/modules/Eigen/Eigen/src/Core/../plugins/CommonCwiseBinaryOps.h ****   * \sa class CwiseBinaryOp, operator+=()
  26:../../RTNeural/modules/Eigen/Eigen/src/Core/../plugins/CommonCwiseBinaryOps.h ****   */
  27:../../RTNeural/modules/Eigen/Eigen/src/Core/../plugins/CommonCwiseBinaryOps.h **** EIGEN_MAKE_CWISE_BINARY_OP(operator+,sum)
  28:../../RTNeural/modules/Eigen/Eigen/src/Core/../plugins/CommonCwiseBinaryOps.h **** 
  29:../../RTNeural/modules/Eigen/Eigen/src/Core/../plugins/CommonCwiseBinaryOps.h **** /** \returns an expression of a custom coefficient-wise operator \a func of *this and \a other
  30:../../RTNeural/modules/Eigen/Eigen/src/Core/../plugins/CommonCwiseBinaryOps.h ****   *
  31:../../RTNeural/modules/Eigen/Eigen/src/Core/../plugins/CommonCwiseBinaryOps.h ****   * The template parameter \a CustomBinaryOp is the type of the functor
  32:../../RTNeural/modules/Eigen/Eigen/src/Core/../plugins/CommonCwiseBinaryOps.h ****   * of the custom operator (see class CwiseBinaryOp for an example)
  33:../../RTNeural/modules/Eigen/Eigen/src/Core/../plugins/CommonCwiseBinaryOps.h ****   *
  34:../../RTNeural/modules/Eigen/Eigen/src/Core/../plugins/CommonCwiseBinaryOps.h ****   * Here is an example illustrating the use of custom functors:
  35:../../RTNeural/modules/Eigen/Eigen/src/Core/../plugins/CommonCwiseBinaryOps.h ****   * \include class_CwiseBinaryOp.cpp
  36:../../RTNeural/modules/Eigen/Eigen/src/Core/../plugins/CommonCwiseBinaryOps.h ****   * Output: \verbinclude class_CwiseBinaryOp.out
  37:../../RTNeural/modules/Eigen/Eigen/src/Core/../plugins/CommonCwiseBinaryOps.h ****   *
  38:../../RTNeural/modules/Eigen/Eigen/src/Core/../plugins/CommonCwiseBinaryOps.h ****   * \sa class CwiseBinaryOp, operator+(), operator-(), cwiseProduct()
  39:../../RTNeural/modules/Eigen/Eigen/src/Core/../plugins/CommonCwiseBinaryOps.h ****   */
  40:../../RTNeural/modules/Eigen/Eigen/src/Core/../plugins/CommonCwiseBinaryOps.h **** template<typename CustomBinaryOp, typename OtherDerived>
  41:../../RTNeural/modules/Eigen/Eigen/src/Core/../plugins/CommonCwiseBinaryOps.h **** EIGEN_DEVICE_FUNC
  42:../../RTNeural/modules/Eigen/Eigen/src/Core/../plugins/CommonCwiseBinaryOps.h **** EIGEN_STRONG_INLINE const CwiseBinaryOp<CustomBinaryOp, const Derived, const OtherDerived>
  43:../../RTNeural/modules/Eigen/Eigen/src/Core/../plugins/CommonCwiseBinaryOps.h **** binaryExpr(const EIGEN_CURRENT_STORAGE_BASE_CLASS<OtherDerived> &other, const CustomBinaryOp& func 
 571              		.loc 18 43 1 view .LVU115
 572              	.LBB1873:
 573              	.LBI1873:
 574              		.file 19 "../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h"
   1:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h **** // This file is part of Eigen, a lightweight C++ template library
   2:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h **** // for linear algebra.
   3:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h **** //
   4:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h **** // Copyright (C) 2008-2014 Gael Guennebaud <gael.guennebaud@inria.fr>
   5:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h **** // Copyright (C) 2006-2008 Benoit Jacob <jacob.benoit.1@gmail.com>
   6:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h **** //
   7:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h **** // This Source Code Form is subject to the terms of the Mozilla
   8:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h **** // Public License v. 2.0. If a copy of the MPL was not distributed
   9:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h **** // with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
  10:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h **** 
  11:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h **** #ifndef EIGEN_CWISE_BINARY_OP_H
ARM GAS  /tmp/ccw5fbVv.s 			page 111


  12:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h **** #define EIGEN_CWISE_BINARY_OP_H
  13:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h **** 
  14:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h **** #include "./InternalHeaderCheck.h"
  15:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h **** 
  16:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h **** namespace Eigen {
  17:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h **** 
  18:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h **** namespace internal {
  19:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h **** template<typename BinaryOp, typename Lhs, typename Rhs>
  20:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h **** struct traits<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
  21:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h **** {
  22:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****   // we must not inherit from traits<Lhs> since it has
  23:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****   // the potential to cause problems with MSVC
  24:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****   typedef remove_all_t<Lhs> Ancestor;
  25:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****   typedef typename traits<Ancestor>::XprKind XprKind;
  26:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****   enum {
  27:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****     RowsAtCompileTime = traits<Ancestor>::RowsAtCompileTime,
  28:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****     ColsAtCompileTime = traits<Ancestor>::ColsAtCompileTime,
  29:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****     MaxRowsAtCompileTime = traits<Ancestor>::MaxRowsAtCompileTime,
  30:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****     MaxColsAtCompileTime = traits<Ancestor>::MaxColsAtCompileTime
  31:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****   };
  32:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h **** 
  33:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****   // even though we require Lhs and Rhs to have the same scalar type (see CwiseBinaryOp constructor
  34:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****   // we still want to handle the case when the result type is different.
  35:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****   typedef typename result_of<
  36:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****                      BinaryOp(
  37:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****                        const typename Lhs::Scalar&,
  38:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****                        const typename Rhs::Scalar&
  39:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****                      )
  40:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****                    >::type Scalar;
  41:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****   typedef typename cwise_promote_storage_type<typename traits<Lhs>::StorageKind,
  42:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****                                               typename traits<Rhs>::StorageKind,
  43:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****                                               BinaryOp>::ret StorageKind;
  44:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****   typedef typename promote_index_type<typename traits<Lhs>::StorageIndex,
  45:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****                                       typename traits<Rhs>::StorageIndex>::type StorageIndex;
  46:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****   typedef typename Lhs::Nested LhsNested;
  47:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****   typedef typename Rhs::Nested RhsNested;
  48:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****   typedef std::remove_reference_t<LhsNested> LhsNested_;
  49:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****   typedef std::remove_reference_t<RhsNested> RhsNested_;
  50:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****   enum {
  51:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****     Flags = cwise_promote_storage_order<typename traits<Lhs>::StorageKind,typename traits<Rhs>::Sto
  52:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****   };
  53:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h **** };
  54:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h **** } // end namespace internal
  55:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h **** 
  56:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h **** template<typename BinaryOp, typename Lhs, typename Rhs, typename StorageKind>
  57:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h **** class CwiseBinaryOpImpl;
  58:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h **** 
  59:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h **** /** \class CwiseBinaryOp
  60:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****   * \ingroup Core_Module
  61:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****   *
  62:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****   * \brief Generic expression where a coefficient-wise binary operator is applied to two expression
  63:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****   *
  64:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****   * \tparam BinaryOp template functor implementing the operator
  65:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****   * \tparam LhsType the type of the left-hand side
  66:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****   * \tparam RhsType the type of the right-hand side
  67:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****   *
  68:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****   * This class represents an expression  where a coefficient-wise binary operator is applied to two
ARM GAS  /tmp/ccw5fbVv.s 			page 112


  69:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****   * It is the return type of binary operators, by which we mean only those binary operators where
  70:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****   * both the left-hand side and the right-hand side are Eigen expressions.
  71:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****   * For example, the return type of matrix1+matrix2 is a CwiseBinaryOp.
  72:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****   *
  73:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****   * Most of the time, this is the only way that it is used, so you typically don't have to name
  74:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****   * CwiseBinaryOp types explicitly.
  75:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****   *
  76:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****   * \sa MatrixBase::binaryExpr(const MatrixBase<OtherDerived> &,const CustomBinaryOp &) const, clas
  77:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****   */
  78:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h **** template<typename BinaryOp, typename LhsType, typename RhsType>
  79:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h **** class CwiseBinaryOp :
  80:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****   public CwiseBinaryOpImpl<
  81:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****           BinaryOp, LhsType, RhsType,
  82:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****           typename internal::cwise_promote_storage_type<typename internal::traits<LhsType>::Storage
  83:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****                                                         typename internal::traits<RhsType>::Storage
  84:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****                                                         BinaryOp>::ret>,
  85:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****   internal::no_assignment_operator
  86:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h **** {
  87:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****   public:
  88:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h **** 
  89:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****     typedef internal::remove_all_t<BinaryOp> Functor;
  90:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****     typedef internal::remove_all_t<LhsType> Lhs;
  91:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****     typedef internal::remove_all_t<RhsType> Rhs;
  92:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h **** 
  93:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****     typedef typename CwiseBinaryOpImpl<
  94:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****         BinaryOp, LhsType, RhsType,
  95:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****         typename internal::cwise_promote_storage_type<typename internal::traits<LhsType>::StorageKi
  96:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****                                                       typename internal::traits<Rhs>::StorageKind,
  97:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****                                                       BinaryOp>::ret>::Base Base;
  98:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****     EIGEN_GENERIC_PUBLIC_INTERFACE(CwiseBinaryOp)
  99:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h **** 
 100:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****     EIGEN_CHECK_BINARY_COMPATIBILIY(BinaryOp,typename Lhs::Scalar,typename Rhs::Scalar)
 101:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****     EIGEN_STATIC_ASSERT_SAME_MATRIX_SIZE(Lhs, Rhs)
 102:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h **** 
 103:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****     typedef typename internal::ref_selector<LhsType>::type LhsNested;
 104:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****     typedef typename internal::ref_selector<RhsType>::type RhsNested;
 105:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****     typedef std::remove_reference_t<LhsNested> LhsNested_;
 106:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****     typedef std::remove_reference_t<RhsNested> RhsNested_;
 107:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h **** 
 108:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h **** #if EIGEN_COMP_MSVC
 109:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****     //Required for Visual Studio or the Copy constructor will probably not get inlined!
 110:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****     EIGEN_STRONG_INLINE
 111:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****     CwiseBinaryOp(const CwiseBinaryOp<BinaryOp,LhsType,RhsType>&) = default;
 112:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h **** #endif
 113:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h **** 
 114:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 115:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****     CwiseBinaryOp(const Lhs& aLhs, const Rhs& aRhs, const BinaryOp& func = BinaryOp())
 575              		.loc 19 115 5 view .LVU116
 576              	.LBB1874:
 577              	.LBB1875:
 578              	.LBI1875:
 116:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****       : m_lhs(aLhs), m_rhs(aRhs), m_functor(func)
 117:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****     {
 118:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****       eigen_assert(aLhs.rows() == aRhs.rows() && aLhs.cols() == aRhs.cols());
 119:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****     }
 120:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h **** 
 121:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE EIGEN_CONSTEXPR
ARM GAS  /tmp/ccw5fbVv.s 			page 113


 122:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****     Index rows() const EIGEN_NOEXCEPT {
 123:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****       // return the fixed size type if available to enable compile time optimizations
 124:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****       return internal::traits<internal::remove_all_t<LhsNested>>::RowsAtCompileTime==Dynamic ? m_rh
 125:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****     }
 126:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE EIGEN_CONSTEXPR
 127:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****     Index cols() const EIGEN_NOEXCEPT {
 128:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****       // return the fixed size type if available to enable compile time optimizations
 129:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****       return internal::traits<internal::remove_all_t<LhsNested>>::ColsAtCompileTime==Dynamic ? m_rh
 130:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****     }
 131:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h **** 
 132:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****     /** \returns the left hand side nested expression */
 133:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 134:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****     const LhsNested_& lhs() const { return m_lhs; }
 135:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****     /** \returns the right hand side nested expression */
 136:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 137:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****     const RhsNested_& rhs() const { return m_rhs; }
 138:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****     /** \returns the functor representing the binary operation */
 139:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 140:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****     const BinaryOp& functor() const { return m_functor; }
 141:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h **** 
 142:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****   protected:
 143:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****     LhsNested m_lhs;
 144:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****     RhsNested m_rhs;
 145:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****     const BinaryOp m_functor;
 146:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h **** };
 147:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h **** 
 148:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h **** // Generic API dispatcher
 149:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h **** template<typename BinaryOp, typename Lhs, typename Rhs, typename StorageKind>
 150:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h **** class CwiseBinaryOpImpl
 579              		.loc 19 150 7 view .LVU117
 580              	.LBB1876:
 581              	.LBI1876:
 582              		.loc 14 489 5 view .LVU118
 583              	.LBB1877:
 584              	.LBI1877:
 585              		.loc 15 683 33 view .LVU119
 586              		.loc 15 683 33 is_stmt 0 view .LVU120
 587              	.LBE1877:
 588              	.LBE1876:
 589              	.LBE1875:
 590              	.LBB1878:
 591              	.LBI1878:
 144:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****       : Base(cast_to_pointer_type(dataPtr), size), m_stride(stride)
 145:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****     {
 146:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****     }
 147:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h **** 
 148:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****     /** Constructor in the dynamic-size matrix case.
 149:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****       *
 150:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****       * \param dataPtr pointer to the array to map
 151:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****       * \param rows the number of rows of the matrix expression
 152:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****       * \param cols the number of columns of the matrix expression
 153:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****       * \param stride optional Stride object, passing the strides.
 154:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****       */
 155:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****     EIGEN_DEVICE_FUNC
 156:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****     inline Map(PointerArgType dataPtr, Index rows, Index cols, const StrideType& stride = StrideTyp
 157:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****       : Base(cast_to_pointer_type(dataPtr), rows, cols), m_stride(stride)
 158:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****     {
ARM GAS  /tmp/ccw5fbVv.s 			page 114


 159:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****     }
 160:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h **** 
 161:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****     EIGEN_INHERIT_ASSIGNMENT_OPERATORS(Map)
 592              		.loc 12 161 5 is_stmt 1 view .LVU121
 593              	.LBB1879:
 594              	.LBI1879:
  82:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****       : m_outer(other.outer()), m_inner(other.inner())
 595              		.loc 10 82 5 view .LVU122
 596              	.LBB1880:
 597              	.LBI1880:
  88:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****     /** \returns the inner stride */
 598              		.loc 10 88 18 view .LVU123
  88:../../RTNeural/modules/Eigen/Eigen/src/Core/Stride.h ****     /** \returns the inner stride */
 599              		.loc 10 88 18 is_stmt 0 view .LVU124
 600              	.LBE1880:
 601              	.LBB1881:
 602              	.LBI1881:
 116:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE EIGEN_CONSTEXPR
 603              		.loc 11 116 52 is_stmt 1 view .LVU125
 116:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE EIGEN_CONSTEXPR
 604              		.loc 11 116 52 is_stmt 0 view .LVU126
 605              	.LBE1881:
 606              	.LBB1882:
 607              	.LBI1882:
 608              		.loc 10 91 18 is_stmt 1 view .LVU127
 609              		.loc 10 91 18 is_stmt 0 view .LVU128
 610              	.LBE1882:
 611              	.LBB1883:
 612              	.LBI1883:
 116:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE EIGEN_CONSTEXPR
 613              		.loc 11 116 52 is_stmt 1 view .LVU129
 116:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE EIGEN_CONSTEXPR
 614              		.loc 11 116 52 is_stmt 0 view .LVU130
 615              	.LBE1883:
 616              	.LBE1879:
 617              	.LBE1878:
 618              	.LBB1884:
 619              	.LBI1884:
 620              		.loc 7 150 11 is_stmt 1 view .LVU131
 621              		.loc 7 150 11 is_stmt 0 view .LVU132
 622              	.LBE1884:
 623              	.LBB1885:
 624              	.LBI1885:
  93:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     /** \copydoc DenseBase::cols() */
 625              		.loc 13 93 18 is_stmt 1 view .LVU133
  93:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****     /** \copydoc DenseBase::cols() */
 626              		.loc 13 93 18 is_stmt 0 view .LVU134
 627              	.LBE1885:
 628              	.LBB1886:
 629              	.LBI1886:
 151:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE EIGEN_CONSTEXPR
 152:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     Index cols() const EIGEN_NOEXCEPT { return m_storage.cols(); }
 630              		.loc 7 152 11 is_stmt 1 view .LVU135
 631              		.loc 7 152 11 is_stmt 0 view .LVU136
 632              	.LBE1886:
 633              	.LBB1887:
 634              	.LBI1887:
ARM GAS  /tmp/ccw5fbVv.s 			page 115


  96:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h **** 
 635              		.loc 13 96 18 is_stmt 1 view .LVU137
  96:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h **** 
 636              		.loc 13 96 18 is_stmt 0 view .LVU138
 637              	.LBE1887:
 638              	.LBE1874:
 639              	.LBE1873:
 640              	.LBE1872:
 641              	.LBB1888:
 642              	.LBI1888:
 643              		.file 20 "../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h"
   1:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** // This file is part of Eigen, a lightweight C++ template library
   2:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** // for linear algebra.
   3:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** //
   4:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** // Copyright (C) 2008 Gael Guennebaud <gael.guennebaud@inria.fr>
   5:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** // Copyright (C) 2006-2008 Benoit Jacob <jacob.benoit.1@gmail.com>
   6:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** //
   7:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** // This Source Code Form is subject to the terms of the Mozilla
   8:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** // Public License v. 2.0. If a copy of the MPL was not distributed
   9:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** // with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
  10:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
  11:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** #ifndef EIGEN_REDUX_H
  12:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** #define EIGEN_REDUX_H
  13:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
  14:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** #include "./InternalHeaderCheck.h"
  15:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
  16:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** namespace Eigen { 
  17:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
  18:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** namespace internal {
  19:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
  20:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** // TODO
  21:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** //  * implement other kind of vectorization
  22:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** //  * factorize code
  23:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
  24:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** /***************************************************************************
  25:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** * Part 1 : the logic deciding a strategy for vectorization and unrolling
  26:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** ***************************************************************************/
  27:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
  28:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** template<typename Func, typename Evaluator>
  29:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** struct redux_traits
  30:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** {
  31:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** public:
  32:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     typedef typename find_best_packet<typename Evaluator::Scalar,Evaluator::SizeAtCompileTime>::typ
  33:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   enum {
  34:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     PacketSize = unpacket_traits<PacketType>::size,
  35:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     InnerMaxSize = int(Evaluator::IsRowMajor)
  36:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****                  ? Evaluator::MaxColsAtCompileTime
  37:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****                  : Evaluator::MaxRowsAtCompileTime,
  38:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     OuterMaxSize = int(Evaluator::IsRowMajor)
  39:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****                  ? Evaluator::MaxRowsAtCompileTime
  40:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****                  : Evaluator::MaxColsAtCompileTime,
  41:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     SliceVectorizedWork = int(InnerMaxSize)==Dynamic ? Dynamic
  42:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****                         : int(OuterMaxSize)==Dynamic ? (int(InnerMaxSize)>=int(PacketSize) ? Dynami
  43:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****                         : (int(InnerMaxSize)/int(PacketSize)) * int(OuterMaxSize)
  44:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   };
  45:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
  46:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   enum {
ARM GAS  /tmp/ccw5fbVv.s 			page 116


  47:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     MayLinearize = (int(Evaluator::Flags) & LinearAccessBit),
  48:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     MightVectorize = (int(Evaluator::Flags)&ActualPacketAccessBit)
  49:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****                   && (functor_traits<Func>::PacketAccess),
  50:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     MayLinearVectorize = bool(MightVectorize) && bool(MayLinearize),
  51:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     MaySliceVectorize  = bool(MightVectorize) && (int(SliceVectorizedWork)==Dynamic || int(SliceVec
  52:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   };
  53:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
  54:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** public:
  55:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   enum {
  56:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     Traversal = int(MayLinearVectorize) ? int(LinearVectorizedTraversal)
  57:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****               : int(MaySliceVectorize)  ? int(SliceVectorizedTraversal)
  58:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****               : int(MayLinearize)       ? int(LinearTraversal)
  59:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****                                         : int(DefaultTraversal)
  60:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   };
  61:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
  62:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** public:
  63:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   enum {
  64:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     Cost = Evaluator::SizeAtCompileTime == Dynamic ? HugeCost
  65:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****          : int(Evaluator::SizeAtCompileTime) * int(Evaluator::CoeffReadCost) + (Evaluator::SizeAtCo
  66:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     UnrollingLimit = EIGEN_UNROLLING_LIMIT * (int(Traversal) == int(DefaultTraversal) ? 1 : int(Pac
  67:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   };
  68:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
  69:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** public:
  70:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   enum {
  71:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     Unrolling = Cost <= UnrollingLimit ? CompleteUnrolling : NoUnrolling
  72:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   };
  73:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   
  74:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** #ifdef EIGEN_DEBUG_ASSIGN
  75:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   static void debug()
  76:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   {
  77:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     std::cerr << "Xpr: " << typeid(typename Evaluator::XprType).name() << std::endl;
  78:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     std::cerr.setf(std::ios::hex, std::ios::basefield);
  79:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     EIGEN_DEBUG_VAR(Evaluator::Flags)
  80:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     std::cerr.unsetf(std::ios::hex);
  81:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     EIGEN_DEBUG_VAR(InnerMaxSize)
  82:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     EIGEN_DEBUG_VAR(OuterMaxSize)
  83:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     EIGEN_DEBUG_VAR(SliceVectorizedWork)
  84:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     EIGEN_DEBUG_VAR(PacketSize)
  85:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     EIGEN_DEBUG_VAR(MightVectorize)
  86:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     EIGEN_DEBUG_VAR(MayLinearVectorize)
  87:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     EIGEN_DEBUG_VAR(MaySliceVectorize)
  88:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     std::cerr << "Traversal" << " = " << Traversal << " (" << demangle_traversal(Traversal) << ")" 
  89:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     EIGEN_DEBUG_VAR(UnrollingLimit)
  90:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     std::cerr << "Unrolling" << " = " << Unrolling << " (" << demangle_unrolling(Unrolling) << ")" 
  91:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     std::cerr << std::endl;
  92:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   }
  93:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** #endif
  94:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** };
  95:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
  96:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** /***************************************************************************
  97:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** * Part 2 : unrollers
  98:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** ***************************************************************************/
  99:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
 100:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** /*** no vectorization ***/
 101:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
 102:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** template<typename Func, typename Evaluator, Index Start, Index Length>
 103:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** struct redux_novec_unroller
ARM GAS  /tmp/ccw5fbVv.s 			page 117


 104:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** {
 105:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   static constexpr Index HalfLength = Length/2;
 106:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
 107:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   typedef typename Evaluator::Scalar Scalar;
 108:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
 109:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   EIGEN_DEVICE_FUNC
 110:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 111:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   {
 112:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     return func(redux_novec_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 113:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****                 redux_novec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::run(eva
 114:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   }
 115:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** };
 116:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
 117:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** template<typename Func, typename Evaluator, Index Start>
 118:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** struct redux_novec_unroller<Func, Evaluator, Start, 1>
 119:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** {
 120:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   static constexpr Index outer = Start / Evaluator::InnerSizeAtCompileTime;
 121:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   static constexpr Index inner = Start % Evaluator::InnerSizeAtCompileTime;
 122:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
 123:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   typedef typename Evaluator::Scalar Scalar;
 124:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
 125:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   EIGEN_DEVICE_FUNC
 126:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 127:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   {
 128:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     return eval.coeffByOuterInner(outer, inner);
 129:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   }
 130:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** };
 131:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
 132:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** // This is actually dead code and will never be called. It is required
 133:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** // to prevent false warnings regarding failed inlining though
 134:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** // for 0 length run() will never be called at all.
 135:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** template<typename Func, typename Evaluator, Index Start>
 136:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** struct redux_novec_unroller<Func, Evaluator, Start, 0>
 137:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** {
 138:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   typedef typename Evaluator::Scalar Scalar;
 139:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   EIGEN_DEVICE_FUNC 
 140:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   static EIGEN_STRONG_INLINE Scalar run(const Evaluator&, const Func&) { return Scalar(); }
 141:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** };
 142:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
 143:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** template<typename Func, typename Evaluator, Index Start, Index Length>
 144:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** struct redux_novec_linear_unroller
 145:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** {
 146:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   static constexpr Index HalfLength = Length/2;
 147:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
 148:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   typedef typename Evaluator::Scalar Scalar;
 149:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
 150:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   EIGEN_DEVICE_FUNC
 151:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func& func)
 152:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   {
 153:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     return func(redux_novec_linear_unroller<Func, Evaluator, Start, HalfLength>::run(eval,func),
 154:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****                 redux_novec_linear_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::
 155:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   }
 156:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** };
 157:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
 158:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** template<typename Func, typename Evaluator, Index Start>
 159:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** struct redux_novec_linear_unroller<Func, Evaluator, Start, 1>
 160:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** {
ARM GAS  /tmp/ccw5fbVv.s 			page 118


 161:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   typedef typename Evaluator::Scalar Scalar;
 162:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
 163:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   EIGEN_DEVICE_FUNC
 164:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   static EIGEN_STRONG_INLINE Scalar run(const Evaluator &eval, const Func&)
 165:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   {
 166:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     return eval.coeff(Start);
 167:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   }
 168:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** };
 169:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
 170:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** // This is actually dead code and will never be called. It is required
 171:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** // to prevent false warnings regarding failed inlining though
 172:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** // for 0 length run() will never be called at all.
 173:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** template<typename Func, typename Evaluator, Index Start>
 174:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** struct redux_novec_linear_unroller<Func, Evaluator, Start, 0>
 175:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** {
 176:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   typedef typename Evaluator::Scalar Scalar;
 177:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   EIGEN_DEVICE_FUNC 
 178:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   static EIGEN_STRONG_INLINE Scalar run(const Evaluator&, const Func&) { return Scalar(); }
 179:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** };
 180:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
 181:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** /*** vectorization ***/
 182:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
 183:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** template<typename Func, typename Evaluator, Index Start, Index Length>
 184:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** struct redux_vec_unroller
 185:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** {
 186:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   template<typename PacketType>
 187:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   EIGEN_DEVICE_FUNC
 188:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   static EIGEN_STRONG_INLINE PacketType run(const Evaluator &eval, const Func& func)
 189:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   {
 190:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     constexpr Index HalfLength = Length/2;
 191:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
 192:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     return func.packetOp(
 193:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****             redux_vec_unroller<Func, Evaluator, Start, HalfLength>::template run<PacketType>(eval,f
 194:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****             redux_vec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::template run<
 195:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   }
 196:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** };
 197:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
 198:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** template<typename Func, typename Evaluator, Index Start>
 199:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** struct redux_vec_unroller<Func, Evaluator, Start, 1>
 200:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** {
 201:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   template<typename PacketType>
 202:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   EIGEN_DEVICE_FUNC
 203:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   static EIGEN_STRONG_INLINE PacketType run(const Evaluator &eval, const Func&)
 204:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   {
 205:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     constexpr Index PacketSize = unpacket_traits<PacketType>::size;
 206:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     constexpr Index index = Start * PacketSize;
 207:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     constexpr Index outer = index / int(Evaluator::InnerSizeAtCompileTime);
 208:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     constexpr Index inner = index % int(Evaluator::InnerSizeAtCompileTime);
 209:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     constexpr int alignment = Evaluator::Alignment;
 210:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
 211:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     return eval.template packetByOuterInner<alignment,PacketType>(outer, inner);
 212:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   }
 213:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** };
 214:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
 215:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** template<typename Func, typename Evaluator, Index Start, Index Length>
 216:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** struct redux_vec_linear_unroller
 217:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** {
ARM GAS  /tmp/ccw5fbVv.s 			page 119


 218:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   template<typename PacketType>
 219:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   EIGEN_DEVICE_FUNC
 220:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   static EIGEN_STRONG_INLINE PacketType run(const Evaluator &eval, const Func& func)
 221:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   {
 222:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     constexpr Index HalfLength = Length/2;
 223:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
 224:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     return func.packetOp(
 225:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****             redux_vec_linear_unroller<Func, Evaluator, Start, HalfLength>::template run<PacketType>
 226:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****             redux_vec_linear_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::templa
 227:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   }
 228:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** };
 229:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
 230:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** template<typename Func, typename Evaluator, Index Start>
 231:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** struct redux_vec_linear_unroller<Func, Evaluator, Start, 1>
 232:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** {
 233:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   template<typename PacketType>
 234:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   EIGEN_DEVICE_FUNC
 235:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   static EIGEN_STRONG_INLINE PacketType run(const Evaluator &eval, const Func&)
 236:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   {
 237:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     constexpr Index PacketSize = unpacket_traits<PacketType>::size;
 238:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     constexpr Index index = (Start * PacketSize);
 239:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     constexpr int alignment = Evaluator::Alignment;
 240:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     return eval.template packet<alignment,PacketType>(index);
 241:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   }
 242:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** };
 243:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
 244:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** /***************************************************************************
 245:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** * Part 3 : implementation of all cases
 246:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** ***************************************************************************/
 247:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
 248:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** template<typename Func, typename Evaluator,
 249:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****          int Traversal = redux_traits<Func, Evaluator>::Traversal,
 250:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****          int Unrolling = redux_traits<Func, Evaluator>::Unrolling
 251:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** >
 252:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** struct redux_impl;
 253:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
 254:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** template<typename Func, typename Evaluator>
 255:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** struct redux_impl<Func, Evaluator, DefaultTraversal, NoUnrolling>
 256:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** {
 257:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   typedef typename Evaluator::Scalar Scalar;
 258:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
 259:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   template<typename XprType>
 260:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE
 261:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   Scalar run(const Evaluator &eval, const Func& func, const XprType& xpr)
 262:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   {
 263:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     eigen_assert(xpr.rows()>0 && xpr.cols()>0 && "you are using an empty matrix");
 264:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     Scalar res = eval.coeffByOuterInner(0, 0);
 265:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     for(Index i = 1; i < xpr.innerSize(); ++i)
 266:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****       res = func(res, eval.coeffByOuterInner(0, i));
 267:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     for(Index i = 1; i < xpr.outerSize(); ++i)
 268:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****       for(Index j = 0; j < xpr.innerSize(); ++j)
 269:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****         res = func(res, eval.coeffByOuterInner(i, j));
 270:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     return res;
 271:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   }
 272:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** };
 273:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
 274:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** template<typename Func, typename Evaluator>
ARM GAS  /tmp/ccw5fbVv.s 			page 120


 275:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** struct redux_impl<Func, Evaluator, LinearTraversal, NoUnrolling>
 276:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** {
 277:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   typedef typename Evaluator::Scalar Scalar;
 278:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
 279:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   template<typename XprType>
 280:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE
 281:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   Scalar run(const Evaluator &eval, const Func& func, const XprType& xpr)
 282:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   {
 283:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     eigen_assert(xpr.size()>0 && "you are using an empty matrix");
 284:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     Scalar res = eval.coeff(0);
 285:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     for(Index k = 1; k < xpr.size(); ++k)
 286:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****       res = func(res, eval.coeff(k));
 287:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     return res;
 288:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   }
 289:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** };
 290:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
 291:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** template<typename Func, typename Evaluator>
 292:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** struct redux_impl<Func,Evaluator, DefaultTraversal, CompleteUnrolling>
 293:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   : redux_novec_unroller<Func,Evaluator, 0, Evaluator::SizeAtCompileTime>
 294:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** {
 295:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   typedef redux_novec_unroller<Func,Evaluator, 0, Evaluator::SizeAtCompileTime> Base;
 296:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   typedef typename Evaluator::Scalar Scalar;
 297:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   template<typename XprType>
 298:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE
 299:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 300:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   {
 301:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     return Base::run(eval,func);
 302:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   }
 303:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** };
 304:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
 305:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** template<typename Func, typename Evaluator>
 306:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** struct redux_impl<Func,Evaluator, LinearTraversal, CompleteUnrolling>
 307:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   : redux_novec_linear_unroller<Func,Evaluator, 0, Evaluator::SizeAtCompileTime>
 308:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** {
 309:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   typedef redux_novec_linear_unroller<Func,Evaluator, 0, Evaluator::SizeAtCompileTime> Base;
 310:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   typedef typename Evaluator::Scalar Scalar;
 311:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   template<typename XprType>
 312:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE
 313:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   Scalar run(const Evaluator &eval, const Func& func, const XprType& /*xpr*/)
 314:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   {
 315:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     return Base::run(eval,func);
 316:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   }
 317:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** };
 318:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
 319:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** template<typename Func, typename Evaluator>
 320:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** struct redux_impl<Func, Evaluator, LinearVectorizedTraversal, NoUnrolling>
 321:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** {
 322:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   typedef typename Evaluator::Scalar Scalar;
 323:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   typedef typename redux_traits<Func, Evaluator>::PacketType PacketScalar;
 324:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
 325:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   template<typename XprType>
 326:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   static Scalar run(const Evaluator &eval, const Func& func, const XprType& xpr)
 327:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   {
 328:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     const Index size = xpr.size();
 329:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     
 330:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     constexpr Index packetSize = redux_traits<Func, Evaluator>::PacketSize;
 331:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     constexpr int packetAlignment = unpacket_traits<PacketScalar>::alignment;
ARM GAS  /tmp/ccw5fbVv.s 			page 121


 332:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     constexpr int alignment0 = (bool(Evaluator::Flags & DirectAccessBit) && bool(packet_traits<Scal
 333:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     constexpr int alignment = plain_enum_max(alignment0, Evaluator::Alignment);
 334:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     const Index alignedStart = internal::first_default_aligned(xpr);
 335:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     const Index alignedSize2 = ((size-alignedStart)/(2*packetSize))*(2*packetSize);
 336:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     const Index alignedSize = ((size-alignedStart)/(packetSize))*(packetSize);
 337:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     const Index alignedEnd2 = alignedStart + alignedSize2;
 338:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     const Index alignedEnd  = alignedStart + alignedSize;
 339:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     Scalar res;
 340:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     if(alignedSize)
 341:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     {
 342:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****       PacketScalar packet_res0 = eval.template packet<alignment,PacketScalar>(alignedStart);
 343:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****       if(alignedSize>packetSize) // we have at least two packets to partly unroll the loop
 344:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****       {
 345:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****         PacketScalar packet_res1 = eval.template packet<alignment,PacketScalar>(alignedStart+packet
 346:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****         for(Index index = alignedStart + 2*packetSize; index < alignedEnd2; index += 2*packetSize)
 347:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****         {
 348:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****           packet_res0 = func.packetOp(packet_res0, eval.template packet<alignment,PacketScalar>(ind
 349:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****           packet_res1 = func.packetOp(packet_res1, eval.template packet<alignment,PacketScalar>(ind
 350:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****         }
 351:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
 352:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****         packet_res0 = func.packetOp(packet_res0,packet_res1);
 353:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****         if(alignedEnd>alignedEnd2)
 354:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****           packet_res0 = func.packetOp(packet_res0, eval.template packet<alignment,PacketScalar>(ali
 355:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****       }
 356:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****       res = func.predux(packet_res0);
 357:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
 358:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****       for(Index index = 0; index < alignedStart; ++index)
 359:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****         res = func(res,eval.coeff(index));
 360:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
 361:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****       for(Index index = alignedEnd; index < size; ++index)
 362:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****         res = func(res,eval.coeff(index));
 363:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     }
 364:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     else // too small to vectorize anything.
 365:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****          // since this is dynamic-size hence inefficient anyway for such small sizes, don't try to 
 366:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     {
 367:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****       res = eval.coeff(0);
 368:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****       for(Index index = 1; index < size; ++index)
 369:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****         res = func(res,eval.coeff(index));
 370:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     }
 371:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
 372:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     return res;
 373:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   }
 374:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** };
 375:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
 376:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** // NOTE: for SliceVectorizedTraversal we simply bypass unrolling
 377:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** template<typename Func, typename Evaluator, int Unrolling>
 378:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** struct redux_impl<Func, Evaluator, SliceVectorizedTraversal, Unrolling>
 379:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** {
 380:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   typedef typename Evaluator::Scalar Scalar;
 381:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   typedef typename redux_traits<Func, Evaluator>::PacketType PacketType;
 382:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
 383:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   template<typename XprType>
 384:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   EIGEN_DEVICE_FUNC static Scalar run(const Evaluator &eval, const Func& func, const XprType& xpr)
 385:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   {
 386:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     eigen_assert(xpr.rows()>0 && xpr.cols()>0 && "you are using an empty matrix");
 387:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     constexpr Index packetSize = redux_traits<Func, Evaluator>::PacketSize;
 388:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     const Index innerSize = xpr.innerSize();
ARM GAS  /tmp/ccw5fbVv.s 			page 122


 389:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     const Index outerSize = xpr.outerSize();
 390:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     const Index packetedInnerSize = ((innerSize)/packetSize)*packetSize;
 391:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     Scalar res;
 392:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     if(packetedInnerSize)
 393:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     {
 394:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****       PacketType packet_res = eval.template packet<Unaligned,PacketType>(0,0);
 395:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****       for(Index j=0; j<outerSize; ++j)
 396:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****         for(Index i=(j==0?packetSize:0); i<packetedInnerSize; i+=Index(packetSize))
 397:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****           packet_res = func.packetOp(packet_res, eval.template packetByOuterInner<Unaligned,PacketT
 398:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
 399:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****       res = func.predux(packet_res);
 400:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****       for(Index j=0; j<outerSize; ++j)
 401:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****         for(Index i=packetedInnerSize; i<innerSize; ++i)
 402:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****           res = func(res, eval.coeffByOuterInner(j,i));
 403:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     }
 404:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     else // too small to vectorize anything.
 405:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****          // since this is dynamic-size hence inefficient anyway for such small sizes, don't try to 
 406:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     {
 407:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****       res = redux_impl<Func, Evaluator, DefaultTraversal, NoUnrolling>::run(eval, func, xpr);
 408:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     }
 409:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
 410:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     return res;
 411:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   }
 412:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** };
 413:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
 414:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** template<typename Func, typename Evaluator>
 415:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** struct redux_impl<Func, Evaluator, LinearVectorizedTraversal, CompleteUnrolling>
 416:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** {
 417:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   typedef typename Evaluator::Scalar Scalar;
 418:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
 419:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   typedef typename redux_traits<Func, Evaluator>::PacketType PacketType;
 420:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   static constexpr Index PacketSize = redux_traits<Func, Evaluator>::PacketSize;
 421:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   static constexpr Index  Size = Evaluator::SizeAtCompileTime;
 422:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   static constexpr Index  VectorizedSize = (int(Size) / int(PacketSize)) * int(PacketSize);
 423:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
 424:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   template<typename XprType>
 425:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE
 426:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   Scalar run(const Evaluator &eval, const Func& func, const XprType &xpr)
 427:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   {
 428:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     EIGEN_ONLY_USED_FOR_DEBUG(xpr)
 429:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     eigen_assert(xpr.rows()>0 && xpr.cols()>0 && "you are using an empty matrix");
 430:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     if (VectorizedSize > 0) {
 431:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****       Scalar res = func.predux(redux_vec_linear_unroller<Func, Evaluator, 0, Size / PacketSize>::te
 432:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****       if (VectorizedSize != Size)
 433:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****         res = func(res,redux_novec_linear_unroller<Func, Evaluator, VectorizedSize, Size-Vectorized
 434:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****       return res;
 435:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     }
 436:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     else {
 437:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****       return redux_novec_linear_unroller<Func, Evaluator, 0, Size>::run(eval,func);
 438:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     }
 439:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   }
 440:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** };
 441:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
 442:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** // evaluator adaptor
 443:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** template<typename XprType_>
 444:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** class redux_evaluator : public internal::evaluator<XprType_>
 445:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** {
ARM GAS  /tmp/ccw5fbVv.s 			page 123


 446:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   typedef internal::evaluator<XprType_> Base;
 447:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** public:
 448:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   typedef XprType_ XprType;
 449:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 450:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   explicit redux_evaluator(const XprType &xpr) : Base(xpr) {}
 451:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   
 452:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   typedef typename XprType::Scalar Scalar;
 453:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   typedef typename XprType::CoeffReturnType CoeffReturnType;
 454:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   typedef typename XprType::PacketScalar PacketScalar;
 455:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   
 456:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   enum {
 457:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     MaxRowsAtCompileTime = XprType::MaxRowsAtCompileTime,
 458:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     MaxColsAtCompileTime = XprType::MaxColsAtCompileTime,
 459:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     // TODO we should not remove DirectAccessBit and rather find an elegant way to query the alignm
 460:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     Flags = Base::Flags & ~DirectAccessBit,
 461:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     IsRowMajor = XprType::IsRowMajor,
 462:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     SizeAtCompileTime = XprType::SizeAtCompileTime,
 463:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     InnerSizeAtCompileTime = XprType::InnerSizeAtCompileTime
 464:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   };
 465:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   
 466:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 467:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 468:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   { return Base::coeff(IsRowMajor ? outer : inner, IsRowMajor ? inner : outer); }
 469:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   
 470:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   template<int LoadMode, typename PacketType>
 471:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 472:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   PacketType packetByOuterInner(Index outer, Index inner) const
 473:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   { return Base::template packet<LoadMode,PacketType>(IsRowMajor ? outer : inner, IsRowMajor ? inne
 474:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   
 475:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** };
 476:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
 477:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** } // end namespace internal
 478:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
 479:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** /***************************************************************************
 480:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** * Part 4 : public API
 481:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** ***************************************************************************/
 482:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
 483:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
 484:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** /** \returns the result of a full redux operation on the whole matrix or vector using \a func
 485:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   *
 486:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   * The template parameter \a BinaryOp is the type of the functor \a func which must be
 487:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   * an associative operator. Both current C++98 and C++11 functor styles are handled.
 488:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   *
 489:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   * \warning the matrix must be not empty, otherwise an assertion is triggered.
 490:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   *
 491:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   * \sa DenseBase::sum(), DenseBase::minCoeff(), DenseBase::maxCoeff(), MatrixBase::colwise(), Matr
 492:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   */
 493:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** template<typename Derived>
 494:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** template<typename Func>
 495:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE typename internal::traits<Derived>::Scalar
 496:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** DenseBase<Derived>::redux(const Func& func) const
 497:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** {
 498:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   eigen_assert(this->rows()>0 && this->cols()>0 && "you are using an empty matrix");
 499:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
 500:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   typedef typename internal::redux_evaluator<Derived> ThisEvaluator;
 501:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   ThisEvaluator thisEval(derived());
 502:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
ARM GAS  /tmp/ccw5fbVv.s 			page 124


 503:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   // The initial expression is passed to the reducer as an additional argument instead of
 504:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   // passing it as a member of redux_evaluator to help  
 505:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   return internal::redux_impl<Func, ThisEvaluator>::run(thisEval, func, derived());
 506:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** }
 507:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
 508:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** /** \returns the minimum of all coefficients of \c *this.
 509:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   * In case \c *this contains NaN, NaNPropagation determines the behavior:
 510:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   *   NaNPropagation == PropagateFast : undefined
 511:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   *   NaNPropagation == PropagateNaN : result is NaN
 512:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   *   NaNPropagation == PropagateNumbers : result is minimum of elements that are not NaN
 513:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   * \warning the matrix must be not empty, otherwise an assertion is triggered.
 514:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   */
 515:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** template<typename Derived>
 516:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** template<int NaNPropagation>
 517:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE typename internal::traits<Derived>::Scalar
 518:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** DenseBase<Derived>::minCoeff() const
 519:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** {
 520:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   return derived().redux(Eigen::internal::scalar_min_op<Scalar,Scalar, NaNPropagation>());
 521:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** }
 522:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
 523:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** /** \returns the maximum of all coefficients of \c *this. 
 524:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   * In case \c *this contains NaN, NaNPropagation determines the behavior:
 525:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   *   NaNPropagation == PropagateFast : undefined
 526:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   *   NaNPropagation == PropagateNaN : result is NaN
 527:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   *   NaNPropagation == PropagateNumbers : result is maximum of elements that are not NaN
 528:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   * \warning the matrix must be not empty, otherwise an assertion is triggered.
 529:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   */
 530:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** template<typename Derived>
 531:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** template<int NaNPropagation>
 532:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE typename internal::traits<Derived>::Scalar
 533:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** DenseBase<Derived>::maxCoeff() const
 534:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** {
 535:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   return derived().redux(Eigen::internal::scalar_max_op<Scalar,Scalar, NaNPropagation>());
 536:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** }
 537:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** 
 538:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** /** \returns the sum of all coefficients of \c *this
 539:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   *
 540:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   * If \c *this is empty, then the value 0 is returned.
 541:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   *
 542:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   * \sa trace(), prod(), mean()
 543:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   */
 544:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** template<typename Derived>
 545:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE typename internal::traits<Derived>::Scalar
 546:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** DenseBase<Derived>::sum() const
 644              		.loc 20 546 1 is_stmt 1 view .LVU139
 645              	.LBB1889:
 547:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** {
 548:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   if(SizeAtCompileTime==0 || (SizeAtCompileTime==Dynamic && size()==0))
 646              		.loc 20 548 3 is_stmt 0 view .LVU140
 647 0022 1EB9     		cbnz	r6, .L25
 549:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****     return Scalar(0);
 648              		.loc 20 549 20 view .LVU141
 649 0024 9FED150A 		vldr.32	s0, .L26
 650              	.LVL21:
 651              	.L14:
 652              		.loc 20 549 20 view .LVU142
 653              	.LBE1889:
ARM GAS  /tmp/ccw5fbVv.s 			page 125


 654              	.LBE1888:
 655              	.LBE1871:
 656              	.LBE1866:
 657              	.LBE1865:
  42:ImpulseResponse/ImpulseResponse.cpp **** 
  43:ImpulseResponse/ImpulseResponse.cpp **** }
 658              		.loc 1 43 1 view .LVU143
 659 0028 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 660              	.LVL22:
 661              	.L25:
  36:ImpulseResponse/ImpulseResponse.cpp ****   auto input = Eigen::Map<const Eigen::VectorXf>(&mHistory[j], mHistoryRequired + 1);
 662              		.loc 1 36 25 view .LVU144
 663 002c A8EB0701 		sub	r1, r8, r7
 664              	.LBB1960:
 665              	.LBB1957:
 666              	.LBB1955:
 667              	.LBB1953:
 668              	.LBB1951:
 669              	.LBB1890:
 670              	.LBB1891:
 671              	.LBB1892:
 672              	.LBB1893:
 673              	.LBB1894:
 674              	.LBB1895:
 675              	.LBB1896:
 676              	.LBB1897:
 677              	.LBB1898:
 678              	.LBB1899:
 679              	.LBB1900:
 680              	.LBB1901:
 663:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC static constexpr Index cols(void) { return Cols_; }
 664:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     void conservativeResize(Index size, Index rows, Index)
 665:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     {
 666:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       m_data = internal::conditional_aligned_realloc_new_auto<T,(Options_&DontAlign)==0>(m_data, si
 667:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       m_rows = rows;
 668:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     }
 669:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void resize(Index size, Index rows, Index)
 670:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     {
 671:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       if(size != m_rows*Cols_)
 672:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       {
 673:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****         internal::conditional_aligned_delete_auto<T,(Options_&DontAlign)==0>(m_data, Cols_*m_rows);
 674:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****         if (size>0) // >0 and not simply !=0 to let the compiler knows that size cannot be negative
 675:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****           m_data = internal::conditional_aligned_new_auto<T,(Options_&DontAlign)==0>(size);
 676:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****         else
 677:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****           m_data = 0;
 678:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****         EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN({})
 679:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       }
 680:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       m_rows = rows;
 681:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     }
 682:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     EIGEN_DEVICE_FUNC const T *data() const { return m_data; }
 681              		.loc 5 682 54 view .LVU145
 682 0030 E26A     		ldr	r2, [r4, #44]
 683              	.LBE1901:
 684              	.LBE1900:
 685              	.LBE1899:
 686              	.LBE1898:
 687              	.LBE1897:
ARM GAS  /tmp/ccw5fbVv.s 			page 126


 688              	.LBE1896:
 689              	.LBE1895:
 690              	.LBE1894:
 691              	.LBE1893:
 692              	.LBE1892:
 693              	.LBB1926:
 694              	.LBB1927:
 695              	.LBB1928:
 285:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****       res = func(res, eval.coeff(k));
 696              		.loc 20 285 24 view .LVU146
 697 0032 012E     		cmp	r6, #1
 698              	.LBE1928:
 699              	.LBE1927:
 700              	.LBE1926:
 701              	.LBE1891:
 702              	.LBE1890:
 703              	.LBE1951:
 704              	.LBE1953:
 705              	.LBE1955:
 706              	.LBE1957:
 707              	.LBE1960:
 708              	.LBB1961:
 709              	.LBB1844:
 710              		.loc 2 1046 39 view .LVU147
 711 0034 05EB8101 		add	r1, r5, r1, lsl #2
 712              	.LVL23:
 713              		.loc 2 1046 39 view .LVU148
 714              	.LBE1844:
 715              	.LBE1961:
 716              	.LBB1962:
 717              	.LBB1958:
 718              	.LBB1956:
 719              	.LBB1954:
 720              	.LBB1952:
 721              	.LBB1950:
 722              	.LBI1890:
 496:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h **** {
 723              		.loc 20 496 1 is_stmt 1 view .LVU149
 724              	.LBB1949:
 725              	.LBB1947:
 726              	.LBI1892:
 450:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   
 727              		.loc 20 450 12 view .LVU150
 728              	.LBB1925:
 729              	.LBI1893:
 730              		.file 21 "../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h"
   1:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // This file is part of Eigen, a lightweight C++ template library
   2:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // for linear algebra.
   3:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** //
   4:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // Copyright (C) 2011 Benoit Jacob <jacob.benoit.1@gmail.com>
   5:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // Copyright (C) 2011-2014 Gael Guennebaud <gael.guennebaud@inria.fr>
   6:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // Copyright (C) 2011-2012 Jitse Niesen <jitse@maths.leeds.ac.uk>
   7:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** //
   8:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // This Source Code Form is subject to the terms of the Mozilla
   9:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // Public License v. 2.0. If a copy of the MPL was not distributed
  10:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
  11:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
ARM GAS  /tmp/ccw5fbVv.s 			page 127


  12:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
  13:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** #ifndef EIGEN_COREEVALUATORS_H
  14:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** #define EIGEN_COREEVALUATORS_H
  15:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
  16:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** #include "./InternalHeaderCheck.h"
  17:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
  18:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** namespace Eigen {
  19:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
  20:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** namespace internal {
  21:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
  22:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // This class returns the evaluator kind from the expression storage kind.
  23:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // Default assumes index based accessors
  24:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** template<typename StorageKind>
  25:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** struct storage_kind_to_evaluator_kind {
  26:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   typedef IndexBased Kind;
  27:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** };
  28:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
  29:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // This class returns the evaluator shape from the expression storage kind.
  30:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // It can be Dense, Sparse, Triangular, Diagonal, SelfAdjoint, Band, etc.
  31:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** template<typename StorageKind> struct storage_kind_to_shape;
  32:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
  33:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** template<> struct storage_kind_to_shape<Dense>                  { typedef DenseShape Shape;        
  34:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** template<> struct storage_kind_to_shape<SolverStorage>          { typedef SolverShape Shape;       
  35:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** template<> struct storage_kind_to_shape<PermutationStorage>     { typedef PermutationShape Shape;  
  36:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** template<> struct storage_kind_to_shape<TranspositionsStorage>  { typedef TranspositionsShape Shape
  37:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
  38:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // Evaluators have to be specialized with respect to various criteria such as:
  39:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** //  - storage/structure/shape
  40:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** //  - scalar type
  41:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** //  - etc.
  42:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // Therefore, we need specialization of evaluator providing additional template arguments for each 
  43:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // We currently distinguish the following kind of evaluators:
  44:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // - unary_evaluator    for expressions taking only one arguments (CwiseUnaryOp, CwiseUnaryView, Tr
  45:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // - binary_evaluator   for expression taking two arguments (CwiseBinaryOp)
  46:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // - ternary_evaluator   for expression taking three arguments (CwiseTernaryOp)
  47:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // - product_evaluator  for linear algebra products (Product); special case of binary_evaluator bec
  48:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // - mapbase_evaluator  for Map, Block, Ref
  49:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // - block_evaluator    for Block (special dispatching to a mapbase_evaluator or unary_evaluator)
  50:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
  51:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** template< typename T,
  52:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****           typename Arg1Kind   = typename evaluator_traits<typename T::Arg1>::Kind,
  53:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****           typename Arg2Kind   = typename evaluator_traits<typename T::Arg2>::Kind,
  54:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****           typename Arg3Kind   = typename evaluator_traits<typename T::Arg3>::Kind,
  55:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****           typename Arg1Scalar = typename traits<typename T::Arg1>::Scalar,
  56:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****           typename Arg2Scalar = typename traits<typename T::Arg2>::Scalar,
  57:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****           typename Arg3Scalar = typename traits<typename T::Arg3>::Scalar> struct ternary_evaluator
  58:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
  59:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** template< typename T,
  60:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****           typename LhsKind   = typename evaluator_traits<typename T::Lhs>::Kind,
  61:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****           typename RhsKind   = typename evaluator_traits<typename T::Rhs>::Kind,
  62:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****           typename LhsScalar = typename traits<typename T::Lhs>::Scalar,
  63:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****           typename RhsScalar = typename traits<typename T::Rhs>::Scalar> struct binary_evaluator;
  64:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
  65:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** template< typename T,
  66:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****           typename Kind   = typename evaluator_traits<typename T::NestedExpression>::Kind,
  67:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****           typename Scalar = typename T::Scalar> struct unary_evaluator;
  68:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
ARM GAS  /tmp/ccw5fbVv.s 			page 128


  69:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // evaluator_traits<T> contains traits for evaluator<T>
  70:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
  71:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** template<typename T>
  72:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** struct evaluator_traits_base
  73:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** {
  74:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   // by default, get evaluator kind and shape from storage
  75:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   typedef typename storage_kind_to_evaluator_kind<typename traits<T>::StorageKind>::Kind Kind;
  76:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   typedef typename storage_kind_to_shape<typename traits<T>::StorageKind>::Shape Shape;
  77:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** };
  78:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
  79:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // Default evaluator traits
  80:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** template<typename T>
  81:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** struct evaluator_traits : public evaluator_traits_base<T>
  82:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** {
  83:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** };
  84:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
  85:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** template<typename T, typename Shape = typename evaluator_traits<T>::Shape >
  86:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** struct evaluator_assume_aliasing {
  87:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   static const bool value = false;
  88:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** };
  89:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
  90:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // By default, we assume a unary expression:
  91:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** template<typename T>
  92:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** struct evaluator : public unary_evaluator<T>
  93:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** {
  94:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   typedef unary_evaluator<T> Base;
  95:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
  96:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   explicit evaluator(const T& xpr) : Base(xpr) {}
  97:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** };
  98:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
  99:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 100:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // TODO: Think about const-correctness
 101:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** template<typename T>
 102:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** struct evaluator<const T>
 103:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   : evaluator<T>
 104:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** {
 105:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 106:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   explicit evaluator(const T& xpr) : evaluator<T>(xpr) {}
 107:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** };
 108:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 109:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // ---------- base class for all evaluators ----------
 110:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 111:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** template<typename ExpressionType>
 112:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** struct evaluator_base
 113:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** {
 114:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   // TODO that's not very nice to have to propagate all these traits. They are currently only neede
 115:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   typedef traits<ExpressionType> ExpressionTraits;
 116:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 117:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   enum {
 118:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     Alignment = 0
 119:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   };
 120:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   // noncopyable:
 121:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   // Don't make this class inherit noncopyable as this kills EBO (Empty Base Optimization)
 122:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   // and make complex evaluator much larger than then should do.
 123:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE evaluator_base() {}
 124:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 125:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** private:
ARM GAS  /tmp/ccw5fbVv.s 			page 129


 126:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC evaluator_base(const evaluator_base&);
 127:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC const evaluator_base& operator=(const evaluator_base&);
 128:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** };
 129:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 130:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // -------------------- Matrix and Array --------------------
 131:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** //
 132:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // evaluator<PlainObjectBase> is a common base class for the
 133:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // Matrix and Array evaluators.
 134:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // Here we directly specialize evaluator. This is not really a unary expression, and it is, by defi
 135:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // so no need for more sophisticated dispatching.
 136:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 137:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // this helper permits to completely eliminate m_outerStride if it is known at compiletime.
 138:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** template<typename Scalar,int OuterStride> class plainobjectbase_evaluator_data {
 139:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** public:
 140:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 141:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   plainobjectbase_evaluator_data(const Scalar* ptr, Index outerStride) : data(ptr)
 142:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
 143:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** #ifndef EIGEN_INTERNAL_DEBUGGING
 144:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     EIGEN_UNUSED_VARIABLE(outerStride);
 145:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** #endif
 146:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     eigen_internal_assert(outerStride==OuterStride);
 147:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 148:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE EIGEN_CONSTEXPR
 149:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   Index outerStride() const EIGEN_NOEXCEPT { return OuterStride; }
 150:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   const Scalar *data;
 151:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** };
 152:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 153:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** template<typename Scalar> class plainobjectbase_evaluator_data<Scalar,Dynamic> {
 154:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** public:
 155:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 156:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   plainobjectbase_evaluator_data(const Scalar* ptr, Index outerStride) : data(ptr), m_outerStride(o
 157:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 158:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   Index outerStride() const { return m_outerStride; }
 159:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   const Scalar *data;
 160:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** protected:
 161:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   Index m_outerStride;
 162:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** };
 163:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 164:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** template<typename Derived>
 165:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** struct evaluator<PlainObjectBase<Derived> >
 166:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   : evaluator_base<Derived>
 167:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** {
 168:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   typedef PlainObjectBase<Derived> PlainObjectType;
 169:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   typedef typename PlainObjectType::Scalar Scalar;
 170:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   typedef typename PlainObjectType::CoeffReturnType CoeffReturnType;
 171:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 172:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   enum {
 173:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     IsRowMajor = PlainObjectType::IsRowMajor,
 174:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     IsVectorAtCompileTime = PlainObjectType::IsVectorAtCompileTime,
 175:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     RowsAtCompileTime = PlainObjectType::RowsAtCompileTime,
 176:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     ColsAtCompileTime = PlainObjectType::ColsAtCompileTime,
 177:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 178:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     CoeffReadCost = NumTraits<Scalar>::ReadCost,
 179:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     Flags = traits<Derived>::EvaluatorFlags,
 180:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     Alignment = traits<Derived>::Alignment
 181:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   };
 182:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   enum {
ARM GAS  /tmp/ccw5fbVv.s 			page 130


 183:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     // We do not need to know the outer stride for vectors
 184:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     OuterStrideAtCompileTime = IsVectorAtCompileTime  ? 0
 185:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****                                                       : int(IsRowMajor) ? ColsAtCompileTime
 186:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****                                                                         : RowsAtCompileTime
 187:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   };
 188:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 189:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 190:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   evaluator()
 191:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     : m_d(0,OuterStrideAtCompileTime)
 192:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
 193:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     EIGEN_INTERNAL_CHECK_COST_VALUE(CoeffReadCost);
 194:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 195:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 196:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 197:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   explicit evaluator(const PlainObjectType& m)
 198:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())
 199:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
 200:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     EIGEN_INTERNAL_CHECK_COST_VALUE(CoeffReadCost);
 201:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 202:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 203:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 204:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   CoeffReturnType coeff(Index row, Index col) const
 205:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
 206:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     if (IsRowMajor)
 207:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****       return m_d.data[row * m_d.outerStride() + col];
 208:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     else
 209:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****       return m_d.data[row + col * m_d.outerStride()];
 210:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 211:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 212:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 213:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   CoeffReturnType coeff(Index index) const
 214:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
 215:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return m_d.data[index];
 216:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 217:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 218:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 219:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   Scalar& coeffRef(Index row, Index col)
 220:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
 221:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     if (IsRowMajor)
 222:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****       return const_cast<Scalar*>(m_d.data)[row * m_d.outerStride() + col];
 223:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     else
 224:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****       return const_cast<Scalar*>(m_d.data)[row + col * m_d.outerStride()];
 225:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 226:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 227:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 228:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   Scalar& coeffRef(Index index)
 229:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
 230:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return const_cast<Scalar*>(m_d.data)[index];
 231:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 232:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 233:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   template<int LoadMode, typename PacketType>
 234:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_STRONG_INLINE
 235:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   PacketType packet(Index row, Index col) const
 236:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
 237:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     if (IsRowMajor)
 238:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****       return ploadt<PacketType, LoadMode>(m_d.data + row * m_d.outerStride() + col);
 239:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     else
ARM GAS  /tmp/ccw5fbVv.s 			page 131


 240:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****       return ploadt<PacketType, LoadMode>(m_d.data + row + col * m_d.outerStride());
 241:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 242:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 243:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   template<int LoadMode, typename PacketType>
 244:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_STRONG_INLINE
 245:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   PacketType packet(Index index) const
 246:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
 247:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return ploadt<PacketType, LoadMode>(m_d.data + index);
 248:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 249:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 250:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   template<int StoreMode,typename PacketType>
 251:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_STRONG_INLINE
 252:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   void writePacket(Index row, Index col, const PacketType& x)
 253:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
 254:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     if (IsRowMajor)
 255:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****       return pstoret<Scalar, PacketType, StoreMode>
 256:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 	            (const_cast<Scalar*>(m_d.data) + row * m_d.outerStride() + col, x);
 257:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     else
 258:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****       return pstoret<Scalar, PacketType, StoreMode>
 259:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****                     (const_cast<Scalar*>(m_d.data) + row + col * m_d.outerStride(), x);
 260:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 261:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 262:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   template<int StoreMode, typename PacketType>
 263:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_STRONG_INLINE
 264:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   void writePacket(Index index, const PacketType& x)
 265:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
 266:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return pstoret<Scalar, PacketType, StoreMode>(const_cast<Scalar*>(m_d.data) + index, x);
 267:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 268:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 269:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** protected:
 270:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 271:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   plainobjectbase_evaluator_data<Scalar,OuterStrideAtCompileTime> m_d;
 272:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** };
 273:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 274:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** template<typename Scalar, int Rows, int Cols, int Options, int MaxRows, int MaxCols>
 275:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** struct evaluator<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 276:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   : evaluator<PlainObjectBase<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> > >
 277:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** {
 278:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   typedef Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> XprType;
 279:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 280:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 281:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   evaluator() {}
 282:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 283:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 284:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   explicit evaluator(const XprType& m)
 285:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     : evaluator<PlainObjectBase<XprType> >(m)
 286:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   { }
 287:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** };
 288:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 289:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** template<typename Scalar, int Rows, int Cols, int Options, int MaxRows, int MaxCols>
 290:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** struct evaluator<Array<Scalar, Rows, Cols, Options, MaxRows, MaxCols> >
 291:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   : evaluator<PlainObjectBase<Array<Scalar, Rows, Cols, Options, MaxRows, MaxCols> > >
 292:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** {
 293:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   typedef Array<Scalar, Rows, Cols, Options, MaxRows, MaxCols> XprType;
 294:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 295:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 296:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   evaluator() {}
ARM GAS  /tmp/ccw5fbVv.s 			page 132


 297:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 298:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 299:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   explicit evaluator(const XprType& m)
 300:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     : evaluator<PlainObjectBase<XprType> >(m)
 301:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   { }
 302:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** };
 303:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 304:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // -------------------- Transpose --------------------
 305:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 306:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** template<typename ArgType>
 307:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** struct unary_evaluator<Transpose<ArgType>, IndexBased>
 308:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   : evaluator_base<Transpose<ArgType> >
 309:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** {
 310:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   typedef Transpose<ArgType> XprType;
 311:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 312:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   enum {
 313:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     CoeffReadCost = evaluator<ArgType>::CoeffReadCost,
 314:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     Flags = evaluator<ArgType>::Flags ^ RowMajorBit,
 315:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     Alignment = evaluator<ArgType>::Alignment
 316:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   };
 317:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 318:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 319:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   explicit unary_evaluator(const XprType& t) : m_argImpl(t.nestedExpression()) {}
 320:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 321:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   typedef typename XprType::Scalar Scalar;
 322:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   typedef typename XprType::CoeffReturnType CoeffReturnType;
 323:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 324:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 325:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   CoeffReturnType coeff(Index row, Index col) const
 326:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
 327:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return m_argImpl.coeff(col, row);
 328:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 329:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 330:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 331:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   CoeffReturnType coeff(Index index) const
 332:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
 333:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return m_argImpl.coeff(index);
 334:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 335:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 336:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 337:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   Scalar& coeffRef(Index row, Index col)
 338:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
 339:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return m_argImpl.coeffRef(col, row);
 340:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 341:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 342:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 343:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   typename XprType::Scalar& coeffRef(Index index)
 344:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
 345:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return m_argImpl.coeffRef(index);
 346:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 347:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 348:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   template<int LoadMode, typename PacketType>
 349:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_STRONG_INLINE
 350:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   PacketType packet(Index row, Index col) const
 351:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
 352:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return m_argImpl.template packet<LoadMode,PacketType>(col, row);
 353:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
ARM GAS  /tmp/ccw5fbVv.s 			page 133


 354:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 355:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   template<int LoadMode, typename PacketType>
 356:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_STRONG_INLINE
 357:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   PacketType packet(Index index) const
 358:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
 359:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return m_argImpl.template packet<LoadMode,PacketType>(index);
 360:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 361:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 362:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   template<int StoreMode, typename PacketType>
 363:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_STRONG_INLINE
 364:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   void writePacket(Index row, Index col, const PacketType& x)
 365:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
 366:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     m_argImpl.template writePacket<StoreMode,PacketType>(col, row, x);
 367:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 368:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 369:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   template<int StoreMode, typename PacketType>
 370:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_STRONG_INLINE
 371:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   void writePacket(Index index, const PacketType& x)
 372:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
 373:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     m_argImpl.template writePacket<StoreMode,PacketType>(index, x);
 374:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 375:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 376:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** protected:
 377:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   evaluator<ArgType> m_argImpl;
 378:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** };
 379:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 380:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // -------------------- CwiseNullaryOp --------------------
 381:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // Like Matrix and Array, this is not really a unary expression, so we directly specialize evaluato
 382:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // Likewise, there is not need to more sophisticated dispatching here.
 383:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 384:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** template<typename Scalar,typename NullaryOp,
 385:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****          bool has_nullary = has_nullary_operator<NullaryOp>::value,
 386:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****          bool has_unary   = has_unary_operator<NullaryOp>::value,
 387:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****          bool has_binary  = has_binary_operator<NullaryOp>::value>
 388:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** struct nullary_wrapper
 389:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** {
 390:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   template <typename IndexType>
 391:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar operator()(const NullaryOp& op, IndexType i, IndexTy
 392:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   template <typename IndexType>
 393:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar operator()(const NullaryOp& op, IndexType i) const {
 394:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 395:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   template <typename T, typename IndexType> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE T packetOp(const 
 396:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   template <typename T, typename IndexType> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE T packetOp(const 
 397:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** };
 398:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 399:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** template<typename Scalar,typename NullaryOp>
 400:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** struct nullary_wrapper<Scalar,NullaryOp,true,false,false>
 401:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** {
 402:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   template <typename IndexType>
 403:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar operator()(const NullaryOp& op, IndexType=0, IndexTy
 404:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   template <typename T, typename IndexType> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE T packetOp(const 
 405:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** };
 406:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 407:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** template<typename Scalar,typename NullaryOp>
 408:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** struct nullary_wrapper<Scalar,NullaryOp,false,false,true>
 409:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** {
 410:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   template <typename IndexType>
ARM GAS  /tmp/ccw5fbVv.s 			page 134


 411:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar operator()(const NullaryOp& op, IndexType i, IndexTy
 412:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   template <typename T, typename IndexType> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE T packetOp(const 
 413:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** };
 414:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 415:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // We need the following specialization for vector-only functors assigned to a runtime vector,
 416:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // for instance, using linspace and assigning a RowVectorXd to a MatrixXd or even a row of a Matrix
 417:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // In this case, i==0 and j is used for the actual iteration.
 418:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** template<typename Scalar,typename NullaryOp>
 419:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** struct nullary_wrapper<Scalar,NullaryOp,false,true,false>
 420:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** {
 421:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   template <typename IndexType>
 422:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar operator()(const NullaryOp& op, IndexType i, IndexTy
 423:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     eigen_assert(i==0 || j==0);
 424:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return op(i+j);
 425:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 426:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   template <typename T, typename IndexType> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE T packetOp(const 
 427:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     eigen_assert(i==0 || j==0);
 428:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return op.template packetOp<T>(i+j);
 429:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 430:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 431:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   template <typename IndexType>
 432:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar operator()(const NullaryOp& op, IndexType i) const {
 433:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   template <typename T, typename IndexType>
 434:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE T packetOp(const NullaryOp& op, IndexType i) const { return
 435:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** };
 436:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 437:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** template<typename Scalar,typename NullaryOp>
 438:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** struct nullary_wrapper<Scalar,NullaryOp,false,false,false> {};
 439:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 440:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** #if 0 && EIGEN_COMP_MSVC>0
 441:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // Disable this ugly workaround. This is now handled in traits<Ref>::match,
 442:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // but this piece of code might still become handly if some other weird compilation
 443:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // erros pop up again.
 444:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 445:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // MSVC exhibits a weird compilation error when
 446:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // compiling:
 447:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** //    Eigen::MatrixXf A = MatrixXf::Random(3,3);
 448:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** //    Ref<const MatrixXf> R = 2.f*A;
 449:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // and that has_*ary_operator<scalar_constant_op<float>> have not been instantiated yet.
 450:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // The "problem" is that evaluator<2.f*A> is instantiated by traits<Ref>::match<2.f*A>
 451:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // and at that time has_*ary_operator<T> returns true regardless of T.
 452:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // Then nullary_wrapper is badly instantiated as nullary_wrapper<.,.,true,true,true>.
 453:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // The trick is thus to defer the proper instantiation of nullary_wrapper when coeff(),
 454:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // and packet() are really instantiated as implemented below:
 455:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 456:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // This is a simple wrapper around Index to enforce the re-instantiation of
 457:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // has_*ary_operator when needed.
 458:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** template<typename T> struct nullary_wrapper_workaround_msvc {
 459:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   nullary_wrapper_workaround_msvc(const T&);
 460:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   operator T()const;
 461:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** };
 462:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 463:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** template<typename Scalar,typename NullaryOp>
 464:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** struct nullary_wrapper<Scalar,NullaryOp,true,true,true>
 465:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** {
 466:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   template <typename IndexType>
 467:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar operator()(const NullaryOp& op, IndexType i, IndexTy
ARM GAS  /tmp/ccw5fbVv.s 			page 135


 468:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return nullary_wrapper<Scalar,NullaryOp,
 469:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     has_nullary_operator<NullaryOp,nullary_wrapper_workaround_msvc<IndexType> >::value,
 470:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     has_unary_operator<NullaryOp,nullary_wrapper_workaround_msvc<IndexType> >::value,
 471:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     has_binary_operator<NullaryOp,nullary_wrapper_workaround_msvc<IndexType> >::value>().operator()
 472:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 473:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   template <typename IndexType>
 474:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar operator()(const NullaryOp& op, IndexType i) const {
 475:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return nullary_wrapper<Scalar,NullaryOp,
 476:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     has_nullary_operator<NullaryOp,nullary_wrapper_workaround_msvc<IndexType> >::value,
 477:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     has_unary_operator<NullaryOp,nullary_wrapper_workaround_msvc<IndexType> >::value,
 478:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     has_binary_operator<NullaryOp,nullary_wrapper_workaround_msvc<IndexType> >::value>().operator()
 479:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 480:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 481:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   template <typename T, typename IndexType>
 482:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE T packetOp(const NullaryOp& op, IndexType i, IndexType j) c
 483:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return nullary_wrapper<Scalar,NullaryOp,
 484:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     has_nullary_operator<NullaryOp,nullary_wrapper_workaround_msvc<IndexType> >::value,
 485:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     has_unary_operator<NullaryOp,nullary_wrapper_workaround_msvc<IndexType> >::value,
 486:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     has_binary_operator<NullaryOp,nullary_wrapper_workaround_msvc<IndexType> >::value>().template p
 487:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 488:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   template <typename T, typename IndexType>
 489:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE T packetOp(const NullaryOp& op, IndexType i) const {
 490:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return nullary_wrapper<Scalar,NullaryOp,
 491:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     has_nullary_operator<NullaryOp,nullary_wrapper_workaround_msvc<IndexType> >::value,
 492:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     has_unary_operator<NullaryOp,nullary_wrapper_workaround_msvc<IndexType> >::value,
 493:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     has_binary_operator<NullaryOp,nullary_wrapper_workaround_msvc<IndexType> >::value>().template p
 494:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 495:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** };
 496:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** #endif // MSVC workaround
 497:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 498:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** template<typename NullaryOp, typename PlainObjectType>
 499:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** struct evaluator<CwiseNullaryOp<NullaryOp,PlainObjectType> >
 500:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   : evaluator_base<CwiseNullaryOp<NullaryOp,PlainObjectType> >
 501:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** {
 502:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   typedef CwiseNullaryOp<NullaryOp,PlainObjectType> XprType;
 503:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   typedef internal::remove_all_t<PlainObjectType> PlainObjectTypeCleaned;
 504:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 505:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   enum {
 506:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     CoeffReadCost = internal::functor_traits<NullaryOp>::Cost,
 507:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 508:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     Flags = (evaluator<PlainObjectTypeCleaned>::Flags
 509:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****           &  (  HereditaryBits
 510:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****               | (functor_has_linear_access<NullaryOp>::ret  ? LinearAccessBit : 0)
 511:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****               | (functor_traits<NullaryOp>::PacketAccess    ? PacketAccessBit : 0)))
 512:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****           | (functor_traits<NullaryOp>::IsRepeatable ? 0 : EvalBeforeNestingBit),
 513:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     Alignment = AlignedMax
 514:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   };
 515:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 516:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC explicit evaluator(const XprType& n)
 517:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     : m_functor(n.functor()), m_wrapper()
 518:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
 519:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     EIGEN_INTERNAL_CHECK_COST_VALUE(CoeffReadCost);
 520:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 521:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 522:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   typedef typename XprType::CoeffReturnType CoeffReturnType;
 523:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 524:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   template <typename IndexType>
ARM GAS  /tmp/ccw5fbVv.s 			page 136


 525:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 526:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   CoeffReturnType coeff(IndexType row, IndexType col) const
 527:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
 528:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return m_wrapper(m_functor, row, col);
 529:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 530:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 531:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   template <typename IndexType>
 532:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 533:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   CoeffReturnType coeff(IndexType index) const
 534:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
 535:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return m_wrapper(m_functor,index);
 536:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 537:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 538:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   template<int LoadMode, typename PacketType, typename IndexType>
 539:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_STRONG_INLINE
 540:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   PacketType packet(IndexType row, IndexType col) const
 541:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
 542:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return m_wrapper.template packetOp<PacketType>(m_functor, row, col);
 543:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 544:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 545:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   template<int LoadMode, typename PacketType, typename IndexType>
 546:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_STRONG_INLINE
 547:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   PacketType packet(IndexType index) const
 548:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
 549:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return m_wrapper.template packetOp<PacketType>(m_functor, index);
 550:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 551:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 552:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** protected:
 553:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   const NullaryOp m_functor;
 554:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   const internal::nullary_wrapper<CoeffReturnType,NullaryOp> m_wrapper;
 555:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** };
 556:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 557:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // -------------------- CwiseUnaryOp --------------------
 558:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 559:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** template<typename UnaryOp, typename ArgType>
 560:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** struct unary_evaluator<CwiseUnaryOp<UnaryOp, ArgType>, IndexBased >
 561:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   : evaluator_base<CwiseUnaryOp<UnaryOp, ArgType> >
 562:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** {
 563:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   typedef CwiseUnaryOp<UnaryOp, ArgType> XprType;
 564:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 565:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   enum {
 566:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     CoeffReadCost = int(evaluator<ArgType>::CoeffReadCost) + int(functor_traits<UnaryOp>::Cost),
 567:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 568:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     Flags = evaluator<ArgType>::Flags
 569:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****           & (HereditaryBits | LinearAccessBit | (functor_traits<UnaryOp>::PacketAccess ? PacketAcce
 570:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     Alignment = evaluator<ArgType>::Alignment
 571:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   };
 572:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 573:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 574:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   explicit unary_evaluator(const XprType& op) : m_d(op)
 575:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
 576:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     EIGEN_INTERNAL_CHECK_COST_VALUE(functor_traits<UnaryOp>::Cost);
 577:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     EIGEN_INTERNAL_CHECK_COST_VALUE(CoeffReadCost);
 578:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 579:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 580:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   typedef typename XprType::CoeffReturnType CoeffReturnType;
 581:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
ARM GAS  /tmp/ccw5fbVv.s 			page 137


 582:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 583:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   CoeffReturnType coeff(Index row, Index col) const
 584:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
 585:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return m_d.func()(m_d.argImpl.coeff(row, col));
 586:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 587:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 588:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 589:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   CoeffReturnType coeff(Index index) const
 590:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
 591:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return m_d.func()(m_d.argImpl.coeff(index));
 592:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 593:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 594:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   template<int LoadMode, typename PacketType>
 595:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_STRONG_INLINE
 596:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   PacketType packet(Index row, Index col) const
 597:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
 598:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return m_d.func().packetOp(m_d.argImpl.template packet<LoadMode, PacketType>(row, col));
 599:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 600:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 601:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   template<int LoadMode, typename PacketType>
 602:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_STRONG_INLINE
 603:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   PacketType packet(Index index) const
 604:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
 605:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return m_d.func().packetOp(m_d.argImpl.template packet<LoadMode, PacketType>(index));
 606:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 607:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 608:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** protected:
 609:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 610:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   // this helper permits to completely eliminate the functor if it is empty
 611:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   struct Data
 612:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
 613:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 614:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     Data(const XprType& xpr) : op(xpr.functor()), argImpl(xpr.nestedExpression()) {}
 615:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 616:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     const UnaryOp& func() const { return op; }
 617:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     UnaryOp op;
 618:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     evaluator<ArgType> argImpl;
 619:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   };
 620:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 621:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   Data m_d;
 622:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** };
 623:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 624:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // ----------------------- Casting ---------------------
 625:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 626:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** template <typename SrcType, typename DstType, typename ArgType>
 627:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** struct unary_evaluator<CwiseUnaryOp<core_cast_op<SrcType, DstType>, ArgType>, IndexBased> {
 628:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   using CastOp = core_cast_op<SrcType, DstType>;
 629:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   using XprType = CwiseUnaryOp<CastOp, ArgType>;
 630:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 631:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   // Use the largest packet type by default
 632:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   using SrcPacketType = typename packet_traits<SrcType>::type;
 633:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   static constexpr int SrcPacketSize = unpacket_traits<SrcPacketType>::size;
 634:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   static constexpr int SrcPacketBytes = SrcPacketSize * sizeof(SrcType);
 635:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 636:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   enum {
 637:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     CoeffReadCost = int(evaluator<ArgType>::CoeffReadCost) + int(functor_traits<CastOp>::Cost),
 638:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     PacketAccess = functor_traits<CastOp>::PacketAccess,
ARM GAS  /tmp/ccw5fbVv.s 			page 138


 639:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     ActualPacketAccessBit = PacketAccess ? PacketAccessBit : 0,
 640:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     Flags = evaluator<ArgType>::Flags & (HereditaryBits | LinearAccessBit | ActualPacketAccessBit),
 641:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     IsRowMajor = (evaluator<ArgType>::Flags & RowMajorBit),
 642:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     Alignment = evaluator<ArgType>::Alignment
 643:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   };
 644:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 645:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE explicit unary_evaluator(const XprType& xpr)
 646:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****       : m_argImpl(xpr.nestedExpression()), m_rows(xpr.rows()), m_cols(xpr.cols()) {
 647:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     EIGEN_INTERNAL_CHECK_COST_VALUE(functor_traits<CastOp>::Cost);
 648:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     EIGEN_INTERNAL_CHECK_COST_VALUE(CoeffReadCost);
 649:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 650:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 651:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   template <typename DstPacketType>
 652:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   using AltSrcScalarOp = std::enable_if_t<(unpacket_traits<DstPacketType>::size < SrcPacketSize && 
 653:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   template <typename DstPacketType>
 654:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   using SrcPacketArgs1 = std::enable_if_t<(find_packet_by_size<SrcType, unpacket_traits<DstPacketTy
 655:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   template <typename DstPacketType>
 656:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   using SrcPacketArgs2 = std::enable_if_t<(unpacket_traits<DstPacketType>::size) == (2 * SrcPacketS
 657:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   template <typename DstPacketType>
 658:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   using SrcPacketArgs4 = std::enable_if_t<(unpacket_traits<DstPacketType>::size) == (4 * SrcPacketS
 659:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   template <typename DstPacketType>
 660:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   using SrcPacketArgs8 = std::enable_if_t<(unpacket_traits<DstPacketType>::size) == (8 * SrcPacketS
 661:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 662:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   template <bool UseRowMajor = IsRowMajor, std::enable_if_t<UseRowMajor, bool> = true>
 663:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE bool check_array_bounds(Index, Index col, Index packetSize)
 664:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return col + packetSize <= cols();
 665:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 666:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   template <bool UseRowMajor = IsRowMajor, std::enable_if_t<!UseRowMajor, bool> = true>
 667:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE bool check_array_bounds(Index row, Index, Index packetSize)
 668:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return row + packetSize <= rows();
 669:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 670:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE bool check_array_bounds(Index index, Index packetSize) cons
 671:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return index + packetSize <= size();
 672:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 673:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 674:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE SrcType srcCoeff(Index row, Index col, Index offset) const 
 675:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     Index actualRow = IsRowMajor ? row : row + offset;
 676:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     Index actualCol = IsRowMajor ? col + offset : col;
 677:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return m_argImpl.coeff(actualRow, actualCol);
 678:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 679:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE SrcType srcCoeff(Index index, Index offset) const {
 680:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     Index actualIndex = index + offset;
 681:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return m_argImpl.coeff(actualIndex);
 682:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 683:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 684:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE DstType coeff(Index row, Index col) const {
 685:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return cast<SrcType, DstType>(srcCoeff(row, col, 0));
 686:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 687:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE DstType coeff(Index index) const { return cast<SrcType, Dst
 688:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 689:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   template <int LoadMode, typename PacketType = SrcPacketType>
 690:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_STRONG_INLINE PacketType srcPacket(Index row, Index col, Index offset) const {
 691:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     constexpr int PacketSize = unpacket_traits<PacketType>::size;
 692:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     Index actualRow = IsRowMajor ? row : row + (offset * PacketSize);
 693:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     Index actualCol = IsRowMajor ? col + (offset * PacketSize) : col;
 694:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     eigen_assert(check_array_bounds(actualRow, actualCol, PacketSize) && "Array index out of bounds
 695:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return m_argImpl.template packet<LoadMode, PacketType>(actualRow, actualCol);
ARM GAS  /tmp/ccw5fbVv.s 			page 139


 696:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 697:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   template <int LoadMode, typename PacketType = SrcPacketType>
 698:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_STRONG_INLINE PacketType srcPacket(Index index, Index offset) const {
 699:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     constexpr int PacketSize = unpacket_traits<PacketType>::size;
 700:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     Index actualIndex = index + (offset * PacketSize);
 701:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     eigen_assert(check_array_bounds(actualIndex, PacketSize) && "Array index out of bounds");
 702:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return m_argImpl.template packet<LoadMode, PacketType>(actualIndex);
 703:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 704:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 705:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   // There is no source packet type with equal or fewer elements than DstPacketType.
 706:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   // This is problematic as the evaluation loop may attempt to access data outside the bounds of th
 707:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   // For example, consider the cast utilizing pcast<Packet4f,Packet2d> with an array of size 4: {0.
 708:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   // The first iteration of the evaulation loop will load 16 bytes: {0.0f,1.0f,2.0f,3.0f} and cast 
 709:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   // The second iteration will load 16 bytes: {2.0f,3.0f,?,?}, which is outside the bounds of the a
 710:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 711:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   // Instead, perform runtime check to determine if the load would access data outside the bounds o
 712:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   // If not, perform full load. Otherwise, revert to a scalar loop to perform a partial load.
 713:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   // In either case, perform a vectorized cast of the source packet.
 714:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   template <int LoadMode, typename DstPacketType, AltSrcScalarOp<DstPacketType> = true>
 715:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_STRONG_INLINE DstPacketType packet(Index row, Index col) const {
 716:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     constexpr int DstPacketSize = unpacket_traits<DstPacketType>::size;
 717:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     constexpr int SrcBytesIncrement = DstPacketSize * sizeof(SrcType);
 718:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     constexpr int SrcLoadMode = plain_enum_min(SrcBytesIncrement, LoadMode);
 719:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     SrcPacketType src;
 720:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     if (EIGEN_PREDICT_TRUE(check_array_bounds(row, col, SrcPacketSize))) {
 721:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****       src = srcPacket<SrcLoadMode>(row, col, 0);
 722:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     } else {
 723:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****       Array<SrcType, SrcPacketSize, 1> srcArray;
 724:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****       for (size_t k = 0; k < DstPacketSize; k++) srcArray[k] = srcCoeff(row, col, k);
 725:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****       for (size_t k = DstPacketSize; k < SrcPacketSize; k++) srcArray[k] = SrcType(0);
 726:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****       src = pload<SrcPacketType>(srcArray.data());
 727:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     }
 728:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return pcast<SrcPacketType, DstPacketType>(src);
 729:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 730:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   // Use the source packet type with the same size as DstPacketType, if it exists
 731:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   template <int LoadMode, typename DstPacketType, SrcPacketArgs1<DstPacketType> = true>
 732:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_STRONG_INLINE DstPacketType packet(Index row, Index col) const {
 733:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     constexpr int DstPacketSize = unpacket_traits<DstPacketType>::size;
 734:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     using SizedSrcPacketType = typename find_packet_by_size<SrcType, DstPacketSize>::type;
 735:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     constexpr int SrcBytesIncrement = DstPacketSize * sizeof(SrcType);
 736:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     constexpr int SrcLoadMode = plain_enum_min(SrcBytesIncrement, LoadMode);
 737:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return pcast<SizedSrcPacketType, DstPacketType>(
 738:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****         srcPacket<SrcLoadMode, SizedSrcPacketType>(row, col, 0));
 739:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 740:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   // unpacket_traits<DstPacketType>::size == 2 * SrcPacketSize
 741:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   template <int LoadMode, typename DstPacketType, SrcPacketArgs2<DstPacketType> = true>
 742:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_STRONG_INLINE DstPacketType packet(Index row, Index col) const {
 743:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     constexpr int SrcLoadMode = plain_enum_min(SrcPacketBytes, LoadMode);
 744:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return pcast<SrcPacketType, DstPacketType>(
 745:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****         srcPacket<SrcLoadMode>(row, col, 0), srcPacket<SrcLoadMode>(row, col, 1));
 746:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 747:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   // unpacket_traits<DstPacketType>::size == 4 * SrcPacketSize
 748:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   template <int LoadMode, typename DstPacketType, SrcPacketArgs4<DstPacketType> = true>
 749:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_STRONG_INLINE DstPacketType packet(Index row, Index col) const {
 750:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     constexpr int SrcLoadMode = plain_enum_min(SrcPacketBytes, LoadMode);
 751:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return pcast<SrcPacketType, DstPacketType>(
 752:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****         srcPacket<SrcLoadMode>(row, col, 0), srcPacket<SrcLoadMode>(row, col, 1),
ARM GAS  /tmp/ccw5fbVv.s 			page 140


 753:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****         srcPacket<SrcLoadMode>(row, col, 2), srcPacket<SrcLoadMode>(row, col, 3));
 754:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 755:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   // unpacket_traits<DstPacketType>::size == 8 * SrcPacketSize
 756:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   template <int LoadMode, typename DstPacketType, SrcPacketArgs8<DstPacketType> = true>
 757:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_STRONG_INLINE DstPacketType packet(Index row, Index col) const {
 758:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     constexpr int SrcLoadMode = plain_enum_min(SrcPacketBytes, LoadMode);
 759:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return pcast<SrcPacketType, DstPacketType>(
 760:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****         srcPacket<SrcLoadMode>(row, col, 0), srcPacket<SrcLoadMode>(row, col, 1), 
 761:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****         srcPacket<SrcLoadMode>(row, col, 2), srcPacket<SrcLoadMode>(row, col, 3), 
 762:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****         srcPacket<SrcLoadMode>(row, col, 4), srcPacket<SrcLoadMode>(row, col, 5),
 763:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****         srcPacket<SrcLoadMode>(row, col, 6), srcPacket<SrcLoadMode>(row, col, 7));
 764:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 765:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 766:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   // Analagous routines for linear access.
 767:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   template <int LoadMode, typename DstPacketType, AltSrcScalarOp<DstPacketType> = true>
 768:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_STRONG_INLINE DstPacketType packet(Index index) const {
 769:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     constexpr int DstPacketSize = unpacket_traits<DstPacketType>::size;
 770:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     constexpr int SrcBytesIncrement = DstPacketSize * sizeof(SrcType);
 771:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     constexpr int SrcLoadMode = plain_enum_min(SrcBytesIncrement, LoadMode);
 772:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     SrcPacketType src;
 773:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     if (EIGEN_PREDICT_TRUE(check_array_bounds(index, SrcPacketSize))) {
 774:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****       src = srcPacket<SrcLoadMode>(index, 0);
 775:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     } else {
 776:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****       Array<SrcType, SrcPacketSize, 1> srcArray;
 777:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****       for (size_t k = 0; k < DstPacketSize; k++) srcArray[k] = srcCoeff(index, k);
 778:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****       for (size_t k = DstPacketSize; k < SrcPacketSize; k++) srcArray[k] = SrcType(0);
 779:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****       src = pload<SrcPacketType>(srcArray.data());
 780:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     }
 781:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return pcast<SrcPacketType, DstPacketType>(src);
 782:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 783:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   template <int LoadMode, typename DstPacketType, SrcPacketArgs1<DstPacketType> = true>
 784:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_STRONG_INLINE DstPacketType packet(Index index) const {
 785:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     constexpr int DstPacketSize = unpacket_traits<DstPacketType>::size;
 786:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     using SizedSrcPacketType = typename find_packet_by_size<SrcType, DstPacketSize>::type;
 787:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     constexpr int SrcBytesIncrement = DstPacketSize * sizeof(SrcType);
 788:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     constexpr int SrcLoadMode = plain_enum_min(SrcBytesIncrement, LoadMode);
 789:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return pcast<SizedSrcPacketType, DstPacketType>(
 790:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****         srcPacket<SrcLoadMode, SizedSrcPacketType>(index, 0));
 791:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 792:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   template <int LoadMode, typename DstPacketType, SrcPacketArgs2<DstPacketType> = true>
 793:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_STRONG_INLINE DstPacketType packet(Index index) const {
 794:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     constexpr int SrcLoadMode = plain_enum_min(SrcPacketBytes, LoadMode);
 795:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return pcast<SrcPacketType, DstPacketType>(
 796:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****         srcPacket<SrcLoadMode>(index, 0), srcPacket<SrcLoadMode>(index, 1));
 797:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 798:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   template <int LoadMode, typename DstPacketType, SrcPacketArgs4<DstPacketType> = true>
 799:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_STRONG_INLINE DstPacketType packet(Index index) const {
 800:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     constexpr int SrcLoadMode = plain_enum_min(SrcPacketBytes, LoadMode);
 801:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return pcast<SrcPacketType, DstPacketType>(
 802:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****         srcPacket<SrcLoadMode>(index, 0), srcPacket<SrcLoadMode>(index, 1),
 803:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****         srcPacket<SrcLoadMode>(index, 2), srcPacket<SrcLoadMode>(index, 3));
 804:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 805:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   template <int LoadMode, typename DstPacketType, SrcPacketArgs8<DstPacketType> = true>
 806:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_STRONG_INLINE DstPacketType packet(Index index) const {
 807:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     constexpr int SrcLoadMode = plain_enum_min(SrcPacketBytes, LoadMode);
 808:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return pcast<SrcPacketType, DstPacketType>(
 809:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****         srcPacket<SrcLoadMode>(index, 0), srcPacket<SrcLoadMode>(index, 1),
ARM GAS  /tmp/ccw5fbVv.s 			page 141


 810:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****         srcPacket<SrcLoadMode>(index, 2), srcPacket<SrcLoadMode>(index, 3),
 811:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****         srcPacket<SrcLoadMode>(index, 4), srcPacket<SrcLoadMode>(index, 5),
 812:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****         srcPacket<SrcLoadMode>(index, 6), srcPacket<SrcLoadMode>(index, 7));
 813:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 814:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 815:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   constexpr EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Index rows() const { return m_rows; }
 816:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   constexpr EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Index cols() const { return m_cols; }
 817:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   constexpr EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Index size() const { return m_rows * m_cols; }
 818:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 819:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****  protected:
 820:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   const evaluator<ArgType> m_argImpl;
 821:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   const variable_if_dynamic<Index, XprType::RowsAtCompileTime> m_rows;
 822:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   const variable_if_dynamic<Index, XprType::ColsAtCompileTime> m_cols;
 823:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** };
 824:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 825:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // -------------------- CwiseTernaryOp --------------------
 826:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 827:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // this is a ternary expression
 828:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** template<typename TernaryOp, typename Arg1, typename Arg2, typename Arg3>
 829:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** struct evaluator<CwiseTernaryOp<TernaryOp, Arg1, Arg2, Arg3> >
 830:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   : public ternary_evaluator<CwiseTernaryOp<TernaryOp, Arg1, Arg2, Arg3> >
 831:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** {
 832:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   typedef CwiseTernaryOp<TernaryOp, Arg1, Arg2, Arg3> XprType;
 833:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   typedef ternary_evaluator<CwiseTernaryOp<TernaryOp, Arg1, Arg2, Arg3> > Base;
 834:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 835:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC explicit evaluator(const XprType& xpr) : Base(xpr) {}
 836:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** };
 837:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 838:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** template<typename TernaryOp, typename Arg1, typename Arg2, typename Arg3>
 839:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** struct ternary_evaluator<CwiseTernaryOp<TernaryOp, Arg1, Arg2, Arg3>, IndexBased, IndexBased>
 840:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   : evaluator_base<CwiseTernaryOp<TernaryOp, Arg1, Arg2, Arg3> >
 841:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** {
 842:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   typedef CwiseTernaryOp<TernaryOp, Arg1, Arg2, Arg3> XprType;
 843:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 844:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   enum {
 845:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     CoeffReadCost = int(evaluator<Arg1>::CoeffReadCost) + int(evaluator<Arg2>::CoeffReadCost) + int
 846:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 847:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     Arg1Flags = evaluator<Arg1>::Flags,
 848:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     Arg2Flags = evaluator<Arg2>::Flags,
 849:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     Arg3Flags = evaluator<Arg3>::Flags,
 850:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     SameType = is_same<typename Arg1::Scalar,typename Arg2::Scalar>::value && is_same<typename Arg1
 851:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     StorageOrdersAgree = (int(Arg1Flags)&RowMajorBit)==(int(Arg2Flags)&RowMajorBit) && (int(Arg1Fla
 852:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     Flags0 = (int(Arg1Flags) | int(Arg2Flags) | int(Arg3Flags)) & (
 853:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****         HereditaryBits
 854:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****         | (int(Arg1Flags) & int(Arg2Flags) & int(Arg3Flags) &
 855:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****            ( (StorageOrdersAgree ? LinearAccessBit : 0)
 856:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****            | (functor_traits<TernaryOp>::PacketAccess && StorageOrdersAgree && SameType ? PacketAcc
 857:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****            )
 858:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****         )
 859:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****      ),
 860:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     Flags = (Flags0 & ~RowMajorBit) | (Arg1Flags & RowMajorBit),
 861:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     Alignment = plain_enum_min(
 862:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****             plain_enum_min(evaluator<Arg1>::Alignment, evaluator<Arg2>::Alignment),
 863:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****             evaluator<Arg3>::Alignment)
 864:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   };
 865:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 866:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC explicit ternary_evaluator(const XprType& xpr) : m_d(xpr)
ARM GAS  /tmp/ccw5fbVv.s 			page 142


 867:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
 868:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     EIGEN_INTERNAL_CHECK_COST_VALUE(functor_traits<TernaryOp>::Cost);
 869:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     EIGEN_INTERNAL_CHECK_COST_VALUE(CoeffReadCost);
 870:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 871:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 872:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   typedef typename XprType::CoeffReturnType CoeffReturnType;
 873:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 874:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 875:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   CoeffReturnType coeff(Index row, Index col) const
 876:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
 877:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return m_d.func()(m_d.arg1Impl.coeff(row, col), m_d.arg2Impl.coeff(row, col), m_d.arg3Impl.coef
 878:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 879:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 880:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 881:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   CoeffReturnType coeff(Index index) const
 882:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
 883:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return m_d.func()(m_d.arg1Impl.coeff(index), m_d.arg2Impl.coeff(index), m_d.arg3Impl.coeff(inde
 884:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 885:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 886:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   template<int LoadMode, typename PacketType>
 887:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_STRONG_INLINE
 888:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   PacketType packet(Index row, Index col) const
 889:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
 890:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return m_d.func().packetOp(m_d.arg1Impl.template packet<LoadMode,PacketType>(row, col),
 891:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****                                m_d.arg2Impl.template packet<LoadMode,PacketType>(row, col),
 892:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****                                m_d.arg3Impl.template packet<LoadMode,PacketType>(row, col));
 893:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 894:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 895:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   template<int LoadMode, typename PacketType>
 896:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_STRONG_INLINE
 897:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   PacketType packet(Index index) const
 898:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
 899:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return m_d.func().packetOp(m_d.arg1Impl.template packet<LoadMode,PacketType>(index),
 900:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****                                m_d.arg2Impl.template packet<LoadMode,PacketType>(index),
 901:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****                                m_d.arg3Impl.template packet<LoadMode,PacketType>(index));
 902:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 903:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 904:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** protected:
 905:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   // this helper permits to completely eliminate the functor if it is empty
 906:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   struct Data
 907:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
 908:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 909:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     Data(const XprType& xpr) : op(xpr.functor()), arg1Impl(xpr.arg1()), arg2Impl(xpr.arg2()), arg3I
 910:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 911:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     const TernaryOp& func() const { return op; }
 912:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     TernaryOp op;
 913:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     evaluator<Arg1> arg1Impl;
 914:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     evaluator<Arg2> arg2Impl;
 915:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     evaluator<Arg3> arg3Impl;
 916:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   };
 917:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 918:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   Data m_d;
 919:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** };
 920:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 921:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // -------------------- CwiseBinaryOp --------------------
 922:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 923:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // this is a binary expression
ARM GAS  /tmp/ccw5fbVv.s 			page 143


 924:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** template<typename BinaryOp, typename Lhs, typename Rhs>
 925:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** struct evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 926:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   : public binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 927:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** {
 928:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   typedef CwiseBinaryOp<BinaryOp, Lhs, Rhs> XprType;
 929:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   typedef binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs> > Base;
 930:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 931:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 932:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   explicit evaluator(const XprType& xpr) : Base(xpr) {}
 731              		.loc 21 932 12 view .LVU151
 732              	.LBB1924:
 733              	.LBI1894:
 933:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** };
 934:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 935:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** template<typename BinaryOp, typename Lhs, typename Rhs>
 936:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** struct binary_evaluator<CwiseBinaryOp<BinaryOp, Lhs, Rhs>, IndexBased, IndexBased>
 937:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   : evaluator_base<CwiseBinaryOp<BinaryOp, Lhs, Rhs> >
 938:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** {
 939:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   typedef CwiseBinaryOp<BinaryOp, Lhs, Rhs> XprType;
 940:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 941:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   enum {
 942:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     CoeffReadCost = int(evaluator<Lhs>::CoeffReadCost) + int(evaluator<Rhs>::CoeffReadCost) + int(f
 943:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 944:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     LhsFlags = evaluator<Lhs>::Flags,
 945:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     RhsFlags = evaluator<Rhs>::Flags,
 946:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     SameType = is_same<typename Lhs::Scalar,typename Rhs::Scalar>::value,
 947:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     StorageOrdersAgree = (int(LhsFlags)&RowMajorBit)==(int(RhsFlags)&RowMajorBit),
 948:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     Flags0 = (int(LhsFlags) | int(RhsFlags)) & (
 949:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****         HereditaryBits
 950:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****       | (int(LhsFlags) & int(RhsFlags) &
 951:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****            ( (StorageOrdersAgree ? LinearAccessBit : 0)
 952:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****            | (functor_traits<BinaryOp>::PacketAccess && StorageOrdersAgree && SameType ? PacketAcce
 953:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****            )
 954:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****         )
 955:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****      ),
 956:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     Flags = (Flags0 & ~RowMajorBit) | (LhsFlags & RowMajorBit),
 957:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     Alignment = plain_enum_min(evaluator<Lhs>::Alignment, evaluator<Rhs>::Alignment)
 958:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   };
 959:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 960:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 961:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   explicit binary_evaluator(const XprType& xpr) : m_d(xpr)
 734              		.loc 21 961 12 view .LVU152
 735              	.LBB1922:
 736              	.LBI1922:
 123:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 737              		.loc 21 123 41 view .LVU153
 123:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 738              		.loc 21 123 41 is_stmt 0 view .LVU154
 739              	.LBE1922:
 740              	.LBB1923:
 741              	.LBI1895:
 962:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
 963:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     EIGEN_INTERNAL_CHECK_COST_VALUE(functor_traits<BinaryOp>::Cost);
 964:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     EIGEN_INTERNAL_CHECK_COST_VALUE(CoeffReadCost);
 965:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 966:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 967:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   typedef typename XprType::CoeffReturnType CoeffReturnType;
ARM GAS  /tmp/ccw5fbVv.s 			page 144


 968:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 969:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 970:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   CoeffReturnType coeff(Index row, Index col) const
 971:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
 972:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return m_d.func()(m_d.lhsImpl.coeff(row, col), m_d.rhsImpl.coeff(row, col));
 973:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 974:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 975:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
 976:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   CoeffReturnType coeff(Index index) const
 977:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
 978:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return m_d.func()(m_d.lhsImpl.coeff(index), m_d.rhsImpl.coeff(index));
 979:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 980:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 981:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   template<int LoadMode, typename PacketType>
 982:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_STRONG_INLINE
 983:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   PacketType packet(Index row, Index col) const
 984:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
 985:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return m_d.func().packetOp(m_d.lhsImpl.template packet<LoadMode,PacketType>(row, col),
 986:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****                                m_d.rhsImpl.template packet<LoadMode,PacketType>(row, col));
 987:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 988:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 989:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   template<int LoadMode, typename PacketType>
 990:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_STRONG_INLINE
 991:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   PacketType packet(Index index) const
 992:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
 993:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return m_d.func().packetOp(m_d.lhsImpl.template packet<LoadMode,PacketType>(index),
 994:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****                                m_d.rhsImpl.template packet<LoadMode,PacketType>(index));
 995:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 996:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 997:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** protected:
 998:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
 999:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   // this helper permits to completely eliminate the functor if it is empty
1000:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   struct Data
1001:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
1002:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
1003:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     Data(const XprType& xpr) : op(xpr.functor()), lhsImpl(xpr.lhs()), rhsImpl(xpr.rhs()) {}
 742              		.loc 21 1003 5 is_stmt 1 view .LVU155
 743              	.LBB1909:
 744              	.LBI1909:
 140:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h **** 
 745              		.loc 19 140 21 view .LVU156
 140:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h **** 
 746              		.loc 19 140 21 is_stmt 0 view .LVU157
 747              	.LBE1909:
 748              	.LBB1910:
 749              	.LBI1910:
 134:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****     /** \returns the right hand side nested expression */
 750              		.loc 19 134 23 is_stmt 1 view .LVU158
 134:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****     /** \returns the right hand side nested expression */
 751              		.loc 19 134 23 is_stmt 0 view .LVU159
 752              	.LBE1910:
 753              	.LBB1911:
 754              	.LBI1896:
 106:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** };
 755              		.loc 21 106 12 is_stmt 1 view .LVU160
 756              	.LBB1908:
 757              	.LBI1897:
ARM GAS  /tmp/ccw5fbVv.s 			page 145


 284:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     : evaluator<PlainObjectBase<XprType> >(m)
 758              		.loc 21 284 12 view .LVU161
 759              	.LBB1907:
 760              	.LBI1898:
 197:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())
 761              		.loc 21 197 12 view .LVU162
 762              	.LBB1903:
 763              	.LBI1903:
 123:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 764              		.loc 21 123 41 view .LVU163
 123:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 765              		.loc 21 123 41 is_stmt 0 view .LVU164
 766              	.LBE1903:
 767              	.LBB1904:
 768              	.LBI1899:
 153:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** 
 154:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     /** This is an overloaded version of DenseCoeffsBase<Derived,ReadOnlyAccessors>::coeff(Index,In
 155:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****       * provided to by-pass the creation of an evaluator of the expression, thus saving compilation
 156:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****       *
 157:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****       * See DenseCoeffsBase<Derived,ReadOnlyAccessors>::coeff(Index) const for details. */
 158:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE constexpr const Scalar& coeff(Index rowId, Index colId) c
 159:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****       if (Flags & RowMajorBit)
 160:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****         return m_storage.data()[colId + rowId * m_storage.cols()];
 161:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****       else  // column-major
 162:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****         return m_storage.data()[rowId + colId * m_storage.rows()];
 163:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     }
 164:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** 
 165:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     /** This is an overloaded version of DenseCoeffsBase<Derived,ReadOnlyAccessors>::coeff(Index) c
 166:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****       * provided to by-pass the creation of an evaluator of the expression, thus saving compilation
 167:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****       *
 168:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****       * See DenseCoeffsBase<Derived,ReadOnlyAccessors>::coeff(Index) const for details. */
 169:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC
 170:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     EIGEN_STRONG_INLINE const Scalar& coeff(Index index) const
 171:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     {
 172:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****       return m_storage.data()[index];
 173:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     }
 174:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** 
 175:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     /** This is an overloaded version of DenseCoeffsBase<Derived,WriteAccessors>::coeffRef(Index,In
 176:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****       * provided to by-pass the creation of an evaluator of the expression, thus saving compilation
 177:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****       *
 178:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****       * See DenseCoeffsBase<Derived,WriteAccessors>::coeffRef(Index,Index) const for details. */
 179:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE constexpr Scalar& coeffRef(Index rowId, Index colId) {
 180:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****       if (Flags & RowMajorBit)
 181:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****         return m_storage.data()[colId + rowId * m_storage.cols()];
 182:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****       else  // column-major
 183:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****         return m_storage.data()[rowId + colId * m_storage.rows()];
 184:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     }
 185:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** 
 186:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     /** This is an overloaded version of DenseCoeffsBase<Derived,WriteAccessors>::coeffRef(Index) c
 187:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****       * provided to by-pass the creation of an evaluator of the expression, thus saving compilation
 188:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****       *
 189:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****       * See DenseCoeffsBase<Derived,WriteAccessors>::coeffRef(Index) const for details. */
 190:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE constexpr Scalar& coeffRef(Index index) { return m_storag
 191:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** 
 192:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     /** This is the const version of coeffRef(Index,Index) which is thus synonym of coeff(Index,Ind
 193:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****       * It is provided for convenience. */
 194:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE constexpr const Scalar& coeffRef(Index rowId, Index colId
ARM GAS  /tmp/ccw5fbVv.s 			page 146


 195:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****       if (Flags & RowMajorBit)
 196:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****         return m_storage.data()[colId + rowId * m_storage.cols()];
 197:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****       else  // column-major
 198:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****         return m_storage.data()[rowId + colId * m_storage.rows()];
 199:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     }
 200:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** 
 201:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     /** This is the const version of coeffRef(Index) which is thus synonym of coeff(Index).
 202:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****       * It is provided for convenience. */
 203:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE constexpr const Scalar& coeffRef(Index index) const {
 204:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****       return m_storage.data()[index];
 205:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     }
 206:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** 
 207:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     /** \internal */
 208:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     template<int LoadMode>
 209:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     EIGEN_STRONG_INLINE PacketScalar packet(Index rowId, Index colId) const
 210:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     {
 211:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****       return internal::ploadt<PacketScalar, LoadMode>
 212:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****                (m_storage.data() + (Flags & RowMajorBit
 213:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****                                    ? colId + rowId * m_storage.cols()
 214:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****                                    : rowId + colId * m_storage.rows()));
 215:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     }
 216:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** 
 217:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     /** \internal */
 218:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     template<int LoadMode>
 219:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     EIGEN_STRONG_INLINE PacketScalar packet(Index index) const
 220:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     {
 221:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****       return internal::ploadt<PacketScalar, LoadMode>(m_storage.data() + index);
 222:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     }
 223:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** 
 224:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     /** \internal */
 225:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     template<int StoreMode>
 226:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     EIGEN_STRONG_INLINE void writePacket(Index rowId, Index colId, const PacketScalar& val)
 227:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     {
 228:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****       internal::pstoret<Scalar, PacketScalar, StoreMode>
 229:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****               (m_storage.data() + (Flags & RowMajorBit
 230:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****                                    ? colId + rowId * m_storage.cols()
 231:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****                                    : rowId + colId * m_storage.rows()), val);
 232:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     }
 233:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** 
 234:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     /** \internal */
 235:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     template<int StoreMode>
 236:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     EIGEN_STRONG_INLINE void writePacket(Index index, const PacketScalar& val)
 237:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     {
 238:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****       internal::pstoret<Scalar, PacketScalar, StoreMode>(m_storage.data() + index, val);
 239:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     }
 240:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** 
 241:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     /** \returns a const pointer to the data array of this matrix */
 242:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar *data() const
 769              		.loc 7 242 57 is_stmt 1 view .LVU165
 770              	.LBB1902:
 771              	.LBI1900:
 772              		.loc 5 682 32 view .LVU166
 773              		.loc 5 682 32 is_stmt 0 view .LVU167
 774              	.LBE1902:
 775              	.LBE1904:
 776              	.LBB1905:
 777              	.LBI1905:
ARM GAS  /tmp/ccw5fbVv.s 			page 147


 141:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
 778              		.loc 21 141 3 is_stmt 1 view .LVU168
 779              	.LBB1906:
 780              	.LBI1906:
 781              		.file 22 "../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h"
   1:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // This file is part of Eigen, a lightweight C++ template library
   2:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // for linear algebra.
   3:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //
   4:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // Copyright (C) 2008-2015 Gael Guennebaud <gael.guennebaud@inria.fr>
   5:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // Copyright (C) 2006-2008 Benoit Jacob <jacob.benoit.1@gmail.com>
   6:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //
   7:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // This Source Code Form is subject to the terms of the Mozilla
   8:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // Public License v. 2.0. If a copy of the MPL was not distributed
   9:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
  10:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
  11:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #ifndef EIGEN_MACROS_H
  12:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #define EIGEN_MACROS_H
  13:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #include "../InternalHeaderCheck.h"
  14:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
  15:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //------------------------------------------------------------------------------------------
  16:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // Eigen version and basic defaults
  17:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //------------------------------------------------------------------------------------------
  18:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
  19:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #define EIGEN_WORLD_VERSION 3
  20:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #define EIGEN_MAJOR_VERSION 4
  21:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #define EIGEN_MINOR_VERSION 90
  22:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
  23:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #define EIGEN_VERSION_AT_LEAST(x,y,z) (EIGEN_WORLD_VERSION>x || (EIGEN_WORLD_VERSION>=x && \
  24:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****                                       (EIGEN_MAJOR_VERSION>y || (EIGEN_MAJOR_VERSION>=y && \
  25:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****                                                                  EIGEN_MINOR_VERSION>=z))))
  26:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
  27:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #ifdef EIGEN_DEFAULT_TO_ROW_MAJOR
  28:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #define EIGEN_DEFAULT_MATRIX_STORAGE_ORDER_OPTION Eigen::RowMajor
  29:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
  30:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #define EIGEN_DEFAULT_MATRIX_STORAGE_ORDER_OPTION Eigen::ColMajor
  31:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
  32:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
  33:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #ifndef EIGEN_DEFAULT_DENSE_INDEX_TYPE
  34:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #define EIGEN_DEFAULT_DENSE_INDEX_TYPE std::ptrdiff_t
  35:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
  36:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
  37:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // Upperbound on the C++ version to use.
  38:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // Expected values are 03, 11, 14, 17, etc.
  39:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // By default, let's use an arbitrarily large C++ version.
  40:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #ifndef EIGEN_MAX_CPP_VER
  41:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #define EIGEN_MAX_CPP_VER 99
  42:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
  43:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
  44:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** /** Allows to disable some optimizations which might affect the accuracy of the result.
  45:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   * Such optimization are enabled by default, and set EIGEN_FAST_MATH to 0 to disable them.
  46:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   * They currently include:
  47:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   *   - single precision ArrayBase::sin() and ArrayBase::cos() for SSE and AVX vectorization.
  48:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   */
  49:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #ifndef EIGEN_FAST_MATH
  50:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #define EIGEN_FAST_MATH 1
  51:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
  52:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
ARM GAS  /tmp/ccw5fbVv.s 			page 148


  53:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #ifndef EIGEN_STACK_ALLOCATION_LIMIT
  54:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // 131072 == 128 KB
  55:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #define EIGEN_STACK_ALLOCATION_LIMIT 131072
  56:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
  57:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
  58:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //------------------------------------------------------------------------------------------
  59:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // Compiler identification, EIGEN_COMP_*
  60:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //------------------------------------------------------------------------------------------
  61:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
  62:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** /// \internal EIGEN_COMP_GNUC set to version (e.g., 951 for GCC 9.5.1) for all compilers compatible
  63:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #ifdef __GNUC__
  64:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_COMP_GNUC (__GNUC__*100+__GNUC_MINOR__*10+__GNUC_PATCHLEVEL__)
  65:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
  66:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_COMP_GNUC 0
  67:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
  68:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
  69:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** /// \internal EIGEN_COMP_CLANG set to version (e.g., 372 for clang 3.7.2) if the compiler is clang
  70:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if defined(__clang__)
  71:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_COMP_CLANG (__clang_major__*100+__clang_minor__*10+__clang_patchlevel__)
  72:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
  73:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_COMP_CLANG 0
  74:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
  75:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
  76:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** /// \internal EIGEN_COMP_CLANGAPPLE set to the version number (e.g. 9000000 for AppleClang 9.0) if 
  77:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if defined(__clang__) && defined(__apple_build_version__)
  78:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_COMP_CLANGAPPLE __apple_build_version__
  79:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
  80:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_COMP_CLANGAPPLE 0
  81:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
  82:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
  83:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** /// \internal EIGEN_COMP_CASTXML set to 1 if being preprocessed by CastXML
  84:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if defined(__castxml__)
  85:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_COMP_CASTXML 1
  86:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
  87:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_COMP_CASTXML 0
  88:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
  89:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
  90:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** /// \internal EIGEN_COMP_LLVM set to 1 if the compiler backend is llvm
  91:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if defined(__llvm__)
  92:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_COMP_LLVM 1
  93:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
  94:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_COMP_LLVM 0
  95:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
  96:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
  97:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** /// \internal EIGEN_COMP_ICC set to __INTEL_COMPILER if the compiler is Intel icc compiler, 0 other
  98:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if defined(__INTEL_COMPILER)
  99:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_COMP_ICC __INTEL_COMPILER
 100:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 101:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_COMP_ICC 0
 102:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 103:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 104:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** /// \internal EIGEN_COMP_CLANGICC set to __INTEL_CLANG_COMPILER if the compiler is Intel icx compil
 105:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if defined(__INTEL_CLANG_COMPILER)
 106:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_COMP_CLANGICC __INTEL_CLANG_COMPILER
 107:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 108:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_COMP_CLANGICC 0
 109:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
ARM GAS  /tmp/ccw5fbVv.s 			page 149


 110:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 111:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** /// \internal EIGEN_COMP_MINGW set to 1 if the compiler is mingw
 112:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if defined(__MINGW32__)
 113:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_COMP_MINGW 1
 114:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 115:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_COMP_MINGW 0
 116:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 117:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 118:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** /// \internal EIGEN_COMP_SUNCC set to 1 if the compiler is Solaris Studio
 119:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if defined(__SUNPRO_CC)
 120:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_COMP_SUNCC 1
 121:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 122:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_COMP_SUNCC 0
 123:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 124:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 125:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** /// \internal EIGEN_COMP_MSVC set to _MSC_VER if the compiler is Microsoft Visual C++, 0 otherwise.
 126:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if defined(_MSC_VER)
 127:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_COMP_MSVC _MSC_VER
 128:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 129:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_COMP_MSVC 0
 130:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 131:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 132:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if defined(__NVCC__)
 133:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if defined(__CUDACC_VER_MAJOR__) && (__CUDACC_VER_MAJOR__ >= 9)
 134:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_COMP_NVCC  ((__CUDACC_VER_MAJOR__ * 10000) + (__CUDACC_VER_MINOR__ * 100))
 135:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #elif defined(__CUDACC_VER__)
 136:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_COMP_NVCC __CUDACC_VER__
 137:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 138:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #error "NVCC did not define compiler version."
 139:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 140:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 141:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_COMP_NVCC 0
 142:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 143:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 144:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // For the record, here is a table summarizing the possible values for EIGEN_COMP_MSVC:
 145:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //  name        ver   MSC_VER
 146:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //  2015        14      1900
 147:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //  "15"        15      1900
 148:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //  2017-14.1   15.0    1910
 149:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //  2017-14.11  15.3    1911
 150:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //  2017-14.12  15.5    1912
 151:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //  2017-14.13  15.6    1913
 152:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //  2017-14.14  15.7    1914
 153:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //  2017        15.8    1915
 154:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //  2017        15.9    1916
 155:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //  2019 RTW    16.0    1920
 156:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 157:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** /// \internal EIGEN_COMP_MSVC_LANG set to _MSVC_LANG if the compiler is Microsoft Visual C++, 0 oth
 158:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if defined(_MSVC_LANG)
 159:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_COMP_MSVC_LANG _MSVC_LANG
 160:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 161:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_COMP_MSVC_LANG 0
 162:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 163:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 164:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // For the record, here is a table summarizing the possible values for EIGEN_COMP_MSVC_LANG:
 165:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // MSVC option                          Standard  MSVC_LANG
 166:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // /std:c++14 (default as of VS 2019)   C++14     201402L
ARM GAS  /tmp/ccw5fbVv.s 			page 150


 167:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // /std:c++17                           C++17     201703L
 168:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // /std:c++latest                       >C++17    >201703L
 169:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 170:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** /// \internal EIGEN_COMP_MSVC_STRICT set to 1 if the compiler is really Microsoft Visual C++ and no
 171:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if EIGEN_COMP_MSVC && !(EIGEN_COMP_ICC || EIGEN_COMP_LLVM || EIGEN_COMP_CLANG)
 172:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_COMP_MSVC_STRICT _MSC_VER
 173:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 174:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_COMP_MSVC_STRICT 0
 175:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 176:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 177:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** /// \internal EIGEN_COMP_IBM set to xlc version if the compiler is IBM XL C++
 178:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // XLC   version
 179:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // 3.1   0x0301
 180:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // 4.5   0x0405
 181:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // 5.0   0x0500
 182:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // 12.1  0x0C01
 183:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if defined(__IBMCPP__) || defined(__xlc__) || defined(__ibmxl__)
 184:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_COMP_IBM __xlC__
 185:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 186:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_COMP_IBM 0
 187:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 188:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 189:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** /// \internal EIGEN_COMP_PGI set to PGI version if the compiler is Portland Group Compiler
 190:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if defined(__PGI)
 191:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_COMP_PGI (__PGIC__*100+__PGIC_MINOR__)
 192:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 193:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_COMP_PGI 0
 194:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 195:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 196:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** /// \internal EIGEN_COMP_ARM set to 1 if the compiler is ARM Compiler
 197:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if defined(__CC_ARM) || defined(__ARMCC_VERSION)
 198:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_COMP_ARM 1
 199:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 200:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_COMP_ARM 0
 201:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 202:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 203:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** /// \internal EIGEN_COMP_EMSCRIPTEN set to 1 if the compiler is Emscripten Compiler
 204:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if defined(__EMSCRIPTEN__)
 205:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_COMP_EMSCRIPTEN 1
 206:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 207:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_COMP_EMSCRIPTEN 0
 208:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 209:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 210:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** /// \internal EIGEN_COMP_FCC set to FCC version if the compiler is Fujitsu Compiler (traditional mo
 211:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** /// \note The Fujitsu C/C++ compiler uses the traditional mode based
 212:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** /// on EDG g++ 6.1 by default or if envoked with the -Nnoclang flag
 213:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if defined(__FUJITSU)
 214:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_COMP_FCC (__FCC_major__*100+__FCC_minor__*10+__FCC_patchlevel__)
 215:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 216:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_COMP_FCC 0
 217:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 218:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 219:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** /// \internal EIGEN_COMP_CLANGFCC set to FCC version if the compiler is Fujitsu Compiler (Clang mod
 220:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** /// \note The Fujitsu C/C++ compiler uses the non-traditional mode
 221:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** /// based on Clang 7.1.0 if envoked with the -Nclang flag
 222:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if defined(__CLANG_FUJITSU)
 223:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_COMP_CLANGFCC (__FCC_major__*100+__FCC_minor__*10+__FCC_patchlevel__)
ARM GAS  /tmp/ccw5fbVv.s 			page 151


 224:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 225:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_COMP_CLANGFCC 0
 226:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 227:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 228:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** /// \internal EIGEN_COMP_CPE set to CPE version if the compiler is HPE Cray Compiler (GCC based)
 229:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** /// \note This is the SVE-enabled C/C++ compiler from the HPE Cray
 230:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** /// Programming Environment (CPE) based on Cray GCC 8.1
 231:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if defined(_CRAYC) && !defined(__clang__)
 232:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_COMP_CPE (_RELEASE_MAJOR*100+_RELEASE_MINOR*10+_RELEASE_PATCHLEVEL)
 233:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 234:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_COMP_CPE 0
 235:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 236:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 237:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** /// \internal EIGEN_COMP_CLANGCPE set to CPE version if the compiler is HPE Cray Compiler (Clang ba
 238:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** /// \note This is the C/C++ compiler from the HPE Cray Programming
 239:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** /// Environment (CPE) based on Cray Clang 11.0 without SVE-support
 240:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if defined(_CRAYC) && defined(__clang__)
 241:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_COMP_CLANGCPE (_RELEASE_MAJOR*100+_RELEASE_MINOR*10+_RELEASE_PATCHLEVEL)
 242:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 243:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_COMP_CLANGCPE 0
 244:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 245:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 246:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** /// \internal EIGEN_COMP_LCC set to 1 if the compiler is MCST-LCC (MCST eLbrus Compiler Collection)
 247:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if defined(__LCC__) && defined(__MCST__)
 248:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_COMP_LCC (__LCC__*100+__LCC_MINOR__)
 249:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 250:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_COMP_LCC 0
 251:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 252:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 253:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 254:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** /// \internal EIGEN_COMP_GNUC_STRICT set to 1 if the compiler is really GCC and not a compatible co
 255:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if EIGEN_COMP_GNUC && !(EIGEN_COMP_CLANG || EIGEN_COMP_ICC || EIGEN_COMP_CLANGICC || EIGEN_COMP_MI
 256:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_COMP_GNUC_STRICT 1
 257:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 258:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_COMP_GNUC_STRICT 0
 259:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 260:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 261:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // GCC, and compilers that pretend to be it, have different version schemes, so this only makes sen
 262:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if EIGEN_COMP_GNUC_STRICT
 263:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_GNUC_STRICT_AT_LEAST(x,y,z)  ((__GNUC__ > x) || \
 264:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****                                               (__GNUC__ == x && __GNUC_MINOR__ > y) || \
 265:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****                                               (__GNUC__ == x && __GNUC_MINOR__ == y && __GNUC_PATCH
 266:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_GNUC_STRICT_LESS_THAN(x,y,z) ((__GNUC__ < x) || \
 267:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****                                               (__GNUC__ == x && __GNUC_MINOR__ < y) || \
 268:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****                                               (__GNUC__ == x && __GNUC_MINOR__ == y && __GNUC_PATCH
 269:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 270:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_GNUC_STRICT_AT_LEAST(x,y,z)  0
 271:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_GNUC_STRICT_LESS_THAN(x,y,z) 0
 272:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 273:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 274:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 275:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 276:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** /// \internal EIGEN_COMP_CLANG_STRICT set to 1 if the compiler is really Clang and not a compatible
 277:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if EIGEN_COMP_CLANG && !(EIGEN_COMP_CLANGAPPLE || EIGEN_COMP_CLANGICC || EIGEN_COMP_CLANGFCC || EI
 278:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_COMP_CLANG_STRICT 1
 279:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 280:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_COMP_CLANG_STRICT 0
ARM GAS  /tmp/ccw5fbVv.s 			page 152


 281:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 282:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 283:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // Clang, and compilers forked from it, have different version schemes, so this only makes sense to
 284:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if EIGEN_COMP_CLANG_STRICT
 285:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_CLANG_STRICT_AT_LEAST(x,y,z)  ((__clang_major__ > x) || \
 286:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****                                                (__clang_major__ == x && __clang_minor__ > y) || \
 287:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****                                                (__clang_major__ == x && __clang_minor__ == y && __c
 288:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_CLANG_STRICT_LESS_THAN(x,y,z) ((__clang_major__ < x) || \
 289:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****                                                (__clang_major__ == x && __clang_minor__ < y) || \
 290:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****                                                (__clang_major__ == x && __clang_minor__ == y && __c
 291:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 292:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_CLANG_STRICT_AT_LEAST(x,y,z)  0
 293:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_CLANG_STRICT_LESS_THAN(x,y,z) 0
 294:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 295:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 296:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //------------------------------------------------------------------------------------------
 297:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // Architecture identification, EIGEN_ARCH_*
 298:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //------------------------------------------------------------------------------------------
 299:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 300:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 301:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if defined(__x86_64__) || (defined(_M_X64) && !defined(_M_ARM64EC)) || defined(__amd64)
 302:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_ARCH_x86_64 1
 303:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 304:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_ARCH_x86_64 0
 305:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 306:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 307:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if defined(__i386__) || defined(_M_IX86) || defined(_X86_) || defined(__i386)
 308:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_ARCH_i386 1
 309:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 310:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_ARCH_i386 0
 311:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 312:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 313:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if EIGEN_ARCH_x86_64 || EIGEN_ARCH_i386
 314:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_ARCH_i386_OR_x86_64 1
 315:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 316:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_ARCH_i386_OR_x86_64 0
 317:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 318:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 319:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** /// \internal EIGEN_ARCH_ARM set to 1 if the architecture is ARM
 320:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if defined(__arm__)
 321:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_ARCH_ARM 1
 322:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 323:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_ARCH_ARM 0
 324:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 325:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 326:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** /// \internal EIGEN_ARCH_ARM64 set to 1 if the architecture is ARM64
 327:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if defined(__aarch64__) || defined(_M_ARM64) || defined(_M_ARM64EC)
 328:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_ARCH_ARM64 1
 329:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 330:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_ARCH_ARM64 0
 331:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 332:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 333:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** /// \internal EIGEN_ARCH_ARM_OR_ARM64 set to 1 if the architecture is ARM or ARM64
 334:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if EIGEN_ARCH_ARM || EIGEN_ARCH_ARM64
 335:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_ARCH_ARM_OR_ARM64 1
 336:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 337:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_ARCH_ARM_OR_ARM64 0
ARM GAS  /tmp/ccw5fbVv.s 			page 153


 338:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 339:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 340:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** /// \internal EIGEN_ARCH_ARMV8 set to 1 if the architecture is armv8 or greater.
 341:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if EIGEN_ARCH_ARM_OR_ARM64 && defined(__ARM_ARCH) && __ARM_ARCH >= 8
 342:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #define EIGEN_ARCH_ARMV8 1
 343:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 344:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #define EIGEN_ARCH_ARMV8 0
 345:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 346:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 347:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 348:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** /// \internal EIGEN_HAS_ARM64_FP16 set to 1 if the architecture provides an IEEE
 349:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** /// compliant Arm fp16 type
 350:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if EIGEN_ARCH_ARM_OR_ARM64
 351:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #ifndef EIGEN_HAS_ARM64_FP16
 352:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****     #if defined(__ARM_FP16_FORMAT_IEEE)
 353:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****       #define EIGEN_HAS_ARM64_FP16 1
 354:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****     #else
 355:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****       #define EIGEN_HAS_ARM64_FP16 0
 356:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****     #endif
 357:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #endif
 358:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 359:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 360:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** /// \internal EIGEN_ARCH_MIPS set to 1 if the architecture is MIPS
 361:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if defined(__mips__) || defined(__mips)
 362:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_ARCH_MIPS 1
 363:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 364:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_ARCH_MIPS 0
 365:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 366:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 367:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** /// \internal EIGEN_ARCH_SPARC set to 1 if the architecture is SPARC
 368:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if defined(__sparc__) || defined(__sparc)
 369:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_ARCH_SPARC 1
 370:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 371:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_ARCH_SPARC 0
 372:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 373:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 374:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** /// \internal EIGEN_ARCH_IA64 set to 1 if the architecture is Intel Itanium
 375:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if defined(__ia64__)
 376:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_ARCH_IA64 1
 377:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 378:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_ARCH_IA64 0
 379:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 380:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 381:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** /// \internal EIGEN_ARCH_PPC set to 1 if the architecture is PowerPC
 382:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if defined(__powerpc__) || defined(__ppc__) || defined(_M_PPC) || defined(__POWERPC__)
 383:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_ARCH_PPC 1
 384:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 385:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_ARCH_PPC 0
 386:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 387:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 388:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 389:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 390:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //------------------------------------------------------------------------------------------
 391:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // Operating system identification, EIGEN_OS_*
 392:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //------------------------------------------------------------------------------------------
 393:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 394:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** /// \internal EIGEN_OS_UNIX set to 1 if the OS is a unix variant
ARM GAS  /tmp/ccw5fbVv.s 			page 154


 395:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if defined(__unix__) || defined(__unix)
 396:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_OS_UNIX 1
 397:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 398:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_OS_UNIX 0
 399:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 400:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 401:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** /// \internal EIGEN_OS_LINUX set to 1 if the OS is based on Linux kernel
 402:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if defined(__linux__)
 403:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_OS_LINUX 1
 404:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 405:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_OS_LINUX 0
 406:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 407:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 408:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** /// \internal EIGEN_OS_ANDROID set to 1 if the OS is Android
 409:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // note: ANDROID is defined when using ndk_build, __ANDROID__ is defined when using a standalone to
 410:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if defined(__ANDROID__) || defined(ANDROID)
 411:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_OS_ANDROID 1
 412:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 413:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_OS_ANDROID 0
 414:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 415:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 416:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** /// \internal EIGEN_OS_GNULINUX set to 1 if the OS is GNU Linux and not Linux-based OS (e.g., not a
 417:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if defined(__gnu_linux__) && !(EIGEN_OS_ANDROID)
 418:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_OS_GNULINUX 1
 419:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 420:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_OS_GNULINUX 0
 421:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 422:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 423:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** /// \internal EIGEN_OS_BSD set to 1 if the OS is a BSD variant
 424:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if defined(__FreeBSD__) || defined(__NetBSD__) || defined(__OpenBSD__) || defined(__bsdi__) || def
 425:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_OS_BSD 1
 426:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 427:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_OS_BSD 0
 428:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 429:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 430:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** /// \internal EIGEN_OS_MAC set to 1 if the OS is MacOS
 431:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if defined(__APPLE__)
 432:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_OS_MAC 1
 433:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 434:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_OS_MAC 0
 435:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 436:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 437:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** /// \internal EIGEN_OS_QNX set to 1 if the OS is QNX
 438:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if defined(__QNX__)
 439:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_OS_QNX 1
 440:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 441:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_OS_QNX 0
 442:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 443:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 444:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** /// \internal EIGEN_OS_WIN set to 1 if the OS is Windows based
 445:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if defined(_WIN32)
 446:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_OS_WIN 1
 447:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 448:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_OS_WIN 0
 449:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 450:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 451:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** /// \internal EIGEN_OS_WIN64 set to 1 if the OS is Windows 64bits
ARM GAS  /tmp/ccw5fbVv.s 			page 155


 452:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if defined(_WIN64)
 453:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_OS_WIN64 1
 454:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 455:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_OS_WIN64 0
 456:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 457:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 458:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** /// \internal EIGEN_OS_WINCE set to 1 if the OS is Windows CE
 459:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if defined(_WIN32_WCE)
 460:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_OS_WINCE 1
 461:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 462:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_OS_WINCE 0
 463:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 464:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 465:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** /// \internal EIGEN_OS_CYGWIN set to 1 if the OS is Windows/Cygwin
 466:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if defined(__CYGWIN__)
 467:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_OS_CYGWIN 1
 468:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 469:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_OS_CYGWIN 0
 470:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 471:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 472:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** /// \internal EIGEN_OS_WIN_STRICT set to 1 if the OS is really Windows and not some variants
 473:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if EIGEN_OS_WIN && !( EIGEN_OS_WINCE || EIGEN_OS_CYGWIN )
 474:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_OS_WIN_STRICT 1
 475:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 476:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_OS_WIN_STRICT 0
 477:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 478:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 479:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** /// \internal EIGEN_OS_SUN set to __SUNPRO_C if the OS is SUN
 480:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // compiler  solaris   __SUNPRO_C
 481:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // version   studio
 482:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // 5.7       10        0x570
 483:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // 5.8       11        0x580
 484:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // 5.9       12        0x590
 485:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // 5.10	     12.1      0x5100
 486:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // 5.11	     12.2      0x5110
 487:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // 5.12	     12.3      0x5120
 488:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if (defined(sun) || defined(__sun)) && !(defined(__SVR4) || defined(__svr4__))
 489:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_OS_SUN __SUNPRO_C
 490:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 491:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_OS_SUN 0
 492:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 493:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 494:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** /// \internal EIGEN_OS_SOLARIS set to 1 if the OS is Solaris
 495:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if (defined(sun) || defined(__sun)) && (defined(__SVR4) || defined(__svr4__))
 496:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_OS_SOLARIS 1
 497:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 498:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_OS_SOLARIS 0
 499:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 500:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 501:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 502:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //------------------------------------------------------------------------------------------
 503:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // Detect GPU compilers and architectures
 504:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //------------------------------------------------------------------------------------------
 505:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 506:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // NVCC is not supported as the target platform for HIPCC
 507:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // Note that this also makes EIGEN_CUDACC and EIGEN_HIPCC mutually exclusive
 508:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if defined(__NVCC__) && defined(__HIPCC__)
ARM GAS  /tmp/ccw5fbVv.s 			page 156


 509:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #error "NVCC as the target platform for HIPCC is currently not supported."
 510:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 511:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 512:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if defined(__CUDACC__) && !defined(EIGEN_NO_CUDA) && !defined(__SYCL_DEVICE_ONLY__)
 513:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   // Means the compiler is either nvcc or clang with CUDA enabled
 514:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_CUDACC __CUDACC__
 515:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 516:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 517:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if defined(__CUDA_ARCH__) && !defined(EIGEN_NO_CUDA) && !defined(__SYCL_DEVICE_ONLY__)
 518:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   // Means we are generating code for the device
 519:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_CUDA_ARCH __CUDA_ARCH__
 520:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 521:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 522:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if defined(EIGEN_CUDACC)
 523:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #include <cuda.h>
 524:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_CUDA_SDK_VER (CUDA_VERSION * 10)
 525:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 526:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_CUDA_SDK_VER 0
 527:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 528:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 529:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if defined(__HIPCC__) && !defined(EIGEN_NO_HIP) && !defined(__SYCL_DEVICE_ONLY__)
 530:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   // Means the compiler is HIPCC (analogous to EIGEN_CUDACC, but for HIP)
 531:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_HIPCC __HIPCC__
 532:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 533:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   // We need to include hip_runtime.h here because it pulls in
 534:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   // ++ hip_common.h which contains the define for  __HIP_DEVICE_COMPILE__
 535:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   // ++ host_defines.h which contains the defines for the __host__ and __device__ macros
 536:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #include <hip/hip_runtime.h>
 537:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 538:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #if defined(__HIP_DEVICE_COMPILE__) && !defined(__SYCL_DEVICE_ONLY__)
 539:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****     // analogous to EIGEN_CUDA_ARCH, but for HIP
 540:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****     #define EIGEN_HIP_DEVICE_COMPILE __HIP_DEVICE_COMPILE__
 541:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #endif
 542:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 543:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   // For HIP (ROCm 3.5 and higher), we need to explicitly set the launch_bounds attribute
 544:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   // value to 1024. The compiler assigns a default value of 256 when the attribute is not
 545:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   // specified. This results in failures on the HIP platform, for cases when a GPU kernel
 546:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   // without an explicit launch_bounds attribute is called with a threads_per_block value
 547:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   // greater than 256.
 548:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   //
 549:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   // This is a regression in functioanlity and is expected to be fixed within the next
 550:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   // couple of ROCm releases (compiler will go back to using 1024 value as the default)
 551:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   //
 552:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   // In the meantime, we will use a "only enabled for HIP" macro to set the launch_bounds
 553:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   // attribute.
 554:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 555:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_HIP_LAUNCH_BOUNDS_1024 __launch_bounds__(1024)
 556:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 557:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 558:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 559:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if !defined(EIGEN_HIP_LAUNCH_BOUNDS_1024)
 560:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #define EIGEN_HIP_LAUNCH_BOUNDS_1024
 561:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif // !defined(EIGEN_HIP_LAUNCH_BOUNDS_1024)
 562:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 563:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // Unify CUDA/HIPCC
 564:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 565:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if defined(EIGEN_CUDACC) || defined(EIGEN_HIPCC)
ARM GAS  /tmp/ccw5fbVv.s 			page 157


 566:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //
 567:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // If either EIGEN_CUDACC or EIGEN_HIPCC is defined, then define EIGEN_GPUCC
 568:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //
 569:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #define EIGEN_GPUCC
 570:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //
 571:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // EIGEN_HIPCC implies the HIP compiler and is used to tweak Eigen code for use in HIP kernels
 572:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // EIGEN_CUDACC implies the CUDA compiler and is used to tweak Eigen code for use in CUDA kernels
 573:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //
 574:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // In most cases the same tweaks are required to the Eigen code to enable in both the HIP and CUDA 
 575:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // For those cases, the corresponding code should be guarded with
 576:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //      #if defined(EIGEN_GPUCC)
 577:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // instead of
 578:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //      #if defined(EIGEN_CUDACC) || defined(EIGEN_HIPCC)
 579:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //
 580:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // For cases where the tweak is specific to HIP, the code should be guarded with
 581:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //      #if defined(EIGEN_HIPCC)
 582:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //
 583:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // For cases where the tweak is specific to CUDA, the code should be guarded with
 584:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //      #if defined(EIGEN_CUDACC)
 585:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //
 586:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 587:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 588:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if defined(EIGEN_CUDA_ARCH) || defined(EIGEN_HIP_DEVICE_COMPILE)
 589:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //
 590:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // If either EIGEN_CUDA_ARCH or EIGEN_HIP_DEVICE_COMPILE is defined, then define EIGEN_GPU_COMPILE_
 591:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //
 592:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #define EIGEN_GPU_COMPILE_PHASE
 593:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //
 594:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // GPU compilers (HIPCC, NVCC) typically do two passes over the source code,
 595:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //   + one to compile the source for the "host" (ie CPU)
 596:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //   + another to compile the source for the "device" (ie. GPU)
 597:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //
 598:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // Code that needs to enabled only during the either the "host" or "device" compilation phase
 599:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // needs to be guarded with a macro that indicates the current compilation phase
 600:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //
 601:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // EIGEN_HIP_DEVICE_COMPILE implies the device compilation phase in HIP
 602:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // EIGEN_CUDA_ARCH implies the device compilation phase in CUDA
 603:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //
 604:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // In most cases, the "host" / "device" specific code is the same for both HIP and CUDA
 605:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // For those cases, the code should be guarded with
 606:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //       #if defined(EIGEN_GPU_COMPILE_PHASE)
 607:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // instead of
 608:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //       #if defined(EIGEN_CUDA_ARCH) || defined(EIGEN_HIP_DEVICE_COMPILE)
 609:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //
 610:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // For cases where the tweak is specific to HIP, the code should be guarded with
 611:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //      #if defined(EIGEN_HIP_DEVICE_COMPILE)
 612:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //
 613:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // For cases where the tweak is specific to CUDA, the code should be guarded with
 614:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //      #if defined(EIGEN_CUDA_ARCH)
 615:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //
 616:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 617:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 618:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** /// \internal EIGEN_HAS_ARM64_FP16_VECTOR_ARITHMETIC set to 1 if the architecture
 619:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** /// supports Neon vector intrinsics for fp16.
 620:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if EIGEN_ARCH_ARM_OR_ARM64
 621:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #ifndef EIGEN_HAS_ARM64_FP16_VECTOR_ARITHMETIC
 622:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****     #if defined(__ARM_FEATURE_FP16_VECTOR_ARITHMETIC) && !defined(EIGEN_GPU_COMPILE_PHASE)
ARM GAS  /tmp/ccw5fbVv.s 			page 158


 623:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****       #define EIGEN_HAS_ARM64_FP16_VECTOR_ARITHMETIC 1
 624:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****     #else
 625:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****       #define EIGEN_HAS_ARM64_FP16_VECTOR_ARITHMETIC 0
 626:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****     #endif
 627:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #endif
 628:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 629:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 630:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** /// \internal EIGEN_HAS_ARM64_FP16_SCALAR_ARITHMETIC set to 1 if the architecture
 631:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** /// supports Neon scalar intrinsics for fp16.
 632:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if EIGEN_ARCH_ARM_OR_ARM64
 633:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #ifndef EIGEN_HAS_ARM64_FP16_SCALAR_ARITHMETIC
 634:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****     #if defined(__ARM_FEATURE_FP16_SCALAR_ARITHMETIC) && !defined(EIGEN_GPU_COMPILE_PHASE)
 635:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****       #define EIGEN_HAS_ARM64_FP16_SCALAR_ARITHMETIC 1
 636:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****     #endif
 637:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #endif
 638:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 639:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 640:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if defined(EIGEN_USE_SYCL) && defined(__SYCL_DEVICE_ONLY__)
 641:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // EIGEN_USE_SYCL is a user-defined macro while __SYCL_DEVICE_ONLY__ is a compiler-defined macro.
 642:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // In most cases we want to check if both macros are defined which can be done using the define bel
 643:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #define SYCL_DEVICE_ONLY
 644:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 645:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 646:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //------------------------------------------------------------------------------------------
 647:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // Detect Compiler/Architecture/OS specific features
 648:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //------------------------------------------------------------------------------------------
 649:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 650:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // Cross compiler wrapper around LLVM's __has_builtin
 651:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #ifdef __has_builtin
 652:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #  define EIGEN_HAS_BUILTIN(x) __has_builtin(x)
 653:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 654:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #  define EIGEN_HAS_BUILTIN(x) 0
 655:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 656:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 657:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // A Clang feature extension to determine compiler features.
 658:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // We use it to determine 'cxx_rvalue_references'
 659:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #ifndef __has_feature
 660:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** # define __has_feature(x) 0
 661:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 662:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 663:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // The macro EIGEN_CPLUSPLUS is a replacement for __cplusplus/_MSVC_LANG that
 664:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // works for both platforms, indicating the C++ standard version number.
 665:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //
 666:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // With MSVC, without defining /Zc:__cplusplus, the __cplusplus macro will
 667:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // report 199711L regardless of the language standard specified via /std.
 668:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // We need to rely on _MSVC_LANG instead, which is only available after
 669:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // VS2015.3.
 670:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if EIGEN_COMP_MSVC_LANG > 0
 671:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #define EIGEN_CPLUSPLUS EIGEN_COMP_MSVC_LANG
 672:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #elif EIGEN_COMP_MSVC >= 1900
 673:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #define EIGEN_CPLUSPLUS 201103L
 674:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #elif defined(__cplusplus)
 675:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #define EIGEN_CPLUSPLUS __cplusplus
 676:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 677:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #define EIGEN_CPLUSPLUS 0
 678:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 679:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
ARM GAS  /tmp/ccw5fbVv.s 			page 159


 680:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // The macro EIGEN_COMP_CXXVER defines the c++ version expected by the compiler.
 681:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // For instance, if compiling with gcc and -std=c++17, then EIGEN_COMP_CXXVER
 682:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // is defined to 17.
 683:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if EIGEN_CPLUSPLUS >= 202002L
 684:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_COMP_CXXVER 20
 685:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #elif EIGEN_CPLUSPLUS >= 201703L
 686:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_COMP_CXXVER 17
 687:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #elif EIGEN_CPLUSPLUS >= 201402L
 688:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_COMP_CXXVER 14
 689:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #elif EIGEN_CPLUSPLUS >= 201103L
 690:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_COMP_CXXVER 11
 691:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 692:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_COMP_CXXVER 03
 693:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 694:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 695:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 696:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // The macros EIGEN_HAS_CXX?? defines a rough estimate of available c++ features
 697:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // but in practice we should not rely on them but rather on the availability of
 698:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // individual features as defined later.
 699:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // This is why there is no EIGEN_HAS_CXX17.
 700:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if EIGEN_MAX_CPP_VER < 14 || EIGEN_COMP_CXXVER < 14 || \
 701:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   (EIGEN_COMP_MSVC && EIGEN_COMP_MSVC < 1900) || \
 702:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   (EIGEN_COMP_ICC && EIGEN_COMP_ICC < 1500) || \
 703:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   (EIGEN_COMP_NVCC && EIGEN_COMP_NVCC < 80000) || \
 704:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   (EIGEN_COMP_CLANG_STRICT && EIGEN_COMP_CLANG < 390) || \
 705:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   (EIGEN_COMP_CLANGAPPLE && EIGEN_COMP_CLANGAPPLE < 9000000) || \
 706:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   (EIGEN_COMP_GNUC_STRICT && EIGEN_COMP_GNUC < 510)
 707:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #error This compiler appears to be too old to be supported by Eigen
 708:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 709:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 710:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // Does the compiler support C99?
 711:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // Need to include <cmath> to make sure _GLIBCXX_USE_C99 gets defined
 712:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #include <cmath>
 713:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #ifndef EIGEN_HAS_C99_MATH
 714:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if ((defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 199901))       \
 715:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   || (defined(__GNUC__) && defined(_GLIBCXX_USE_C99)) \
 716:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   || (defined(_LIBCPP_VERSION) && !defined(_MSC_VER)) \
 717:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   || (EIGEN_COMP_MSVC) || defined(SYCL_DEVICE_ONLY))
 718:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_HAS_C99_MATH 1
 719:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 720:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_HAS_C99_MATH 0
 721:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 722:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 723:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 724:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // Does the compiler support std::hash?
 725:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #ifndef EIGEN_HAS_STD_HASH
 726:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // The std::hash struct is defined in C++11 but is not labelled as a __device__
 727:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // function and is not constexpr, so cannot be used on device.
 728:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if !defined(EIGEN_GPU_COMPILE_PHASE)
 729:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #define EIGEN_HAS_STD_HASH 1
 730:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 731:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #define EIGEN_HAS_STD_HASH 0
 732:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 733:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif  // EIGEN_HAS_STD_HASH
 734:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 735:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #ifndef EIGEN_HAS_STD_INVOKE_RESULT
 736:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if EIGEN_MAX_CPP_VER >= 17 && EIGEN_COMP_CXXVER >= 17
ARM GAS  /tmp/ccw5fbVv.s 			page 160


 737:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #define EIGEN_HAS_STD_INVOKE_RESULT 1
 738:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 739:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #define EIGEN_HAS_STD_INVOKE_RESULT 0
 740:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 741:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 742:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 743:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #define EIGEN_CONSTEXPR constexpr
 744:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 745:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // NOTE: the required Apple's clang version is very conservative
 746:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //       and it could be that XCode 9 works just fine.
 747:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // NOTE: the MSVC version is based on https://en.cppreference.com/w/cpp/compiler_support
 748:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //       and not tested.
 749:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // NOTE: Intel C++ Compiler Classic (icc) Version 19.0 and later supports dynamic allocation
 750:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //       for over-aligned data, but not in a manner that is compatible with Eigen.
 751:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //       See https://gitlab.com/libeigen/eigen/-/issues/2575
 752:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #ifndef EIGEN_HAS_CXX17_OVERALIGN
 753:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if EIGEN_MAX_CPP_VER>=17 && EIGEN_COMP_CXXVER>=17 && (                 \
 754:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****            (EIGEN_COMP_MSVC >= 1912)                                    \
 755:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****         || (EIGEN_GNUC_STRICT_AT_LEAST(7,0,0))                          \
 756:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****         || (EIGEN_CLANG_STRICT_AT_LEAST(5,0,0))                         \
 757:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****         || (EIGEN_COMP_CLANGAPPLE && EIGEN_COMP_CLANGAPPLE >= 10000000) \
 758:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****       ) && !EIGEN_COMP_ICC
 759:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #define EIGEN_HAS_CXX17_OVERALIGN 1
 760:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 761:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #define EIGEN_HAS_CXX17_OVERALIGN 0
 762:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 763:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 764:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 765:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if defined(EIGEN_CUDACC)
 766:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   // While available already with c++11, this is useful mostly starting with c++14 and relaxed cons
 767:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #if defined(__NVCC__)
 768:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****     // nvcc considers constexpr functions as __host__ __device__ with the option --expt-relaxed-con
 769:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****     #ifdef __CUDACC_RELAXED_CONSTEXPR__
 770:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****       #define EIGEN_CONSTEXPR_ARE_DEVICE_FUNC
 771:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****     #endif
 772:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #elif defined(__clang__) && defined(__CUDA__) && __has_feature(cxx_relaxed_constexpr)
 773:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****     // clang++ always considers constexpr functions as implicitly __host__ __device__
 774:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****     #define EIGEN_CONSTEXPR_ARE_DEVICE_FUNC
 775:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #endif
 776:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 777:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 778:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // Does the compiler support the __int128 and __uint128_t extensions for 128-bit
 779:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // integer arithmetic?
 780:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //
 781:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // Clang and GCC define __SIZEOF_INT128__ when these extensions are supported,
 782:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // but we avoid using them in certain cases:
 783:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //
 784:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // * Building using Clang for Windows, where the Clang runtime library has
 785:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //   128-bit support only on LP64 architectures, but Windows is LLP64.
 786:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #ifndef EIGEN_HAS_BUILTIN_INT128
 787:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if defined(__SIZEOF_INT128__) && !(EIGEN_OS_WIN && EIGEN_COMP_CLANG)
 788:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #define EIGEN_HAS_BUILTIN_INT128 1
 789:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 790:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #define EIGEN_HAS_BUILTIN_INT128 0
 791:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 792:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 793:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
ARM GAS  /tmp/ccw5fbVv.s 			page 161


 794:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //------------------------------------------------------------------------------------------
 795:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // Preprocessor programming helpers
 796:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //------------------------------------------------------------------------------------------
 797:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 798:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // This macro can be used to prevent from macro expansion, e.g.:
 799:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //   std::max EIGEN_NOT_A_MACRO(a,b)
 800:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #define EIGEN_NOT_A_MACRO
 801:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 802:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #define EIGEN_DEBUG_VAR(x) std::cerr << #x << " = " << x << std::endl;
 803:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 804:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // concatenate two tokens
 805:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #define EIGEN_CAT2(a,b) a ## b
 806:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #define EIGEN_CAT(a,b) EIGEN_CAT2(a,b)
 807:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 808:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #define EIGEN_COMMA ,
 809:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 810:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // convert a token to a string
 811:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #define EIGEN_MAKESTRING2(a) #a
 812:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #define EIGEN_MAKESTRING(a) EIGEN_MAKESTRING2(a)
 813:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 814:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // EIGEN_STRONG_INLINE is a stronger version of the inline, using __forceinline on MSVC,
 815:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // but it still doesn't use GCC's always_inline. This is useful in (common) situations where MSVC n
 816:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // but GCC is still doing fine with just inline.
 817:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #ifndef EIGEN_STRONG_INLINE
 818:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if (EIGEN_COMP_MSVC || EIGEN_COMP_ICC) && !defined(EIGEN_GPUCC)
 819:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #define EIGEN_STRONG_INLINE __forceinline
 820:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 821:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #define EIGEN_STRONG_INLINE inline
 822:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 823:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 824:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 825:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // EIGEN_ALWAYS_INLINE is the strongest, it has the effect of making the function inline and adding
 826:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // attribute to maximize inlining. This should only be used when really necessary: in particular,
 827:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // it uses __attribute__((always_inline)) on GCC, which most of the time is useless and can severel
 828:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // FIXME with the always_inline attribute,
 829:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if EIGEN_COMP_GNUC && !defined(SYCL_DEVICE_ONLY)
 830:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #define EIGEN_ALWAYS_INLINE __attribute__((always_inline)) inline
 831:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 832:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #define EIGEN_ALWAYS_INLINE EIGEN_STRONG_INLINE
 833:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 834:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 835:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if EIGEN_COMP_GNUC
 836:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #define EIGEN_DONT_INLINE __attribute__((noinline))
 837:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #elif EIGEN_COMP_MSVC
 838:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #define EIGEN_DONT_INLINE __declspec(noinline)
 839:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 840:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #define EIGEN_DONT_INLINE
 841:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 842:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 843:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if EIGEN_COMP_GNUC
 844:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #define EIGEN_PERMISSIVE_EXPR __extension__
 845:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 846:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #define EIGEN_PERMISSIVE_EXPR
 847:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 848:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 849:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // GPU stuff
 850:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
ARM GAS  /tmp/ccw5fbVv.s 			page 162


 851:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // Disable some features when compiling with GPU compilers (SYCL/HIPCC)
 852:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if defined(SYCL_DEVICE_ONLY) || defined(EIGEN_HIP_DEVICE_COMPILE)
 853:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   // Do not try asserts on device code
 854:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #ifndef EIGEN_NO_DEBUG
 855:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_NO_DEBUG
 856:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #endif
 857:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 858:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #ifdef EIGEN_INTERNAL_DEBUGGING
 859:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #undef EIGEN_INTERNAL_DEBUGGING
 860:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #endif
 861:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 862:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 863:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // No exceptions on device.
 864:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if defined(SYCL_DEVICE_ONLY) || defined(EIGEN_GPU_COMPILE_PHASE)
 865:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #ifdef EIGEN_EXCEPTIONS
 866:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #undef EIGEN_EXCEPTIONS
 867:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #endif
 868:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 869:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 870:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if defined(SYCL_DEVICE_ONLY)
 871:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #ifndef EIGEN_DONT_VECTORIZE
 872:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****     #define EIGEN_DONT_VECTORIZE
 873:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #endif
 874:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_DEVICE_FUNC __attribute__((flatten)) __attribute__((always_inline))
 875:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // All functions callable from CUDA/HIP code must be qualified with __device__
 876:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #elif defined(EIGEN_GPUCC)
 877:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****     #define EIGEN_DEVICE_FUNC __host__ __device__
 878:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 879:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_DEVICE_FUNC
 880:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 881:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 882:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 883:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // this macro allows to get rid of linking errors about multiply defined functions.
 884:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //  - static is not very good because it prevents definitions from different object files to be mer
 885:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //           So static causes the resulting linked executable to be bloated with multiple copies of
 886:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** //  - inline is not perfect either as it unwantedly hints the compiler toward inlining the function
 887:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #define EIGEN_DECLARE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS EIGEN_DEVICE_FUNC
 888:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #define EIGEN_DEFINE_FUNCTION_ALLOWING_MULTIPLE_DEFINITIONS EIGEN_DEVICE_FUNC inline
 889:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 890:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #ifdef NDEBUG
 891:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** # ifndef EIGEN_NO_DEBUG
 892:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #  define EIGEN_NO_DEBUG
 893:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** # endif
 894:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 895:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 896:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // eigen_assert can be overridden
 897:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #ifndef eigen_assert
 898:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #define eigen_assert(x) eigen_plain_assert(x)
 899:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 900:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 901:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #ifdef EIGEN_INTERNAL_DEBUGGING
 902:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #define eigen_internal_assert(x) eigen_assert(x)
 903:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 904:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #define eigen_internal_assert(x) ((void)0)
 905:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 906:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 907:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if defined(EIGEN_NO_DEBUG) || (defined(EIGEN_GPU_COMPILE_PHASE) && defined(EIGEN_NO_DEBUG_GPU))
ARM GAS  /tmp/ccw5fbVv.s 			page 163


 908:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #define EIGEN_ONLY_USED_FOR_DEBUG(x) EIGEN_UNUSED_VARIABLE(x)
 909:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 910:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #define EIGEN_ONLY_USED_FOR_DEBUG(x)
 911:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 912:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 913:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #ifndef EIGEN_NO_DEPRECATED_WARNING
 914:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #if EIGEN_COMP_GNUC
 915:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****     #define EIGEN_DEPRECATED __attribute__((deprecated))
 916:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #elif EIGEN_COMP_MSVC
 917:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****     #define EIGEN_DEPRECATED __declspec(deprecated)
 918:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #else
 919:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****     #define EIGEN_DEPRECATED
 920:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #endif
 921:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 922:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_DEPRECATED
 923:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 924:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 925:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if EIGEN_COMP_GNUC
 926:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #define EIGEN_UNUSED __attribute__((unused))
 927:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 928:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #define EIGEN_UNUSED
 929:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 930:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 931:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #if EIGEN_COMP_GNUC
 932:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_PRAGMA(tokens) _Pragma(#tokens)
 933:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_DIAGNOSTICS(tokens) EIGEN_PRAGMA(GCC diagnostic tokens)
 934:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_DIAGNOSTICS_OFF(msc, gcc) EIGEN_DIAGNOSTICS(gcc)
 935:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #elif EIGEN_COMP_MSVC
 936:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_PRAGMA(tokens) __pragma(tokens)
 937:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_DIAGNOSTICS(tokens) EIGEN_PRAGMA(warning(tokens))
 938:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_DIAGNOSTICS_OFF(msc, gcc) EIGEN_DIAGNOSTICS(msc)
 939:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #else
 940:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_PRAGMA(tokens)
 941:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_DIAGNOSTICS(tokens)
 942:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   #define EIGEN_DIAGNOSTICS_OFF(msc, gcc)
 943:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #endif
 944:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 945:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** #define EIGEN_DISABLE_DEPRECATED_WARNING EIGEN_DIAGNOSTICS_OFF(disable : 4996, ignored "-Wdeprecate
 946:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** 
 947:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** // Suppresses 'unused variable' warnings.
 948:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h **** namespace Eigen {
 949:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****   namespace internal {
 950:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Macros.h ****     template<typename T> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE constexpr void ignore_unused_variabl
 782              		.loc 22 950 79 view .LVU169
 783              		.loc 22 950 79 is_stmt 0 view .LVU170
 784              	.LBE1906:
 785              	.LBE1905:
 786              	.LBE1907:
 787              	.LBE1908:
 788              	.LBE1911:
 789              	.LBB1912:
 790              	.LBI1912:
 137:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****     /** \returns the functor representing the binary operation */
 791              		.loc 19 137 23 is_stmt 1 view .LVU171
 137:../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseBinaryOp.h ****     /** \returns the functor representing the binary operation */
 792              		.loc 19 137 23 is_stmt 0 view .LVU172
 793              	.LBE1912:
ARM GAS  /tmp/ccw5fbVv.s 			page 164


 794              	.LBB1913:
 795              	.LBI1913:
 106:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** };
 796              		.loc 21 106 12 is_stmt 1 view .LVU173
 797              	.LBB1914:
 798              	.LBI1914:
1004:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
1005:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     const BinaryOp& func() const { return op; }
1006:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     BinaryOp op;
1007:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     evaluator<Lhs> lhsImpl;
1008:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     evaluator<Rhs> rhsImpl;
1009:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   };
1010:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
1011:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   Data m_d;
1012:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** };
1013:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
1014:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // -------------------- CwiseUnaryView --------------------
1015:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
1016:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** template<typename UnaryOp, typename ArgType, typename StrideType>
1017:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** struct unary_evaluator<CwiseUnaryView<UnaryOp, ArgType, StrideType>, IndexBased>
1018:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   : evaluator_base<CwiseUnaryView<UnaryOp, ArgType, StrideType> >
1019:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** {
1020:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   typedef CwiseUnaryView<UnaryOp, ArgType, StrideType> XprType;
1021:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
1022:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   enum {
1023:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     CoeffReadCost = int(evaluator<ArgType>::CoeffReadCost) + int(functor_traits<UnaryOp>::Cost),
1024:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
1025:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     Flags = (evaluator<ArgType>::Flags & (HereditaryBits | LinearAccessBit | DirectAccessBit)),
1026:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
1027:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     Alignment = 0 // FIXME it is not very clear why alignment is necessarily lost...
1028:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   };
1029:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
1030:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC explicit unary_evaluator(const XprType& op) : m_d(op)
1031:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
1032:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     EIGEN_INTERNAL_CHECK_COST_VALUE(functor_traits<UnaryOp>::Cost);
1033:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     EIGEN_INTERNAL_CHECK_COST_VALUE(CoeffReadCost);
1034:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
1035:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
1036:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   typedef typename XprType::Scalar Scalar;
1037:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   typedef typename XprType::CoeffReturnType CoeffReturnType;
1038:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
1039:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
1040:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   CoeffReturnType coeff(Index row, Index col) const
1041:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
1042:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return m_d.func()(m_d.argImpl.coeff(row, col));
1043:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
1044:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
1045:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
1046:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   CoeffReturnType coeff(Index index) const
1047:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
1048:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return m_d.func()(m_d.argImpl.coeff(index));
1049:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
1050:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
1051:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
1052:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   Scalar& coeffRef(Index row, Index col)
1053:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
1054:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return m_d.func()(m_d.argImpl.coeffRef(row, col));
ARM GAS  /tmp/ccw5fbVv.s 			page 165


1055:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
1056:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
1057:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
1058:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   Scalar& coeffRef(Index index)
1059:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
1060:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return m_d.func()(m_d.argImpl.coeffRef(index));
1061:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
1062:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
1063:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** protected:
1064:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
1065:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   // this helper permits to completely eliminate the functor if it is empty
1066:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   struct Data
1067:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
1068:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
1069:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     Data(const XprType& xpr) : op(xpr.functor()), argImpl(xpr.nestedExpression()) {}
1070:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
1071:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     const UnaryOp& func() const { return op; }
1072:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     UnaryOp op;
1073:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     evaluator<ArgType> argImpl;
1074:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   };
1075:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
1076:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   Data m_d;
1077:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** };
1078:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
1079:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // -------------------- Map --------------------
1080:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
1081:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // FIXME perhaps the PlainObjectType could be provided by Derived::PlainObject ?
1082:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** // but that might complicate template specialization
1083:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** template<typename Derived, typename PlainObjectType>
1084:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** struct mapbase_evaluator;
1085:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
1086:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** template<typename Derived, typename PlainObjectType>
1087:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** struct mapbase_evaluator : evaluator_base<Derived>
1088:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** {
1089:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   typedef Derived  XprType;
1090:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   typedef typename XprType::PointerType PointerType;
1091:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   typedef typename XprType::Scalar Scalar;
1092:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   typedef typename XprType::CoeffReturnType CoeffReturnType;
1093:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
1094:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   enum {
1095:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     IsRowMajor = XprType::RowsAtCompileTime,
1096:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     ColsAtCompileTime = XprType::ColsAtCompileTime,
1097:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     CoeffReadCost = NumTraits<Scalar>::ReadCost
1098:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   };
1099:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
1100:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
1101:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   explicit mapbase_evaluator(const XprType& map)
1102:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     : m_data(const_cast<PointerType>(map.data())),
1103:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****       m_innerStride(map.innerStride()),
1104:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****       m_outerStride(map.outerStride())
1105:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
1106:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     EIGEN_STATIC_ASSERT(check_implication((evaluator<Derived>::Flags & PacketAccessBit) != 0,
1107:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****                                           internal::inner_stride_at_compile_time<Derived>::ret == 1
1108:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****                         PACKET_ACCESS_REQUIRES_TO_HAVE_INNER_STRIDE_FIXED_TO_1);
1109:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     EIGEN_INTERNAL_CHECK_COST_VALUE(CoeffReadCost);
1110:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
1111:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
ARM GAS  /tmp/ccw5fbVv.s 			page 166


1112:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
1113:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   CoeffReturnType coeff(Index row, Index col) const
1114:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
1115:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return m_data[col * colStride() + row * rowStride()];
1116:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
1117:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
1118:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
1119:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   CoeffReturnType coeff(Index index) const
1120:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
1121:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return m_data[index * m_innerStride.value()];
1122:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
1123:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
1124:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
1125:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   Scalar& coeffRef(Index row, Index col)
1126:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
1127:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return m_data[col * colStride() + row * rowStride()];
1128:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
1129:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
1130:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE
1131:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   Scalar& coeffRef(Index index)
1132:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
1133:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return m_data[index * m_innerStride.value()];
1134:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
1135:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
1136:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   template<int LoadMode, typename PacketType>
1137:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_STRONG_INLINE
1138:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   PacketType packet(Index row, Index col) const
1139:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
1140:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     PointerType ptr = m_data + row * rowStride() + col * colStride();
1141:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return internal::ploadt<PacketType, LoadMode>(ptr);
1142:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
1143:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
1144:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   template<int LoadMode, typename PacketType>
1145:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_STRONG_INLINE
1146:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   PacketType packet(Index index) const
1147:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
1148:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return internal::ploadt<PacketType, LoadMode>(m_data + index * m_innerStride.value());
1149:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
1150:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
1151:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   template<int StoreMode, typename PacketType>
1152:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_STRONG_INLINE
1153:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   void writePacket(Index row, Index col, const PacketType& x)
1154:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
1155:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     PointerType ptr = m_data + row * rowStride() + col * colStride();
1156:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return internal::pstoret<Scalar, PacketType, StoreMode>(ptr, x);
1157:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
1158:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
1159:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   template<int StoreMode, typename PacketType>
1160:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_STRONG_INLINE
1161:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   void writePacket(Index index, const PacketType& x)
1162:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
1163:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     internal::pstoret<Scalar, PacketType, StoreMode>(m_data + index * m_innerStride.value(), x);
1164:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
1165:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** protected:
1166:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE EIGEN_CONSTEXPR
1167:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   Index rowStride() const EIGEN_NOEXCEPT {
1168:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     return XprType::IsRowMajor ? m_outerStride.value() : m_innerStride.value();
ARM GAS  /tmp/ccw5fbVv.s 			page 167


1169:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
1170:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE EIGEN_CONSTEXPR
1171:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   Index colStride() const EIGEN_NOEXCEPT {
1172:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****      return XprType::IsRowMajor ? m_innerStride.value() : m_outerStride.value();
1173:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
1174:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
1175:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   PointerType m_data;
1176:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   const internal::variable_if_dynamic<Index, XprType::InnerStrideAtCompileTime> m_innerStride;
1177:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   const internal::variable_if_dynamic<Index, XprType::OuterStrideAtCompileTime> m_outerStride;
1178:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** };
1179:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
1180:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** template<typename PlainObjectType, int MapOptions, typename StrideType>
1181:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** struct evaluator<Map<PlainObjectType, MapOptions, StrideType> >
1182:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   : public mapbase_evaluator<Map<PlainObjectType, MapOptions, StrideType>, PlainObjectType>
1183:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** {
1184:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   typedef Map<PlainObjectType, MapOptions, StrideType> XprType;
1185:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   typedef typename XprType::Scalar Scalar;
1186:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   // TODO: should check for smaller packet types once we can handle multi-sized packet types
1187:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   typedef typename packet_traits<Scalar>::type PacketScalar;
1188:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
1189:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   enum {
1190:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     InnerStrideAtCompileTime = StrideType::InnerStrideAtCompileTime == 0
1191:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****                              ? int(PlainObjectType::InnerStrideAtCompileTime)
1192:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****                              : int(StrideType::InnerStrideAtCompileTime),
1193:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     OuterStrideAtCompileTime = StrideType::OuterStrideAtCompileTime == 0
1194:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****                              ? int(PlainObjectType::OuterStrideAtCompileTime)
1195:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****                              : int(StrideType::OuterStrideAtCompileTime),
1196:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     HasNoInnerStride = InnerStrideAtCompileTime == 1,
1197:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     HasNoOuterStride = StrideType::OuterStrideAtCompileTime == 0,
1198:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     HasNoStride = HasNoInnerStride && HasNoOuterStride,
1199:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     IsDynamicSize = PlainObjectType::SizeAtCompileTime==Dynamic,
1200:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
1201:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     PacketAccessMask = bool(HasNoInnerStride) ? ~int(0) : ~int(PacketAccessBit),
1202:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     LinearAccessMask = bool(HasNoStride) || bool(PlainObjectType::IsVectorAtCompileTime) ? ~int(0) 
1203:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     Flags = int( evaluator<PlainObjectType>::Flags) & (LinearAccessMask&PacketAccessMask),
1204:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
1205:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     Alignment = int(MapOptions)&int(AlignedMask)
1206:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   };
1207:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** 
1208:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC explicit evaluator(const XprType& map)
 799              		.loc 21 1208 30 view .LVU174
 800              	.LBB1915:
 801              	.LBI1915:
1101:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     : m_data(const_cast<PointerType>(map.data())),
 802              		.loc 21 1101 12 view .LVU175
 803              	.LBB1916:
 804              	.LBI1916:
 123:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 805              		.loc 21 123 41 view .LVU176
 123:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 806              		.loc 21 123 41 is_stmt 0 view .LVU177
 807              	.LBE1916:
 808              	.LBB1917:
 809              	.LBI1917:
 104:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h **** 
 810              		.loc 13 104 44 is_stmt 1 view .LVU178
 104:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h **** 
ARM GAS  /tmp/ccw5fbVv.s 			page 168


 811              		.loc 13 104 44 is_stmt 0 view .LVU179
 812              	.LBE1917:
 813              	.LBB1918:
 814              	.LBI1918:
 110:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****     {
 815              		.loc 12 110 18 is_stmt 1 view .LVU180
 110:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****     {
 816              		.loc 12 110 18 is_stmt 0 view .LVU181
 817              	.LBE1918:
 818              	.LBB1919:
 819              	.LBI1919:
 116:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE EIGEN_CONSTEXPR
 820              		.loc 11 116 52 is_stmt 1 view .LVU182
 116:../../RTNeural/modules/Eigen/Eigen/src/Core/util/XprHelper.h ****     EIGEN_DEVICE_FUNC static EIGEN_STRONG_INLINE EIGEN_CONSTEXPR
 821              		.loc 11 116 52 is_stmt 0 view .LVU183
 822              	.LBE1919:
 823              	.LBB1920:
 824              	.LBI1920:
 116:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****     {
 825              		.loc 12 116 18 is_stmt 1 view .LVU184
 116:../../RTNeural/modules/Eigen/Eigen/src/Core/Map.h ****     {
 826              		.loc 12 116 18 is_stmt 0 view .LVU185
 827              	.LBE1920:
 828              	.LBB1921:
 829              	.LBI1921:
 830              		.loc 11 129 52 is_stmt 1 view .LVU186
 831              		.loc 11 129 52 is_stmt 0 view .LVU187
 832              	.LBE1921:
 833              	.LBE1915:
 834              	.LBE1914:
 835              	.LBE1913:
 836              	.LBE1923:
 837              	.LBE1924:
 838              	.LBE1925:
 839              	.LBE1947:
 840              	.LBB1948:
 841              	.LBI1926:
 281:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****   {
 842              		.loc 20 281 10 is_stmt 1 view .LVU188
 843              	.LBB1946:
 844              	.LBB1939:
 845              	.LBI1939:
 976:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
 846              		.loc 21 976 19 view .LVU189
 847              	.LBB1940:
 848              	.LBI1940:
1119:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
 849              		.loc 21 1119 19 view .LVU190
1119:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
 850              		.loc 21 1119 19 is_stmt 0 view .LVU191
 851              	.LBE1940:
 852              	.LBB1941:
 853              	.LBI1941:
 854              		.file 23 "../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h"
   1:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** // This file is part of Eigen, a lightweight C++ template library
   2:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** // for linear algebra.
   3:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** //
ARM GAS  /tmp/ccw5fbVv.s 			page 169


   4:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** // Copyright (C) 2008-2010 Gael Guennebaud <gael.guennebaud@inria.fr>
   5:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** //
   6:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** // This Source Code Form is subject to the terms of the Mozilla
   7:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** // Public License v. 2.0. If a copy of the MPL was not distributed
   8:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** // with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
   9:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** 
  10:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** #ifndef EIGEN_BINARY_FUNCTORS_H
  11:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** #define EIGEN_BINARY_FUNCTORS_H
  12:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** 
  13:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** #include "../InternalHeaderCheck.h"
  14:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** 
  15:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** namespace Eigen {
  16:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** 
  17:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** namespace internal {
  18:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** 
  19:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** //---------- associative binary functors ----------
  20:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** 
  21:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** template<typename Arg1, typename Arg2>
  22:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** struct binary_op_base
  23:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** {
  24:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h ****   typedef Arg1 first_argument_type;
  25:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h ****   typedef Arg2 second_argument_type;
  26:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** };
  27:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** 
  28:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** /** \internal
  29:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h ****   * \brief Template functor to compute the sum of two scalars
  30:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h ****   *
  31:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h ****   * \sa class CwiseBinaryOp, MatrixBase::operator+, class VectorwiseOp, DenseBase::sum()
  32:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h ****   */
  33:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** template<typename LhsScalar,typename RhsScalar>
  34:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** struct scalar_sum_op : binary_op_base<LhsScalar,RhsScalar>
  35:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** {
  36:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h ****   typedef typename ScalarBinaryOpTraits<LhsScalar,RhsScalar,scalar_sum_op>::ReturnType result_type;
  37:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** #ifdef EIGEN_SCALAR_BINARY_OP_PLUGIN
  38:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h ****   scalar_sum_op() {
  39:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h ****     EIGEN_SCALAR_BINARY_OP_PLUGIN
  40:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h ****   }
  41:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** #endif
  42:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar
  43:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h ****   template<typename Packet>
  44:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet packetOp(const Packet& a, const Packet& b) const
  45:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h ****   { return internal::padd(a,b); }
  46:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h ****   template<typename Packet>
  47:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type predux(const Packet& a) const
  48:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h ****   { return internal::predux(a); }
  49:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** };
  50:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** template<typename LhsScalar,typename RhsScalar>
  51:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** struct functor_traits<scalar_sum_op<LhsScalar,RhsScalar> > {
  52:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h ****   enum {
  53:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h ****     Cost = (int(NumTraits<LhsScalar>::AddCost) + int(NumTraits<RhsScalar>::AddCost)) / 2, // rough 
  54:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h ****     PacketAccess = is_same<LhsScalar,RhsScalar>::value && packet_traits<LhsScalar>::HasAdd && packe
  55:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h ****     // TODO vectorize mixed sum
  56:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h ****   };
  57:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** };
  58:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** 
  59:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** 
  60:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** template<>
ARM GAS  /tmp/ccw5fbVv.s 			page 170


  61:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE bool scalar_sum_op<bool,bool>::operator() (const bool& a, con
  62:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** 
  63:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** 
  64:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** /** \internal
  65:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h ****   * \brief Template functor to compute the product of two scalars
  66:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h ****   *
  67:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h ****   * \sa class CwiseBinaryOp, Cwise::operator*(), class VectorwiseOp, MatrixBase::redux()
  68:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h ****   */
  69:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** template<typename LhsScalar,typename RhsScalar>
  70:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** struct scalar_product_op  : binary_op_base<LhsScalar,RhsScalar>
  71:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** {
  72:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h ****   typedef typename ScalarBinaryOpTraits<LhsScalar,RhsScalar,scalar_product_op>::ReturnType result_t
  73:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** #ifdef EIGEN_SCALAR_BINARY_OP_PLUGIN
  74:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h ****   scalar_product_op() {
  75:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h ****     EIGEN_SCALAR_BINARY_OP_PLUGIN
  76:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h ****   }
  77:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** #endif
  78:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar
  79:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h ****   template<typename Packet>
  80:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet packetOp(const Packet& a, const Packet& b) const
  81:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h ****   { return internal::pmul(a,b); }
  82:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h ****   template<typename Packet>
  83:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type predux(const Packet& a) const
  84:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h ****   { return internal::predux_mul(a); }
  85:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** };
  86:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** template<typename LhsScalar,typename RhsScalar>
  87:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** struct functor_traits<scalar_product_op<LhsScalar,RhsScalar> > {
  88:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h ****   enum {
  89:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h ****     Cost = (int(NumTraits<LhsScalar>::MulCost) + int(NumTraits<RhsScalar>::MulCost))/2, // rough es
  90:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h ****     PacketAccess = is_same<LhsScalar,RhsScalar>::value && packet_traits<LhsScalar>::HasMul && packe
  91:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h ****     // TODO vectorize mixed product
  92:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h ****   };
  93:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** };
  94:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** 
  95:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** template<>
  96:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE bool scalar_product_op<bool,bool>::operator() (const bool& a,
  97:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** 
  98:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** 
  99:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** /** \internal
 100:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h ****   * \brief Template functor to compute the conjugate product of two scalars
 101:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h ****   *
 102:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h ****   * This is a short cut for conj(x) * y which is needed for optimization purpose; in Eigen2 support
 103:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h ****   */
 104:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** template<typename LhsScalar,typename RhsScalar>
 105:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** struct scalar_conj_product_op  : binary_op_base<LhsScalar,RhsScalar>
 106:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** {
 107:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** 
 108:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h ****   enum {
 109:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h ****     Conj = NumTraits<LhsScalar>::IsComplex
 110:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h ****   };
 111:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** 
 112:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h ****   typedef typename ScalarBinaryOpTraits<LhsScalar,RhsScalar,scalar_conj_product_op>::ReturnType res
 113:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h **** 
 114:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar
 855              		.loc 23 114 53 is_stmt 1 view .LVU192
 856              	.LBB1942:
 857              	.LBI1942:
ARM GAS  /tmp/ccw5fbVv.s 			page 171


 858              		.file 24 "../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h"
   1:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h **** 
   2:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h **** // This file is part of Eigen, a lightweight C++ template library
   3:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h **** // for linear algebra.
   4:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h **** //
   5:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h **** // Copyright (C) 2017 Gael Guennebaud <gael.guennebaud@inria.fr>
   6:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h **** //
   7:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h **** // This Source Code Form is subject to the terms of the Mozilla
   8:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h **** // Public License v. 2.0. If a copy of the MPL was not distributed
   9:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h **** // with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
  10:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h **** 
  11:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h **** #ifndef EIGEN_ARCH_CONJ_HELPER_H
  12:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h **** #define EIGEN_ARCH_CONJ_HELPER_H
  13:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h **** 
  14:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h **** #define EIGEN_MAKE_CONJ_HELPER_CPLX_REAL(PACKET_CPLX, PACKET_REAL)      \
  15:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h ****   template <>                                                           \
  16:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h ****   struct conj_helper<PACKET_REAL, PACKET_CPLX, false, false> {          \
  17:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h ****     EIGEN_STRONG_INLINE PACKET_CPLX pmadd(const PACKET_REAL& x,         \
  18:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h ****                                           const PACKET_CPLX& y,         \
  19:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h ****                                           const PACKET_CPLX& c) const { \
  20:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h ****       return padd(c, this->pmul(x, y));                                 \
  21:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h ****     }                                                                   \
  22:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h ****     EIGEN_STRONG_INLINE PACKET_CPLX pmul(const PACKET_REAL& x,          \
  23:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h ****                                          const PACKET_CPLX& y) const {  \
  24:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h ****       return PACKET_CPLX(Eigen::internal::pmul<PACKET_REAL>(x, y.v));   \
  25:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h ****     }                                                                   \
  26:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h ****   };                                                                    \
  27:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h ****                                                                         \
  28:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h ****   template <>                                                           \
  29:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h ****   struct conj_helper<PACKET_CPLX, PACKET_REAL, false, false> {          \
  30:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h ****     EIGEN_STRONG_INLINE PACKET_CPLX pmadd(const PACKET_CPLX& x,         \
  31:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h ****                                           const PACKET_REAL& y,         \
  32:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h ****                                           const PACKET_CPLX& c) const { \
  33:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h ****       return padd(c, this->pmul(x, y));                                 \
  34:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h ****     }                                                                   \
  35:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h ****     EIGEN_STRONG_INLINE PACKET_CPLX pmul(const PACKET_CPLX& x,          \
  36:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h ****                                          const PACKET_REAL& y) const {  \
  37:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h ****       return PACKET_CPLX(Eigen::internal::pmul<PACKET_REAL>(x.v, y));   \
  38:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h ****     }                                                                   \
  39:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h ****   };
  40:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h **** 
  41:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h **** #include "../../InternalHeaderCheck.h"
  42:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h **** 
  43:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h **** namespace Eigen {
  44:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h **** namespace internal {
  45:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h **** 
  46:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h **** template<bool Conjugate> struct conj_if;
  47:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h **** 
  48:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h **** template<> struct conj_if<true> {
  49:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h ****   template<typename T>
  50:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE T operator()(const T& x) const { return numext::conj(x); }
  51:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h ****   template<typename T>
  52:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE T pconj(const T& x) const { return internal::pconj(x); }
  53:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h **** };
  54:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h **** 
  55:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h **** template<> struct conj_if<false> {
  56:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h ****   template<typename T>
ARM GAS  /tmp/ccw5fbVv.s 			page 172


  57:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const T& operator()(const T& x) const { return x; }
  58:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h ****   template<typename T>
  59:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const T& pconj(const T& x) const { return x; }
  60:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h **** };
  61:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h **** 
  62:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h **** // Generic Implementation, assume scalars since the packet-version is
  63:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h **** // specialized below.
  64:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h **** template<typename LhsType, typename RhsType, bool ConjLhs, bool ConjRhs>
  65:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h **** struct conj_helper {
  66:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h ****   typedef typename ScalarBinaryOpTraits<LhsType, RhsType>::ReturnType ResultType;
  67:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h **** 
  68:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ResultType
  69:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h ****   pmadd(const LhsType& x, const RhsType& y, const ResultType& c) const
  70:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h ****   { return this->pmul(x, y) + c; }
  71:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h **** 
  72:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ResultType
  73:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h ****   pmul(const LhsType& x, const RhsType& y) const
  74:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h ****   { return conj_if<ConjLhs>()(x) * conj_if<ConjRhs>()(y); }
  75:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h **** };
  76:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h **** 
  77:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h **** template<typename LhsScalar, typename RhsScalar>
  78:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h **** struct conj_helper<LhsScalar, RhsScalar, true, true> {
  79:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h ****   typedef typename ScalarBinaryOpTraits<LhsScalar,RhsScalar>::ReturnType ResultType;
  80:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h **** 
  81:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ResultType
  82:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h ****   pmadd(const LhsScalar& x, const RhsScalar& y, const ResultType& c) const
  83:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h ****   { return this->pmul(x, y) + c; }
  84:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h **** 
  85:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h ****   // We save a conjuation by using the identity conj(a)*conj(b) = conj(a*b).
  86:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ResultType
  87:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h ****   pmul(const LhsScalar& x, const RhsScalar& y) const
  88:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h ****   { return numext::conj(x * y); }
  89:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h **** };
  90:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h **** 
  91:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h **** // Implementation with equal type, use packet operations.
  92:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h **** template<typename Packet, bool ConjLhs, bool ConjRhs>
  93:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h **** struct conj_helper<Packet, Packet, ConjLhs, ConjRhs>
  94:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h **** {
  95:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h ****   typedef Packet ResultType;
  96:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet pmadd(const Packet& x, const Packet& y, const Packet
  97:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h ****   { return Eigen::internal::pmadd(conj_if<ConjLhs>().pconj(x), conj_if<ConjRhs>().pconj(y), c); }
  98:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h **** 
  99:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h **** 
 100:../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/ConjHelper.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet pmul(const Packet& x, const Packet& y) const
 859              		.loc 24 100 48 view .LVU193
 860              	.LBB1943:
 861              	.LBI1943:
 862              		.file 25 "../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h"
   1:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** // This file is part of Eigen, a lightweight C++ template library
   2:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** // for linear algebra.
   3:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** //
   4:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** // Copyright (C) 2008 Gael Guennebaud <gael.guennebaud@inria.fr>
   5:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** // Copyright (C) 2006-2008 Benoit Jacob <jacob.benoit.1@gmail.com>
   6:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** //
   7:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** // This Source Code Form is subject to the terms of the Mozilla
   8:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** // Public License v. 2.0. If a copy of the MPL was not distributed
   9:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** // with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
ARM GAS  /tmp/ccw5fbVv.s 			page 173


  10:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** 
  11:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** #ifndef EIGEN_GENERIC_PACKET_MATH_H
  12:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** #define EIGEN_GENERIC_PACKET_MATH_H
  13:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** 
  14:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** #include "./InternalHeaderCheck.h"
  15:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** 
  16:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** namespace Eigen {
  17:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** 
  18:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** namespace internal {
  19:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** 
  20:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** /** \internal
  21:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   * \file GenericPacketMath.h
  22:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   *
  23:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   * Default implementation for types not supported by the vectorization.
  24:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   * In practice these functions are provided to make easier the writing
  25:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   * of generic vectorized code.
  26:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   */
  27:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** 
  28:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** #ifndef EIGEN_DEBUG_ALIGNED_LOAD
  29:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** #define EIGEN_DEBUG_ALIGNED_LOAD
  30:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** #endif
  31:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** 
  32:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** #ifndef EIGEN_DEBUG_UNALIGNED_LOAD
  33:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** #define EIGEN_DEBUG_UNALIGNED_LOAD
  34:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** #endif
  35:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** 
  36:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** #ifndef EIGEN_DEBUG_ALIGNED_STORE
  37:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** #define EIGEN_DEBUG_ALIGNED_STORE
  38:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** #endif
  39:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** 
  40:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** #ifndef EIGEN_DEBUG_UNALIGNED_STORE
  41:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** #define EIGEN_DEBUG_UNALIGNED_STORE
  42:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** #endif
  43:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** 
  44:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** struct default_packet_traits
  45:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** {
  46:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   enum {
  47:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasAdd       = 1,
  48:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasSub       = 1,
  49:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasShift     = 1,
  50:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasMul       = 1,
  51:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasNegate    = 1,
  52:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasAbs       = 1,
  53:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasArg       = 0,
  54:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasAbs2      = 1,
  55:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasAbsDiff   = 0,
  56:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasMin       = 1,
  57:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasMax       = 1,
  58:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasConj      = 1,
  59:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasSetLinear = 1,
  60:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasSign      = 1,
  61:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasBlend     = 0,
  62:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     // This flag is used to indicate whether packet comparison is supported.
  63:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     // pcmp_eq, pcmp_lt and pcmp_le should be defined for it to be true.
  64:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasCmp       = 0,
  65:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** 
  66:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasDiv    = 0,
ARM GAS  /tmp/ccw5fbVv.s 			page 174


  67:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasReciprocal = 0,
  68:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasSqrt   = 0,
  69:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasRsqrt  = 0,
  70:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasExp    = 0,
  71:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasExpm1  = 0,
  72:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasLog    = 0,
  73:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasLog1p  = 0,
  74:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasLog10  = 0,
  75:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasPow    = 0,
  76:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** 
  77:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasSin    = 0,
  78:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasCos    = 0,
  79:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasTan    = 0,
  80:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasASin   = 0,
  81:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasACos   = 0,
  82:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasATan   = 0,
  83:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasATanh  = 0,
  84:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasSinh   = 0,
  85:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasCosh   = 0,
  86:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasTanh   = 0,
  87:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasLGamma = 0,
  88:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasDiGamma = 0,
  89:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasZeta = 0,
  90:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasPolygamma = 0,
  91:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasErf = 0,
  92:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasErfc = 0,
  93:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasNdtri = 0,
  94:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasBessel = 0,
  95:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasIGamma = 0,
  96:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasIGammaDerA = 0,
  97:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasGammaSampleDerAlpha = 0,
  98:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasIGammac = 0,
  99:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasBetaInc = 0,
 100:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** 
 101:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasRound  = 0,
 102:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasRint   = 0,
 103:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasFloor  = 0,
 104:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasCeil   = 0
 105:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   };
 106:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** };
 107:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** 
 108:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** template<typename T> struct packet_traits : default_packet_traits
 109:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** {
 110:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   typedef T type;
 111:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   typedef T half;
 112:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   enum {
 113:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     Vectorizable = 0,
 114:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     size = 1,
 115:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     AlignedOnScalar = 0,
 116:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   };
 117:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   enum {
 118:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasAdd    = 0,
 119:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasSub    = 0,
 120:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasMul    = 0,
 121:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasNegate = 0,
 122:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasAbs    = 0,
 123:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasAbs2   = 0,
ARM GAS  /tmp/ccw5fbVv.s 			page 175


 124:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasMin    = 0,
 125:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasMax    = 0,
 126:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasConj   = 0,
 127:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     HasSetLinear = 0
 128:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   };
 129:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** };
 130:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** 
 131:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** template<typename T> struct packet_traits<const T> : packet_traits<T> { };
 132:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** 
 133:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** template<typename T> struct unpacket_traits
 134:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** {
 135:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   typedef T type;
 136:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   typedef T half;
 137:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   enum
 138:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   {
 139:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     size = 1,
 140:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     alignment = 1,
 141:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     vectorizable = false,
 142:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     masked_load_available=false,
 143:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     masked_store_available=false
 144:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   };
 145:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** };
 146:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** 
 147:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** template<typename T> struct unpacket_traits<const T> : unpacket_traits<T> { };
 148:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** 
 149:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** /** \internal A convenience utility for determining if the type is a scalar.
 150:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****  * This is used to enable some generic packet implementations.
 151:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****  */
 152:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** template <typename Packet>
 153:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** struct is_scalar {
 154:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   using Scalar = typename unpacket_traits<Packet>::type;
 155:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   enum { value = internal::is_same<Packet, Scalar>::value };
 156:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** };
 157:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** 
 158:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** // automatically and succinctly define combinations of pcast<SrcPacket,TgtPacket> when 
 159:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** // 1) the packets are the same type, or
 160:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** // 2) the packets differ only in sign. 
 161:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** // In both of these cases, preinterpret (bit_cast) is equivalent to pcast (static_cast)
 162:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** template <typename SrcPacket, typename TgtPacket,
 163:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****           bool Scalar = is_scalar<SrcPacket>::value && is_scalar<TgtPacket>::value>
 164:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** struct is_degenerate_helper : is_same<SrcPacket, TgtPacket> {};
 165:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** template <>
 166:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** struct is_degenerate_helper<int8_t, uint8_t, true> : std::true_type {};
 167:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** template <>
 168:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** struct is_degenerate_helper<int16_t, uint16_t, true> : std::true_type {};
 169:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** template <>
 170:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** struct is_degenerate_helper<int32_t, uint32_t, true> : std::true_type {};
 171:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** template <>
 172:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** struct is_degenerate_helper<int64_t, uint64_t, true> : std::true_type {};
 173:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** 
 174:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** template <typename SrcPacket, typename TgtPacket>
 175:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** struct is_degenerate_helper<SrcPacket, TgtPacket, false> {
 176:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   using SrcScalar = typename unpacket_traits<SrcPacket>::type;
 177:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   static constexpr int SrcSize = unpacket_traits<SrcPacket>::size;
 178:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   using TgtScalar = typename unpacket_traits<TgtPacket>::type;
 179:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   static constexpr int TgtSize = unpacket_traits<TgtPacket>::size;
 180:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   static constexpr bool value = is_degenerate_helper<SrcScalar, TgtScalar, true>::value && (SrcSize
ARM GAS  /tmp/ccw5fbVv.s 			page 176


 181:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** };
 182:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** 
 183:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** // is_degenerate<T1,T2>::value == is_degenerate<T2,T1>::value
 184:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** template <typename SrcPacket, typename TgtPacket>
 185:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** struct is_degenerate {
 186:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   static constexpr bool value =
 187:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****       is_degenerate_helper<SrcPacket, TgtPacket>::value || is_degenerate_helper<TgtPacket, SrcPacke
 188:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** };
 189:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** 
 190:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** template <typename Packet>
 191:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** struct is_half {
 192:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   using Scalar = typename unpacket_traits<Packet>::type;
 193:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   static constexpr int Size = unpacket_traits<Packet>::size;
 194:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   using DefaultPacket = typename packet_traits<Scalar>::type;
 195:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   static constexpr int DefaultSize = unpacket_traits<DefaultPacket>::size;
 196:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   static constexpr bool value = Size < DefaultSize;
 197:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** };
 198:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** 
 199:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** template <typename Src, typename Tgt>
 200:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** struct type_casting_traits {
 201:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   enum {
 202:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     VectorizedCast =
 203:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****         is_degenerate<Src, Tgt>::value && packet_traits<Src>::Vectorizable && packet_traits<Tgt>::V
 204:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     SrcCoeffRatio = 1,
 205:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     TgtCoeffRatio = 1
 206:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   };
 207:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** };
 208:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** 
 209:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** 
 210:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** /** \internal Wrapper to ensure that multiple packet types can map to the same
 211:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     same underlying vector type. */
 212:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** template<typename T, int unique_id = 0>
 213:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** struct eigen_packet_wrapper
 214:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** {
 215:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   EIGEN_ALWAYS_INLINE operator T&() { return m_val; }
 216:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   EIGEN_ALWAYS_INLINE operator const T&() const { return m_val; }
 217:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   EIGEN_ALWAYS_INLINE eigen_packet_wrapper() = default;
 218:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   EIGEN_ALWAYS_INLINE eigen_packet_wrapper(const T &v) : m_val(v) {}
 219:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   EIGEN_ALWAYS_INLINE eigen_packet_wrapper& operator=(const T &v) {
 220:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     m_val = v;
 221:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     return *this;
 222:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   }
 223:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** 
 224:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   T m_val;
 225:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** };
 226:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** 
 227:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** template <typename Target, typename Packet, bool IsSame = is_same<Target, Packet>::value>
 228:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** struct preinterpret_generic;
 229:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** 
 230:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** template <typename Target, typename Packet>
 231:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** struct preinterpret_generic<Target, Packet, false> {
 232:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   // the packets are not the same, attempt scalar bit_cast
 233:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Target run(const Packet& a) {
 234:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     return numext::bit_cast<Target, Packet>(a);
 235:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   }
 236:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** };
 237:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** 
ARM GAS  /tmp/ccw5fbVv.s 			page 177


 238:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** template <typename Packet>
 239:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** struct preinterpret_generic<Packet, Packet, true> {
 240:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   // the packets are the same type: do nothing
 241:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet run(const Packet& a) { return a; }
 242:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** };
 243:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** 
 244:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** /** \internal \returns reinterpret_cast<Target>(a) */
 245:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** template <typename Target, typename Packet>
 246:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** EIGEN_DEVICE_FUNC inline Target preinterpret(const Packet& a) {
 247:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   return preinterpret_generic<Target, Packet>::run(a);
 248:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** }
 249:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** 
 250:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** template <typename SrcPacket, typename TgtPacket, bool Degenerate = is_degenerate<SrcPacket, TgtPac
 251:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** struct pcast_generic;
 252:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** 
 253:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** template <typename SrcPacket, typename TgtPacket>
 254:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** struct pcast_generic<SrcPacket, TgtPacket, false, false> {
 255:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   // the packets are not degenerate: attempt scalar static_cast
 256:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE TgtPacket run(const SrcPacket& a) {
 257:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     return cast_impl<SrcPacket, TgtPacket>::run(a);
 258:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   }
 259:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** };
 260:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** 
 261:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** template <typename Packet>
 262:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** struct pcast_generic<Packet, Packet, true, false> {
 263:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   // the packets are the same: do nothing
 264:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet run(const Packet& a) { return a; }
 265:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** };
 266:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** 
 267:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** template <typename SrcPacket, typename TgtPacket, bool TgtIsHalf>
 268:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** struct pcast_generic<SrcPacket, TgtPacket, true, TgtIsHalf> {
 269:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   // the packets are degenerate: preinterpret is equivalent to pcast
 270:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE TgtPacket run(const SrcPacket& a) { return preinterp
 271:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** };
 272:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** 
 273:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** 
 274:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** 
 275:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** /** \internal \returns static_cast<TgtType>(a) (coeff-wise) */
 276:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** template <typename SrcPacket, typename TgtPacket>
 277:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** EIGEN_DEVICE_FUNC inline TgtPacket pcast(const SrcPacket& a) {
 278:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   return pcast_generic<SrcPacket, TgtPacket>::run(a);
 279:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** }
 280:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** template <typename SrcPacket, typename TgtPacket>
 281:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** EIGEN_DEVICE_FUNC inline TgtPacket pcast(const SrcPacket& a, const SrcPacket& b) {
 282:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   return pcast_generic<SrcPacket, TgtPacket>::run(a, b);
 283:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** }
 284:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** template <typename SrcPacket, typename TgtPacket>
 285:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** EIGEN_DEVICE_FUNC inline TgtPacket pcast(const SrcPacket& a, const SrcPacket& b, const SrcPacket& c
 286:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****                                          const SrcPacket& d) {
 287:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   return pcast_generic<SrcPacket, TgtPacket>::run(a, b, c, d);
 288:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** }
 289:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** template <typename SrcPacket, typename TgtPacket>
 290:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** EIGEN_DEVICE_FUNC inline TgtPacket pcast(const SrcPacket& a, const SrcPacket& b, const SrcPacket& c
 291:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****                                          const SrcPacket& e, const SrcPacket& f, const SrcPacket& g
 292:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****                                          const SrcPacket& h) {
 293:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   return pcast_generic<SrcPacket, TgtPacket>::run(a, b, c, d, e, f, g, h);
 294:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** }
ARM GAS  /tmp/ccw5fbVv.s 			page 178


 295:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** 
 296:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** template <typename SrcPacket, typename TgtPacket>
 297:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** struct pcast_generic<SrcPacket, TgtPacket, false, true> {
 298:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   // TgtPacket is a half packet of some other type
 299:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   // perform cast and truncate result
 300:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   using DefaultTgtPacket = typename is_half<TgtPacket>::DefaultPacket;
 301:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   static EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE TgtPacket run(const SrcPacket& a) {
 302:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****     return preinterpret<TgtPacket>(pcast<SrcPacket, DefaultTgtPacket>(a));
 303:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****   }
 304:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** };
 305:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** 
 306:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** /** \internal \returns a + b (coeff-wise) */
 307:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** template<typename Packet> EIGEN_DEVICE_FUNC inline Packet
 308:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** padd(const Packet& a, const Packet& b) { return a+b; }
 309:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** // Avoid compiler warning for boolean algebra.
 310:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** template<> EIGEN_DEVICE_FUNC inline bool
 311:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** padd(const bool& a, const bool& b) { return a || b; }
 312:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** 
 313:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** /** \internal \returns a packet version of \a *from, (un-aligned masked add)
 314:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****  * There is no generic implementation. We only have implementations for specialized
 315:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****  * cases. Generic case should not be called.
 316:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h ****  */
 317:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** template<typename Packet> EIGEN_DEVICE_FUNC inline
 318:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** std::enable_if_t<unpacket_traits<Packet>::masked_fpops_available, Packet>
 319:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** padd(const Packet& a, const Packet& b, typename unpacket_traits<Packet>::mask_t umask);
 320:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** 
 321:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** 
 322:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** /** \internal \returns a - b (coeff-wise) */
 323:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** template<typename Packet> EIGEN_DEVICE_FUNC inline Packet
 324:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** psub(const Packet& a, const Packet& b) { return a-b; }
 325:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** 
 326:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** /** \internal \returns -a (coeff-wise) */
 327:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** template<typename Packet> EIGEN_DEVICE_FUNC inline Packet
 328:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** pnegate(const Packet& a) { return -a; }
 329:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** 
 330:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** template<> EIGEN_DEVICE_FUNC inline bool
 331:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** pnegate(const bool& a) { return !a; }
 332:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** 
 333:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** /** \internal \returns conj(a) (coeff-wise) */
 334:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** template<typename Packet> EIGEN_DEVICE_FUNC inline Packet
 335:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** pconj(const Packet& a) { return numext::conj(a); }
 336:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** 
 337:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** /** \internal \returns a * b (coeff-wise) */
 338:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** template<typename Packet> EIGEN_DEVICE_FUNC inline Packet
 339:../../RTNeural/modules/Eigen/Eigen/src/Core/GenericPacketMath.h **** pmul(const Packet& a, const Packet& b) { return a*b; }
 863              		.loc 25 339 1 view .LVU194
 864              	.LBB1944:
 865              		.loc 25 339 51 is_stmt 0 view .LVU195
 866 0038 D2ED007A 		vldr.32	s15, [r2]
 867 003c 91ED000A 		vldr.32	s0, [r1]
 868 0040 20EE270A 		vmul.f32	s0, s0, s15
 869              	.LVL24:
 870              		.loc 25 339 51 view .LVU196
 871              	.LBE1944:
 872              	.LBE1943:
 873              	.LBE1942:
 874              	.LBE1941:
ARM GAS  /tmp/ccw5fbVv.s 			page 179


 875              	.LBE1939:
 876              	.LBB1945:
 285:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****       res = func(res, eval.coeff(k));
 877              		.loc 20 285 24 is_stmt 1 view .LVU197
 878 0044 F0DD     		ble	.L14
 879 0046 0B1D     		adds	r3, r1, #4
 880 0048 0432     		adds	r2, r2, #4
 881 004a 01EB8601 		add	r1, r1, r6, lsl #2
 882              	.LVL25:
 883              	.L19:
 884              	.LBB1929:
 885              	.LBI1929:
 976:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
 886              		.loc 21 976 19 view .LVU198
 887              	.LBB1930:
 888              	.LBI1930:
1119:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
 889              		.loc 21 1119 19 view .LVU199
 890              	.LBB1931:
1121:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 891              		.loc 21 1121 48 is_stmt 0 view .LVU200
 892 004e B3EC017A 		vldmia.32	r3!, {s14}
 893              	.LVL26:
1121:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   }
 894              		.loc 21 1121 48 view .LVU201
 895              	.LBE1931:
 896              	.LBE1930:
 897              	.LBB1932:
 898              	.LBI1932:
 899              		.loc 23 114 53 is_stmt 1 view .LVU202
 900              	.LBB1933:
 901              	.LBI1933:
 902              		.loc 24 100 48 view .LVU203
 903              	.LBB1934:
 904              	.LBI1934:
 905              		.loc 25 339 1 view .LVU204
 906              	.LBB1935:
 907              		.loc 25 339 50 is_stmt 0 view .LVU205
 908 0052 F2EC017A 		vldmia.32	r2!, {s15}
 909              	.LVL27:
 910              		.loc 25 339 50 view .LVU206
 911              	.LBE1935:
 912              	.LBE1934:
 913              	.LBE1933:
 914              	.LBE1932:
 915              	.LBE1929:
 916              	.LBB1936:
 917              	.LBI1936:
  42:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h ****   template<typename Packet>
 918              		.loc 23 42 53 is_stmt 1 view .LVU207
 919              	.LBE1936:
 285:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****       res = func(res, eval.coeff(k));
 920              		.loc 20 285 24 is_stmt 0 view .LVU208
 921 0056 9942     		cmp	r1, r3
 922              	.LBB1938:
 923              	.LBB1937:
  42:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h ****   template<typename Packet>
ARM GAS  /tmp/ccw5fbVv.s 			page 180


 924              		.loc 23 42 124 view .LVU209
 925 0058 A7EE270A 		vfma.f32	s0, s14, s15
 926              	.LVL28:
  42:../../RTNeural/modules/Eigen/Eigen/src/Core/functors/BinaryFunctors.h ****   template<typename Packet>
 927              		.loc 23 42 124 view .LVU210
 928              	.LBE1937:
 929              	.LBE1938:
 285:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****       res = func(res, eval.coeff(k));
 930              		.loc 20 285 5 is_stmt 1 view .LVU211
 285:../../RTNeural/modules/Eigen/Eigen/src/Core/Redux.h ****       res = func(res, eval.coeff(k));
 931              		.loc 20 285 24 view .LVU212
 932 005c F7D1     		bne	.L19
 933              	.LBE1945:
 934              	.LBE1946:
 935              	.LBE1948:
 936              	.LBE1949:
 937              	.LBE1950:
 938              	.LBE1952:
 939              	.LBE1954:
 940              	.LBE1956:
 941              	.LBE1958:
 942              	.LBE1962:
 943              		.loc 1 43 1 is_stmt 0 view .LVU213
 944 005e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 945              	.LVL29:
 946              	.L24:
 947              	.LBB1963:
 948              	.LBB1959:
 949              		.loc 16 79 3 view .LVU214
 950 0062 074B     		ldr	r3, .L26+4
 951 0064 4F21     		movs	r1, #79
 952 0066 074A     		ldr	r2, .L26+8
 953 0068 0748     		ldr	r0, .L26+12
 954 006a FFF7FEFF 		bl	__assert_func
 955              	.LVL30:
 956              	.L23:
 957              		.loc 16 79 3 view .LVU215
 958              	.LBE1959:
 959              	.LBE1963:
 960              	.LBB1964:
 961              	.LBB1864:
 962              	.LBB1858:
 168:../../RTNeural/modules/Eigen/Eigen/src/Core/MapBase.h ****       eigen_assert(dataPtr == 0 || SizeAtCompileTime == Dynamic || SizeAtCompileTime == vecSize);
 963              		.loc 13 168 7 view .LVU216
 964 006e 074B     		ldr	r3, .L26+16
 965 0070 A821     		movs	r1, #168
 966 0072 074A     		ldr	r2, .L26+20
 967 0074 0748     		ldr	r0, .L26+24
 968 0076 FFF7FEFF 		bl	__assert_func
 969              	.LVL31:
 970              	.L27:
 971 007a 00BF     		.align	2
 972              	.L26:
 973 007c 00000000 		.word	0
 974 0080 48010000 		.word	.LC3
 975 0084 60010000 		.word	.LC4
 976 0088 68030000 		.word	.LC5
ARM GAS  /tmp/ccw5fbVv.s 			page 181


 977 008c 00000000 		.word	.LC0
 978 0090 10000000 		.word	.LC1
 979 0094 10010000 		.word	.LC2
 980              	.LBE1858:
 981              	.LBE1864:
 982              	.LBE1964:
 983              		.cfi_endproc
 984              	.LFE8121:
 986              		.section	.rodata._ZNSt6vectorIfSaIfEE17_M_default_appendEj.str1.4,"aMS",%progbits,1
 987              		.align	2
 988              	.LC6:
 989 0000 76656374 		.ascii	"vector::_M_default_append\000"
 989      6F723A3A 
 989      5F4D5F64 
 989      65666175 
 989      6C745F61 
 990              		.section	.text._ZNSt6vectorIfSaIfEE17_M_default_appendEj,"axG",%progbits,_ZNSt6vectorIfSaIfEE17_M_
 991              		.align	1
 992              		.p2align 2,,3
 993              		.weak	_ZNSt6vectorIfSaIfEE17_M_default_appendEj
 994              		.syntax unified
 995              		.thumb
 996              		.thumb_func
 997              		.fpu fpv5-d16
 999              	_ZNSt6vectorIfSaIfEE17_M_default_appendEj:
 1000              	.LVL32:
 1001              	.LFB8650:
 1002              		.file 26 "/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits
   1:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** // Vector implementation (out of line) -*- C++ -*-
   2:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 
   3:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** //
   5:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** // software; you can redistribute it and/or modify it under the
   7:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** // terms of the GNU General Public License as published by the
   8:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** // Free Software Foundation; either version 3, or (at your option)
   9:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** // any later version.
  10:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 
  11:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** // This library is distributed in the hope that it will be useful,
  12:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** // GNU General Public License for more details.
  15:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 
  16:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** // Under Section 7 of GPL version 3, you are granted additional
  17:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** // permissions described in the GCC Runtime Library Exception, version
  18:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** // 3.1, as published by the Free Software Foundation.
  19:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 
  20:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** // You should have received a copy of the GNU General Public License and
  21:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** // <http://www.gnu.org/licenses/>.
  24:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 
  25:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** /*
  26:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****  *
  27:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****  * Copyright (c) 1994
  28:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****  * Hewlett-Packard Company
  29:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****  *
ARM GAS  /tmp/ccw5fbVv.s 			page 182


  30:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****  * Permission to use, copy, modify, distribute and sell this software
  31:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****  * and its documentation for any purpose is hereby granted without fee,
  32:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****  * provided that the above copyright notice appear in all copies and
  33:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****  * that both that copyright notice and this permission notice appear
  34:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****  * representations about the suitability of this software for any
  36:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****  *
  38:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****  *
  39:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****  * Copyright (c) 1996
  40:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****  * Silicon Graphics Computer Systems, Inc.
  41:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****  *
  42:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****  * Permission to use, copy, modify, distribute and sell this software
  43:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****  * and its documentation for any purpose is hereby granted without fee,
  44:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****  * provided that the above copyright notice appear in all copies and
  45:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****  * that both that copyright notice and this permission notice appear
  46:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****  * in supporting documentation.  Silicon Graphics makes no
  47:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****  * representations about the suitability of this  software for any
  48:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****  */
  50:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 
  51:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** /** @file bits/vector.tcc
  52:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****  *  This is an internal header file, included by other library headers.
  53:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****  *  Do not attempt to use it directly. @headername{vector}
  54:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****  */
  55:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 
  56:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** #ifndef _VECTOR_TCC
  57:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** #define _VECTOR_TCC 1
  58:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 
  59:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** namespace std _GLIBCXX_VISIBILITY(default)
  60:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** {
  61:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  62:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  63:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 
  64:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
  65:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     void
  66:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     vector<_Tp, _Alloc>::
  67:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     reserve(size_type __n)
  68:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     {
  69:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       if (__n > this->max_size())
  70:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	__throw_length_error(__N("vector::reserve"));
  71:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       if (this->capacity() < __n)
  72:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	{
  73:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  const size_type __old_size = size();
  74:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  pointer __tmp;
  75:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** #if __cplusplus >= 201103L
  76:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
  77:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    {
  78:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      __tmp = this->_M_allocate(__n);
  79:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
  80:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 			  __tmp, _M_get_Tp_allocator());
  81:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    }
  82:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  else
  83:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** #endif
  84:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    {
  85:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      __tmp = _M_allocate_and_copy(__n,
  86:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_start),
ARM GAS  /tmp/ccw5fbVv.s 			page 183


  87:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_finish));
  88:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  89:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 			    _M_get_Tp_allocator());
  90:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    }
  91:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  _GLIBCXX_ASAN_ANNOTATE_REINIT;
  92:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  _M_deallocate(this->_M_impl._M_start,
  93:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 			this->_M_impl._M_end_of_storage
  94:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 			- this->_M_impl._M_start);
  95:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  this->_M_impl._M_start = __tmp;
  96:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  this->_M_impl._M_finish = __tmp + __old_size;
  97:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  98:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	}
  99:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     }
 100:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 
 101:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** #if __cplusplus >= 201103L
 102:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 103:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     template<typename... _Args>
 104:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** #if __cplusplus > 201402L
 105:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       typename vector<_Tp, _Alloc>::reference
 106:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** #else
 107:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       void
 108:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** #endif
 109:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       vector<_Tp, _Alloc>::
 110:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       emplace_back(_Args&&... __args)
 111:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       {
 112:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 113:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  {
 114:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
 115:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 116:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 				     std::forward<_Args>(__args)...);
 117:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    ++this->_M_impl._M_finish;
 118:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
 119:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  }
 120:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	else
 121:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 122:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** #if __cplusplus > 201402L
 123:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	return back();
 124:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** #endif
 125:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       }
 126:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** #endif
 127:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 
 128:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 129:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     typename vector<_Tp, _Alloc>::iterator
 130:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 131:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** #if __cplusplus >= 201103L
 132:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     insert(const_iterator __position, const value_type& __x)
 133:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** #else
 134:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     insert(iterator __position, const value_type& __x)
 135:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** #endif
 136:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     {
 137:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       const size_type __n = __position - begin();
 138:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 139:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	if (__position == end())
 140:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  {
 141:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
 142:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 143:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 				     __x);
ARM GAS  /tmp/ccw5fbVv.s 			page 184


 144:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    ++this->_M_impl._M_finish;
 145:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
 146:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  }
 147:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	else
 148:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  {
 149:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** #if __cplusplus >= 201103L
 150:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    const auto __pos = begin() + (__position - cbegin());
 151:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    // __x could be an existing element of this vector, so make a
 152:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    // copy of it before _M_insert_aux moves elements around.
 153:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    _Temporary_value __x_copy(this, __x);
 154:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    _M_insert_aux(__pos, std::move(__x_copy._M_val()));
 155:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** #else
 156:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    _M_insert_aux(__position, __x);
 157:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** #endif
 158:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  }
 159:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       else
 160:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** #if __cplusplus >= 201103L
 161:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	_M_realloc_insert(begin() + (__position - cbegin()), __x);
 162:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** #else
 163:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	_M_realloc_insert(__position, __x);
 164:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** #endif
 165:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 
 166:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       return iterator(this->_M_impl._M_start + __n);
 167:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     }
 168:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 
 169:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 170:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     typename vector<_Tp, _Alloc>::iterator
 171:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 172:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     _M_erase(iterator __position)
 173:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     {
 174:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       if (__position + 1 != end())
 175:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	_GLIBCXX_MOVE3(__position + 1, end(), __position);
 176:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       --this->_M_impl._M_finish;
 177:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 178:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       _GLIBCXX_ASAN_ANNOTATE_SHRINK(1);
 179:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       return __position;
 180:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     }
 181:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 
 182:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 183:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     typename vector<_Tp, _Alloc>::iterator
 184:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 185:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     _M_erase(iterator __first, iterator __last)
 186:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     {
 187:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       if (__first != __last)
 188:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	{
 189:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  if (__last != end())
 190:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    _GLIBCXX_MOVE3(__last, end(), __first);
 191:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  _M_erase_at_end(__first.base() + (end() - __last));
 192:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	}
 193:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       return __first;
 194:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     }
 195:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 
 196:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 197:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     vector<_Tp, _Alloc>&
 198:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 199:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     operator=(const vector<_Tp, _Alloc>& __x)
 200:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     {
ARM GAS  /tmp/ccw5fbVv.s 			page 185


 201:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       if (&__x != this)
 202:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	{
 203:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  _GLIBCXX_ASAN_ANNOTATE_REINIT;
 204:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** #if __cplusplus >= 201103L
 205:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  if (_Alloc_traits::_S_propagate_on_copy_assign())
 206:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    {
 207:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      if (!_Alloc_traits::_S_always_equal()
 208:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
 209:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	        {
 210:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		  // replacement allocator cannot free existing storage
 211:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		  this->clear();
 212:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		  _M_deallocate(this->_M_impl._M_start,
 213:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 				this->_M_impl._M_end_of_storage
 214:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 				- this->_M_impl._M_start);
 215:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		  this->_M_impl._M_start = nullptr;
 216:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		  this->_M_impl._M_finish = nullptr;
 217:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		  this->_M_impl._M_end_of_storage = nullptr;
 218:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		}
 219:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 220:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 				   __x._M_get_Tp_allocator());
 221:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    }
 222:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** #endif
 223:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  const size_type __xlen = __x.size();
 224:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  if (__xlen > capacity())
 225:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    {
 226:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
 227:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 						   __x.end());
 228:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 229:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 			    _M_get_Tp_allocator());
 230:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      _M_deallocate(this->_M_impl._M_start,
 231:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 			    this->_M_impl._M_end_of_storage
 232:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 			    - this->_M_impl._M_start);
 233:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      this->_M_impl._M_start = __tmp;
 234:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 235:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    }
 236:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  else if (size() >= __xlen)
 237:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    {
 238:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 239:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 			    end(), _M_get_Tp_allocator());
 240:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    }
 241:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  else
 242:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    {
 243:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 244:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 			this->_M_impl._M_start);
 245:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 246:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 					  __x._M_impl._M_finish,
 247:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 					  this->_M_impl._M_finish,
 248:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 					  _M_get_Tp_allocator());
 249:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    }
 250:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 251:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	}
 252:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       return *this;
 253:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     }
 254:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 
 255:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 256:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     void
 257:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     vector<_Tp, _Alloc>::
ARM GAS  /tmp/ccw5fbVv.s 			page 186


 258:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     _M_fill_assign(size_t __n, const value_type& __val)
 259:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     {
 260:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       if (__n > capacity())
 261:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	{
 262:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  vector __tmp(__n, __val, _M_get_Tp_allocator());
 263:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  __tmp._M_impl._M_swap_data(this->_M_impl);
 264:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	}
 265:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       else if (__n > size())
 266:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	{
 267:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  std::fill(begin(), end(), __val);
 268:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  const size_type __add = __n - size();
 269:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  _GLIBCXX_ASAN_ANNOTATE_GROW(__add);
 270:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  this->_M_impl._M_finish =
 271:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
 272:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 					  __add, __val, _M_get_Tp_allocator());
 273:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  _GLIBCXX_ASAN_ANNOTATE_GREW(__add);
 274:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	}
 275:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       else
 276:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****         _M_erase_at_end(std::fill_n(this->_M_impl._M_start, __n, __val));
 277:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     }
 278:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 
 279:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 280:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     template<typename _InputIterator>
 281:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       void
 282:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       vector<_Tp, _Alloc>::
 283:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       _M_assign_aux(_InputIterator __first, _InputIterator __last,
 284:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		    std::input_iterator_tag)
 285:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       {
 286:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	pointer __cur(this->_M_impl._M_start);
 287:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	for (; __first != __last && __cur != this->_M_impl._M_finish;
 288:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	     ++__cur, (void)++__first)
 289:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  *__cur = *__first;
 290:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	if (__first == __last)
 291:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  _M_erase_at_end(__cur);
 292:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	else
 293:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  _M_range_insert(end(), __first, __last,
 294:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 			  std::__iterator_category(__first));
 295:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       }
 296:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 
 297:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 298:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     template<typename _ForwardIterator>
 299:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       void
 300:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       vector<_Tp, _Alloc>::
 301:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
 302:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		    std::forward_iterator_tag)
 303:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       {
 304:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	const size_type __len = std::distance(__first, __last);
 305:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 
 306:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	if (__len > capacity())
 307:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  {
 308:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    _S_check_init_len(__len, _M_get_Tp_allocator());
 309:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
 310:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 311:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 			  _M_get_Tp_allocator());
 312:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_REINIT;
 313:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    _M_deallocate(this->_M_impl._M_start,
 314:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 			  this->_M_impl._M_end_of_storage
ARM GAS  /tmp/ccw5fbVv.s 			page 187


 315:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 			  - this->_M_impl._M_start);
 316:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    this->_M_impl._M_start = __tmp;
 317:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
 318:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
 319:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  }
 320:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	else if (size() >= __len)
 321:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  _M_erase_at_end(std::copy(__first, __last, this->_M_impl._M_start));
 322:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	else
 323:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  {
 324:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    _ForwardIterator __mid = __first;
 325:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    std::advance(__mid, size());
 326:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    std::copy(__first, __mid, this->_M_impl._M_start);
 327:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    const size_type __attribute__((__unused__)) __n = __len - size();
 328:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
 329:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    this->_M_impl._M_finish =
 330:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      std::__uninitialized_copy_a(__mid, __last,
 331:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 					  this->_M_impl._M_finish,
 332:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 					  _M_get_Tp_allocator());
 333:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GREW(__n);
 334:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  }
 335:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       }
 336:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 
 337:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** #if __cplusplus >= 201103L
 338:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 339:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     auto
 340:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 341:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     _M_insert_rval(const_iterator __position, value_type&& __v) -> iterator
 342:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     {
 343:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       const auto __n = __position - cbegin();
 344:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 345:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	if (__position == cend())
 346:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  {
 347:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
 348:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 349:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 				     std::move(__v));
 350:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    ++this->_M_impl._M_finish;
 351:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
 352:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  }
 353:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	else
 354:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  _M_insert_aux(begin() + __n, std::move(__v));
 355:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       else
 356:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	_M_realloc_insert(begin() + __n, std::move(__v));
 357:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 
 358:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       return iterator(this->_M_impl._M_start + __n);
 359:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     }
 360:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 
 361:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 362:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     template<typename... _Args>
 363:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       auto
 364:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       vector<_Tp, _Alloc>::
 365:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       _M_emplace_aux(const_iterator __position, _Args&&... __args)
 366:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       -> iterator
 367:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       {
 368:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	const auto __n = __position - cbegin();
 369:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 370:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  if (__position == cend())
 371:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    {
ARM GAS  /tmp/ccw5fbVv.s 			page 188


 372:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      _GLIBCXX_ASAN_ANNOTATE_GROW(1);
 373:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 374:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 				       std::forward<_Args>(__args)...);
 375:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      ++this->_M_impl._M_finish;
 376:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      _GLIBCXX_ASAN_ANNOTATE_GREW(1);
 377:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    }
 378:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  else
 379:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    {
 380:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      // We need to construct a temporary because something in __args...
 381:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      // could alias one of the elements of the container and so we
 382:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      // need to use it before _M_insert_aux moves elements around.
 383:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      _Temporary_value __tmp(this, std::forward<_Args>(__args)...);
 384:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      _M_insert_aux(begin() + __n, std::move(__tmp._M_val()));
 385:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    }
 386:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	else
 387:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  _M_realloc_insert(begin() + __n, std::forward<_Args>(__args)...);
 388:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 
 389:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	return iterator(this->_M_impl._M_start + __n);
 390:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       }
 391:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 
 392:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 393:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     template<typename _Arg>
 394:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       void
 395:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       vector<_Tp, _Alloc>::
 396:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       _M_insert_aux(iterator __position, _Arg&& __arg)
 397:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** #else
 398:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 399:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     void
 400:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 401:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     _M_insert_aux(iterator __position, const _Tp& __x)
 402:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** #endif
 403:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     {
 404:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       _GLIBCXX_ASAN_ANNOTATE_GROW(1);
 405:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 406:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 			       _GLIBCXX_MOVE(*(this->_M_impl._M_finish - 1)));
 407:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       ++this->_M_impl._M_finish;
 408:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       _GLIBCXX_ASAN_ANNOTATE_GREW(1);
 409:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** #if __cplusplus < 201103L
 410:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       _Tp __x_copy = __x;
 411:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** #endif
 412:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       _GLIBCXX_MOVE_BACKWARD3(__position.base(),
 413:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 			      this->_M_impl._M_finish - 2,
 414:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 			      this->_M_impl._M_finish - 1);
 415:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** #if __cplusplus < 201103L
 416:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       *__position = __x_copy;
 417:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** #else
 418:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       *__position = std::forward<_Arg>(__arg);
 419:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** #endif
 420:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     }
 421:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 
 422:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** #if __cplusplus >= 201103L
 423:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 424:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     template<typename... _Args>
 425:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       void
 426:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       vector<_Tp, _Alloc>::
 427:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       _M_realloc_insert(iterator __position, _Args&&... __args)
 428:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** #else
ARM GAS  /tmp/ccw5fbVv.s 			page 189


 429:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 430:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     void
 431:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 432:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     _M_realloc_insert(iterator __position, const _Tp& __x)
 433:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** #endif
 434:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     {
 435:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       const size_type __len =
 436:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 437:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       pointer __old_start = this->_M_impl._M_start;
 438:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       pointer __old_finish = this->_M_impl._M_finish;
 439:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       const size_type __elems_before = __position - begin();
 440:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       pointer __new_start(this->_M_allocate(__len));
 441:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       pointer __new_finish(__new_start);
 442:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       __try
 443:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	{
 444:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  // The order of the three operations is dictated by the C++11
 445:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  // case, where the moves could alter a new element belonging
 446:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  // to the existing vector.  This is an issue only for callers
 447:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  // taking the element by lvalue ref (see last bullet of C++11
 448:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  // [res.on.arguments]).
 449:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  _Alloc_traits::construct(this->_M_impl,
 450:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 				   __new_start + __elems_before,
 451:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** #if __cplusplus >= 201103L
 452:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 				   std::forward<_Args>(__args)...);
 453:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** #else
 454:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 				   __x);
 455:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** #endif
 456:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  __new_finish = pointer();
 457:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 
 458:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** #if __cplusplus >= 201103L
 459:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 460:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    {
 461:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      __new_finish = _S_relocate(__old_start, __position.base(),
 462:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 					 __new_start, _M_get_Tp_allocator());
 463:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 
 464:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      ++__new_finish;
 465:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 
 466:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      __new_finish = _S_relocate(__position.base(), __old_finish,
 467:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 					 __new_finish, _M_get_Tp_allocator());
 468:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    }
 469:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  else
 470:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** #endif
 471:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    {
 472:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      __new_finish
 473:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		= std::__uninitialized_move_if_noexcept_a
 474:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		(__old_start, __position.base(),
 475:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		 __new_start, _M_get_Tp_allocator());
 476:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 
 477:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      ++__new_finish;
 478:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 
 479:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      __new_finish
 480:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		= std::__uninitialized_move_if_noexcept_a
 481:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		(__position.base(), __old_finish,
 482:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		 __new_finish, _M_get_Tp_allocator());
 483:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    }
 484:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	}
 485:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       __catch(...)
ARM GAS  /tmp/ccw5fbVv.s 			page 190


 486:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	{
 487:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  if (!__new_finish)
 488:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    _Alloc_traits::destroy(this->_M_impl,
 489:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 				   __new_start + __elems_before);
 490:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  else
 491:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
 492:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  _M_deallocate(__new_start, __len);
 493:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  __throw_exception_again;
 494:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	}
 495:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** #if __cplusplus >= 201103L
 496:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 497:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** #endif
 498:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 499:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       _GLIBCXX_ASAN_ANNOTATE_REINIT;
 500:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       _M_deallocate(__old_start,
 501:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		    this->_M_impl._M_end_of_storage - __old_start);
 502:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       this->_M_impl._M_start = __new_start;
 503:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       this->_M_impl._M_finish = __new_finish;
 504:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       this->_M_impl._M_end_of_storage = __new_start + __len;
 505:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     }
 506:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 
 507:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 508:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     void
 509:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 510:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     _M_fill_insert(iterator __position, size_type __n, const value_type& __x)
 511:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     {
 512:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       if (__n != 0)
 513:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	{
 514:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  if (size_type(this->_M_impl._M_end_of_storage
 515:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 			- this->_M_impl._M_finish) >= __n)
 516:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    {
 517:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** #if __cplusplus < 201103L
 518:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      value_type __x_copy = __x;
 519:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** #else
 520:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      _Temporary_value __tmp(this, __x);
 521:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      value_type& __x_copy = __tmp._M_val();
 522:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** #endif
 523:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      const size_type __elems_after = end() - __position;
 524:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      pointer __old_finish(this->_M_impl._M_finish);
 525:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      if (__elems_after > __n)
 526:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		{
 527:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		  _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
 528:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		  std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
 529:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 					      this->_M_impl._M_finish,
 530:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 					      this->_M_impl._M_finish,
 531:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 					      _M_get_Tp_allocator());
 532:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		  this->_M_impl._M_finish += __n;
 533:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		  _GLIBCXX_ASAN_ANNOTATE_GREW(__n);
 534:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		  _GLIBCXX_MOVE_BACKWARD3(__position.base(),
 535:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 					  __old_finish - __n, __old_finish);
 536:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		  std::fill(__position.base(), __position.base() + __n,
 537:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 			    __x_copy);
 538:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		}
 539:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      else
 540:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		{
 541:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		  _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
 542:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		  this->_M_impl._M_finish =
ARM GAS  /tmp/ccw5fbVv.s 			page 191


 543:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		    std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
 544:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 						  __n - __elems_after,
 545:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 						  __x_copy,
 546:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 						  _M_get_Tp_allocator());
 547:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		  _GLIBCXX_ASAN_ANNOTATE_GREW(__n - __elems_after);
 548:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		  std::__uninitialized_move_a(__position.base(), __old_finish,
 549:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 					      this->_M_impl._M_finish,
 550:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 					      _M_get_Tp_allocator());
 551:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		  this->_M_impl._M_finish += __elems_after;
 552:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		  _GLIBCXX_ASAN_ANNOTATE_GREW(__elems_after);
 553:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		  std::fill(__position.base(), __old_finish, __x_copy);
 554:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		}
 555:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    }
 556:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  else
 557:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    {
 558:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      const size_type __len =
 559:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		_M_check_len(__n, "vector::_M_fill_insert");
 560:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      const size_type __elems_before = __position - begin();
 561:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      pointer __new_start(this->_M_allocate(__len));
 562:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      pointer __new_finish(__new_start);
 563:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      __try
 564:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		{
 565:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		  // See _M_realloc_insert above.
 566:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		  std::__uninitialized_fill_n_a(__new_start + __elems_before,
 567:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 						__n, __x,
 568:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 						_M_get_Tp_allocator());
 569:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		  __new_finish = pointer();
 570:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 
 571:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		  __new_finish
 572:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		    = std::__uninitialized_move_if_noexcept_a
 573:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		    (this->_M_impl._M_start, __position.base(),
 574:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		     __new_start, _M_get_Tp_allocator());
 575:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 
 576:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		  __new_finish += __n;
 577:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 
 578:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		  __new_finish
 579:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		    = std::__uninitialized_move_if_noexcept_a
 580:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		    (__position.base(), this->_M_impl._M_finish,
 581:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		     __new_finish, _M_get_Tp_allocator());
 582:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		}
 583:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      __catch(...)
 584:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		{
 585:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		  if (!__new_finish)
 586:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		    std::_Destroy(__new_start + __elems_before,
 587:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 				  __new_start + __elems_before + __n,
 588:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 				  _M_get_Tp_allocator());
 589:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		  else
 590:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		    std::_Destroy(__new_start, __new_finish,
 591:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 				  _M_get_Tp_allocator());
 592:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		  _M_deallocate(__new_start, __len);
 593:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		  __throw_exception_again;
 594:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		}
 595:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 596:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 			    _M_get_Tp_allocator());
 597:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      _GLIBCXX_ASAN_ANNOTATE_REINIT;
 598:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      _M_deallocate(this->_M_impl._M_start,
 599:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 			    this->_M_impl._M_end_of_storage
ARM GAS  /tmp/ccw5fbVv.s 			page 192


 600:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 			    - this->_M_impl._M_start);
 601:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      this->_M_impl._M_start = __new_start;
 602:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      this->_M_impl._M_finish = __new_finish;
 603:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      this->_M_impl._M_end_of_storage = __new_start + __len;
 604:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    }
 605:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	}
 606:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     }
 607:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 
 608:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** #if __cplusplus >= 201103L
 609:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 610:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     void
 611:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 1003              		.loc 26 611 5 is_stmt 1 view -0
 1004              		.cfi_startproc
 1005              		@ args = 0, pretend = 0, frame = 0
 1006              		@ frame_needed = 0, uses_anonymous_args = 0
 1007              	.LBB2017:
 612:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     _M_default_append(size_type __n)
 613:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     {
 614:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****       if (__n != 0)
 1008              		.loc 26 614 7 is_stmt 0 view .LVU218
 1009 0000 E9B1     		cbz	r1, .L49
 1010              	.LVL33:
 1011              	.LBB2018:
 1012              	.LBB2019:
 1013              	.LBI2019:
 918:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 1014              		.loc 2 918 7 is_stmt 1 view .LVU219
 1015              	.LBE2019:
 615:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	{
 616:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  const size_type __size = size();
 617:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
 618:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 					 - this->_M_impl._M_finish);
 1016              		.loc 26 618 7 is_stmt 0 view .LVU220
 1017 0002 8268     		ldr	r2, [r0, #8]
 1018              	.LBE2018:
 1019              	.LBE2017:
 611:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     _M_default_append(size_type __n)
 1020              		.loc 26 611 5 view .LVU221
 1021 0004 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1022              		.cfi_def_cfa_offset 40
 1023              		.cfi_offset 3, -40
 1024              		.cfi_offset 4, -36
 1025              		.cfi_offset 5, -32
 1026              		.cfi_offset 6, -28
 1027              		.cfi_offset 7, -24
 1028              		.cfi_offset 8, -20
 1029              		.cfi_offset 9, -16
 1030              		.cfi_offset 10, -12
 1031              		.cfi_offset 11, -8
 1032              		.cfi_offset 14, -4
 1033              	.LBB2119:
 1034              	.LBB2114:
 1035              	.LBB2023:
 1036              	.LBB2020:
 919:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 1037              		.loc 2 919 66 view .LVU222
ARM GAS  /tmp/ccw5fbVv.s 			page 193


 1038 0008 D0E90083 		ldrd	r8, r3, [r0]
 1039 000c 0C46     		mov	r4, r1
 1040              	.LBE2020:
 1041              	.LBE2023:
 619:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 
 620:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  if (__size > max_size() || __navail > max_size() - __size)
 1042              		.loc 26 620 53 view .LVU223
 1043 000e 6FF06049 		mvn	r9, #-536870912
 618:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 
 1044              		.loc 26 618 7 view .LVU224
 1045 0012 D21A     		subs	r2, r2, r3
 1046              	.LBB2024:
 1047              	.LBB2021:
 919:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 1048              		.loc 2 919 50 view .LVU225
 1049 0014 A3EB0807 		sub	r7, r3, r8
 1050 0018 0546     		mov	r5, r0
 1051              	.LBE2021:
 1052              	.LBE2024:
 1053              	.LBB2025:
 621:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    __builtin_unreachable();
 622:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 
 623:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  if (__navail >= __n)
 1054              		.loc 26 623 4 view .LVU226
 1055 001a B4EBA20F 		cmp	r4, r2, asr #2
 1056              	.LBE2025:
 1057              	.LBB2108:
 1058              	.LBB2022:
 919:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 1059              		.loc 2 919 50 view .LVU227
 1060 001e 4FEAA706 		asr	r6, r7, #2
 1061              	.LVL34:
 919:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 1062              		.loc 2 919 50 view .LVU228
 1063              	.LBE2022:
 1064              	.LBE2108:
 620:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    __builtin_unreachable();
 1065              		.loc 26 620 53 view .LVU229
 1066 0022 A9EBA701 		sub	r1, r9, r7, asr #2
 1067              	.LVL35:
 1068              	.LBB2109:
 1069              		.loc 26 623 4 view .LVU230
 1070 0026 0BD8     		bhi	.L30
 1071              	.LVL36:
 1072              	.LBB2026:
 1073              	.LBI2026:
 1074              		.file 27 "/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits
   1:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** // Raw memory manipulators -*- C++ -*-
   2:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
   3:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** //
   5:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** // software; you can redistribute it and/or modify it under the
   7:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** // terms of the GNU General Public License as published by the
   8:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** // any later version.
  10:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
ARM GAS  /tmp/ccw5fbVv.s 			page 194


  11:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** // This library is distributed in the hope that it will be useful,
  12:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** // GNU General Public License for more details.
  15:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
  16:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** // 3.1, as published by the Free Software Foundation.
  19:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
  20:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** // You should have received a copy of the GNU General Public License and
  21:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** // <http://www.gnu.org/licenses/>.
  24:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
  25:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** /*
  26:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****  *
  27:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****  * Copyright (c) 1994
  28:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****  * Hewlett-Packard Company
  29:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****  *
  30:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****  * provided that the above copyright notice appear in all copies and
  33:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****  * that both that copyright notice and this permission notice appear
  34:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****  * representations about the suitability of this software for any
  36:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****  *
  38:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****  *
  39:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****  * Copyright (c) 1996,1997
  40:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****  *
  42:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****  * provided that the above copyright notice appear in all copies and
  45:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****  * that both that copyright notice and this permission notice appear
  46:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****  * representations about the suitability of this software for any
  48:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****  */
  50:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
  51:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** /** @file bits/stl_uninitialized.h
  52:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****  *  This is an internal header file, included by other library headers.
  53:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****  *  Do not attempt to use it directly. @headername{memory}
  54:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****  */
  55:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
  56:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** #ifndef _STL_UNINITIALIZED_H
  57:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** #define _STL_UNINITIALIZED_H 1
  58:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
  59:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** #if __cplusplus > 201402L
  60:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** #include <bits/stl_pair.h>
  61:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** #endif
  62:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
  63:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** #if __cplusplus >= 201103L
  64:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** #include <type_traits>
  65:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** #endif
  66:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
  67:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** #include <ext/alloc_traits.h>
ARM GAS  /tmp/ccw5fbVv.s 			page 195


  68:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
  69:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** namespace std _GLIBCXX_VISIBILITY(default)
  70:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** {
  71:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  72:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
  73:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   /** @addtogroup memory
  74:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****    *  @{
  75:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****    */
  76:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
  77:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   /// @cond undocumented
  78:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
  79:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   template<bool _TrivialValueTypes>
  80:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     struct __uninitialized_copy
  81:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     {
  82:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       template<typename _InputIterator, typename _ForwardIterator>
  83:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****         static _ForwardIterator
  84:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****         __uninit_copy(_InputIterator __first, _InputIterator __last,
  85:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 		      _ForwardIterator __result)
  86:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****         {
  87:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  _ForwardIterator __cur = __result;
  88:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  __try
  89:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	    {
  90:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	      for (; __first != __last; ++__first, (void)++__cur)
  91:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
  92:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	      return __cur;
  93:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	    }
  94:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  __catch(...)
  95:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	    {
  96:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	      std::_Destroy(__result, __cur);
  97:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	      __throw_exception_again;
  98:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	    }
  99:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	}
 100:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     };
 101:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 102:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   template<>
 103:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     struct __uninitialized_copy<true>
 104:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     {
 105:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       template<typename _InputIterator, typename _ForwardIterator>
 106:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****         static _ForwardIterator
 107:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****         __uninit_copy(_InputIterator __first, _InputIterator __last,
 108:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 		      _ForwardIterator __result)
 109:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****         { return std::copy(__first, __last, __result); }
 110:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     };
 111:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 112:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   /// @endcond
 113:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 114:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   /**
 115:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****    *  @brief Copies the range [first,last) into result.
 116:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****    *  @param  __first  An input iterator.
 117:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****    *  @param  __last   An input iterator.
 118:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****    *  @param  __result An output iterator.
 119:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****    *  @return   __result + (__first - __last)
 120:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****    *
 121:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****    *  Like copy(), but does not require an initialized output range.
 122:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   */
 123:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator>
 124:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     inline _ForwardIterator
ARM GAS  /tmp/ccw5fbVv.s 			page 196


 125:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     uninitialized_copy(_InputIterator __first, _InputIterator __last,
 126:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 		       _ForwardIterator __result)
 127:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     {
 128:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_InputIterator>::value_type
 129:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	_ValueType1;
 130:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 131:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	_ValueType2;
 132:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** #if __cplusplus < 201103L
 133:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       const bool __assignable = true;
 134:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** #else
 135:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       // Trivial types can have deleted copy constructor, but the std::copy
 136:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       // optimization that uses memmove would happily "copy" them anyway.
 137:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       static_assert(is_constructible<_ValueType2, decltype(*__first)>::value,
 138:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  "result type must be constructible from value type of input range");
 139:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 140:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_InputIterator>::reference _RefType1;
 141:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::reference _RefType2;
 142:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       // Trivial types can have deleted assignment, so using std::copy
 143:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       // would be ill-formed. Require assignability before using std::copy:
 144:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 145:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** #endif
 146:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 147:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       return std::__uninitialized_copy<__is_trivial(_ValueType1)
 148:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 				       && __is_trivial(_ValueType2)
 149:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 				       && __assignable>::
 150:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	__uninit_copy(__first, __last, __result);
 151:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     }
 152:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 153:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   /// @cond undocumented
 154:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 155:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   template<bool _TrivialValueType>
 156:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     struct __uninitialized_fill
 157:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     {
 158:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Tp>
 159:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****         static void
 160:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****         __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
 161:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 		      const _Tp& __x)
 162:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****         {
 163:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 164:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  __try
 165:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	    {
 166:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	      for (; __cur != __last; ++__cur)
 167:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), __x);
 168:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	    }
 169:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  __catch(...)
 170:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	    {
 171:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 172:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	      __throw_exception_again;
 173:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	    }
 174:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	}
 175:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     };
 176:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 177:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   template<>
 178:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     struct __uninitialized_fill<true>
 179:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     {
 180:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Tp>
 181:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****         static void
ARM GAS  /tmp/ccw5fbVv.s 			page 197


 182:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****         __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
 183:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 		      const _Tp& __x)
 184:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****         { std::fill(__first, __last, __x); }
 185:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     };
 186:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 187:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   /// @endcond
 188:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 189:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   /**
 190:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****    *  @brief Copies the value x into the range [first,last).
 191:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****    *  @param  __first  An input iterator.
 192:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****    *  @param  __last   An input iterator.
 193:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****    *  @param  __x      The source value.
 194:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****    *  @return   Nothing.
 195:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****    *
 196:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****    *  Like fill(), but does not require an initialized output range.
 197:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   */
 198:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp>
 199:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     inline void
 200:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last,
 201:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 		       const _Tp& __x)
 202:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     {
 203:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 204:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	_ValueType;
 205:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** #if __cplusplus < 201103L
 206:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       const bool __assignable = true;
 207:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** #else
 208:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       // Trivial types can have deleted copy constructor, but the std::fill
 209:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       // optimization that uses memmove would happily "copy" them anyway.
 210:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       static_assert(is_constructible<_ValueType, const _Tp&>::value,
 211:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  "result type must be constructible from input type");
 212:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 213:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       // Trivial types can have deleted assignment, so using std::fill
 214:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       // would be ill-formed. Require assignability before using std::fill:
 215:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       const bool __assignable = is_copy_assignable<_ValueType>::value;
 216:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** #endif
 217:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 218:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       std::__uninitialized_fill<__is_trivial(_ValueType) && __assignable>::
 219:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	__uninit_fill(__first, __last, __x);
 220:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     }
 221:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 222:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   /// @cond undocumented
 223:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 224:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   template<bool _TrivialValueType>
 225:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     struct __uninitialized_fill_n
 226:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     {
 227:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size, typename _Tp>
 228:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****         static _ForwardIterator
 229:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****         __uninit_fill_n(_ForwardIterator __first, _Size __n,
 230:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 			const _Tp& __x)
 231:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****         {
 232:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 233:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  __try
 234:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	    {
 235:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	      for (; __n > 0; --__n, (void) ++__cur)
 236:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), __x);
 237:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	      return __cur;
 238:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	    }
ARM GAS  /tmp/ccw5fbVv.s 			page 198


 239:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  __catch(...)
 240:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	    {
 241:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 242:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	      __throw_exception_again;
 243:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	    }
 244:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	}
 245:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     };
 246:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 247:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   template<>
 248:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     struct __uninitialized_fill_n<true>
 249:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     {
 250:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size, typename _Tp>
 251:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****         static _ForwardIterator
 252:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****         __uninit_fill_n(_ForwardIterator __first, _Size __n,
 253:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 			const _Tp& __x)
 254:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****         { return std::fill_n(__first, __n, __x); }
 255:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     };
 256:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 257:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   /// @endcond
 258:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 259:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****    // _GLIBCXX_RESOLVE_LIB_DEFECTS
 260:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****    // DR 1339. uninitialized_fill_n should return the end of its range
 261:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   /**
 262:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****    *  @brief Copies the value x into the range [first,first+n).
 263:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****    *  @param  __first  An input iterator.
 264:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****    *  @param  __n      The number of copies to make.
 265:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****    *  @param  __x      The source value.
 266:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****    *  @return   Nothing.
 267:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****    *
 268:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****    *  Like fill_n(), but does not require an initialized output range.
 269:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   */
 270:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Tp>
 271:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     inline _ForwardIterator
 272:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
 273:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     {
 274:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 275:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	_ValueType;
 276:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** #if __cplusplus < 201103L
 277:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       const bool __assignable = true;
 278:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** #else
 279:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       // Trivial types can have deleted copy constructor, but the std::fill
 280:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       // optimization that uses memmove would happily "copy" them anyway.
 281:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       static_assert(is_constructible<_ValueType, const _Tp&>::value,
 282:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  "result type must be constructible from input type");
 283:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 284:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       // Trivial types can have deleted assignment, so using std::fill
 285:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       // would be ill-formed. Require assignability before using std::fill:
 286:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       const bool __assignable = is_copy_assignable<_ValueType>::value;
 287:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** #endif
 288:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       return __uninitialized_fill_n<__is_trivial(_ValueType) && __assignable>::
 289:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	__uninit_fill_n(__first, __n, __x);
 290:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     }
 291:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 292:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   /// @cond undocumented
 293:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 294:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   // Extensions: versions of uninitialized_copy, uninitialized_fill,
 295:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   //  and uninitialized_fill_n that take an allocator parameter.
ARM GAS  /tmp/ccw5fbVv.s 			page 199


 296:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   //  We dispatch back to the standard versions when we're given the
 297:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   //  default allocator.  For nondefault allocators we do not use 
 298:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   //  any of the POD optimizations.
 299:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 300:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator,
 301:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	   typename _Allocator>
 302:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     _ForwardIterator
 303:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 304:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 			   _ForwardIterator __result, _Allocator& __alloc)
 305:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     {
 306:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       _ForwardIterator __cur = __result;
 307:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       __try
 308:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	{
 309:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 310:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  for (; __first != __last; ++__first, (void)++__cur)
 311:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	    __traits::construct(__alloc, std::__addressof(*__cur), *__first);
 312:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  return __cur;
 313:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	}
 314:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       __catch(...)
 315:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	{
 316:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  std::_Destroy(__result, __cur, __alloc);
 317:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 318:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	}
 319:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     }
 320:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 321:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
 322:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     inline _ForwardIterator
 323:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 324:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 			   _ForwardIterator __result, allocator<_Tp>&)
 325:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     { return std::uninitialized_copy(__first, __last, __result); }
 326:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 327:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator,
 328:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	   typename _Allocator>
 329:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     inline _ForwardIterator
 330:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
 331:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 			   _ForwardIterator __result, _Allocator& __alloc)
 332:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     {
 333:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       return std::__uninitialized_copy_a(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),
 334:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 					 _GLIBCXX_MAKE_MOVE_ITERATOR(__last),
 335:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 					 __result, __alloc);
 336:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     }
 337:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 338:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator,
 339:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	   typename _Allocator>
 340:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     inline _ForwardIterator
 341:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     __uninitialized_move_if_noexcept_a(_InputIterator __first,
 342:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 				       _InputIterator __last,
 343:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 				       _ForwardIterator __result,
 344:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 				       _Allocator& __alloc)
 345:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     {
 346:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       return std::__uninitialized_copy_a
 347:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 348:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 349:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     }
 350:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 351:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp, typename _Allocator>
 352:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     void
ARM GAS  /tmp/ccw5fbVv.s 			page 200


 353:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
 354:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 			   const _Tp& __x, _Allocator& __alloc)
 355:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     {
 356:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       _ForwardIterator __cur = __first;
 357:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       __try
 358:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	{
 359:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 360:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  for (; __cur != __last; ++__cur)
 361:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	    __traits::construct(__alloc, std::__addressof(*__cur), __x);
 362:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	}
 363:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       __catch(...)
 364:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	{
 365:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  std::_Destroy(__first, __cur, __alloc);
 366:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 367:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	}
 368:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     }
 369:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 370:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp, typename _Tp2>
 371:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     inline void
 372:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
 373:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 			   const _Tp& __x, allocator<_Tp2>&)
 374:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     { std::uninitialized_fill(__first, __last, __x); }
 375:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 376:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Tp,
 377:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	   typename _Allocator>
 378:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     _ForwardIterator
 379:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, 
 380:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 			     const _Tp& __x, _Allocator& __alloc)
 381:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     {
 382:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       _ForwardIterator __cur = __first;
 383:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       __try
 384:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	{
 385:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 386:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  for (; __n > 0; --__n, (void) ++__cur)
 387:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	    __traits::construct(__alloc, std::__addressof(*__cur), __x);
 388:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  return __cur;
 389:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	}
 390:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       __catch(...)
 391:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	{
 392:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  std::_Destroy(__first, __cur, __alloc);
 393:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 394:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	}
 395:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     }
 396:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 397:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Tp,
 398:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	   typename _Tp2>
 399:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     inline _ForwardIterator
 400:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, 
 401:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 			     const _Tp& __x, allocator<_Tp2>&)
 402:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     { return std::uninitialized_fill_n(__first, __n, __x); }
 403:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 404:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 405:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   // Extensions: __uninitialized_copy_move, __uninitialized_move_copy,
 406:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   // __uninitialized_fill_move, __uninitialized_move_fill.
 407:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   // All of these algorithms take a user-supplied allocator, which is used
 408:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   // for construction and destruction.
 409:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
ARM GAS  /tmp/ccw5fbVv.s 			page 201


 410:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   // __uninitialized_copy_move
 411:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   // Copies [first1, last1) into [result, result + (last1 - first1)), and
 412:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   //  move [first2, last2) into
 413:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   //  [result, result + (last1 - first1) + (last2 - first2)).
 414:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   template<typename _InputIterator1, typename _InputIterator2,
 415:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	   typename _ForwardIterator, typename _Allocator>
 416:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     inline _ForwardIterator
 417:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     __uninitialized_copy_move(_InputIterator1 __first1,
 418:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 			      _InputIterator1 __last1,
 419:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 			      _InputIterator2 __first2,
 420:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 			      _InputIterator2 __last2,
 421:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 			      _ForwardIterator __result,
 422:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 			      _Allocator& __alloc)
 423:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     {
 424:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       _ForwardIterator __mid = std::__uninitialized_copy_a(__first1, __last1,
 425:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 							   __result,
 426:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 							   __alloc);
 427:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       __try
 428:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	{
 429:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  return std::__uninitialized_move_a(__first2, __last2, __mid, __alloc);
 430:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	}
 431:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       __catch(...)
 432:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	{
 433:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  std::_Destroy(__result, __mid, __alloc);
 434:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 435:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	}
 436:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     }
 437:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 438:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   // __uninitialized_move_copy
 439:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   // Moves [first1, last1) into [result, result + (last1 - first1)), and
 440:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   //  copies [first2, last2) into
 441:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   //  [result, result + (last1 - first1) + (last2 - first2)).
 442:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   template<typename _InputIterator1, typename _InputIterator2,
 443:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	   typename _ForwardIterator, typename _Allocator>
 444:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     inline _ForwardIterator
 445:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     __uninitialized_move_copy(_InputIterator1 __first1,
 446:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 			      _InputIterator1 __last1,
 447:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 			      _InputIterator2 __first2,
 448:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 			      _InputIterator2 __last2,
 449:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 			      _ForwardIterator __result,
 450:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 			      _Allocator& __alloc)
 451:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     {
 452:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       _ForwardIterator __mid = std::__uninitialized_move_a(__first1, __last1,
 453:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 							   __result,
 454:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 							   __alloc);
 455:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       __try
 456:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	{
 457:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  return std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc);
 458:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	}
 459:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       __catch(...)
 460:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	{
 461:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  std::_Destroy(__result, __mid, __alloc);
 462:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 463:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	}
 464:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     }
 465:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   
 466:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   // __uninitialized_fill_move
ARM GAS  /tmp/ccw5fbVv.s 			page 202


 467:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   // Fills [result, mid) with x, and moves [first, last) into
 468:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   //  [mid, mid + (last - first)).
 469:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp, typename _InputIterator,
 470:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	   typename _Allocator>
 471:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     inline _ForwardIterator
 472:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     __uninitialized_fill_move(_ForwardIterator __result, _ForwardIterator __mid,
 473:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 			      const _Tp& __x, _InputIterator __first,
 474:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 			      _InputIterator __last, _Allocator& __alloc)
 475:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     {
 476:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       std::__uninitialized_fill_a(__result, __mid, __x, __alloc);
 477:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       __try
 478:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	{
 479:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  return std::__uninitialized_move_a(__first, __last, __mid, __alloc);
 480:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	}
 481:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       __catch(...)
 482:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	{
 483:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  std::_Destroy(__result, __mid, __alloc);
 484:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 485:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	}
 486:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     }
 487:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 488:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   // __uninitialized_move_fill
 489:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   // Moves [first1, last1) into [first2, first2 + (last1 - first1)), and
 490:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   //  fills [first2 + (last1 - first1), last2) with x.
 491:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator, typename _Tp,
 492:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	   typename _Allocator>
 493:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     inline void
 494:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     __uninitialized_move_fill(_InputIterator __first1, _InputIterator __last1,
 495:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 			      _ForwardIterator __first2,
 496:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 			      _ForwardIterator __last2, const _Tp& __x,
 497:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 			      _Allocator& __alloc)
 498:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     {
 499:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       _ForwardIterator __mid2 = std::__uninitialized_move_a(__first1, __last1,
 500:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 							    __first2,
 501:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 							    __alloc);
 502:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       __try
 503:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	{
 504:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  std::__uninitialized_fill_a(__mid2, __last2, __x, __alloc);
 505:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	}
 506:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       __catch(...)
 507:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	{
 508:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  std::_Destroy(__first2, __mid2, __alloc);
 509:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 510:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	}
 511:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     }
 512:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 513:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   /// @endcond
 514:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 515:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** #if __cplusplus >= 201103L
 516:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   /// @cond undocumented
 517:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 518:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   // Extensions: __uninitialized_default, __uninitialized_default_n,
 519:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   // __uninitialized_default_a, __uninitialized_default_n_a.
 520:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 521:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   template<bool _TrivialValueType>
 522:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     struct __uninitialized_default_1
 523:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     {
ARM GAS  /tmp/ccw5fbVv.s 			page 203


 524:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       template<typename _ForwardIterator>
 525:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****         static void
 526:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****         __uninit_default(_ForwardIterator __first, _ForwardIterator __last)
 527:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****         {
 528:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 529:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  __try
 530:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	    {
 531:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	      for (; __cur != __last; ++__cur)
 532:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur));
 533:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	    }
 534:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  __catch(...)
 535:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	    {
 536:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 537:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	      __throw_exception_again;
 538:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	    }
 539:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	}
 540:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     };
 541:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 542:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   template<>
 543:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     struct __uninitialized_default_1<true>
 544:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     {
 545:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       template<typename _ForwardIterator>
 546:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****         static void
 547:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****         __uninit_default(_ForwardIterator __first, _ForwardIterator __last)
 548:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****         {
 549:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  typedef typename iterator_traits<_ForwardIterator>::value_type
 550:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	    _ValueType;
 551:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 552:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  std::fill(__first, __last, _ValueType());
 553:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	}
 554:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     };
 555:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 556:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   template<bool _TrivialValueType>
 557:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     struct __uninitialized_default_n_1
 558:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     {
 559:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size>
 560:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****         static _ForwardIterator
 561:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****         __uninit_default_n(_ForwardIterator __first, _Size __n)
 562:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****         {
 563:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 564:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  __try
 565:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	    {
 566:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	      for (; __n > 0; --__n, (void) ++__cur)
 567:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur));
 568:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	      return __cur;
 569:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	    }
 570:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  __catch(...)
 571:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	    {
 572:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 573:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	      __throw_exception_again;
 574:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	    }
 575:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	}
 576:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     };
 577:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 578:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   template<>
 579:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     struct __uninitialized_default_n_1<true>
 580:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     {
ARM GAS  /tmp/ccw5fbVv.s 			page 204


 581:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size>
 582:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****         static _ForwardIterator
 583:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****         __uninit_default_n(_ForwardIterator __first, _Size __n)
 584:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****         {
 585:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  typedef typename iterator_traits<_ForwardIterator>::value_type
 586:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	    _ValueType;
 587:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 588:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  return std::fill_n(__first, __n, _ValueType());
 589:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	}
 590:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     };
 591:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 592:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   // __uninitialized_default
 593:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   // Fills [first, last) with std::distance(first, last) default
 594:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   // constructed value_types(s).
 595:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   template<typename _ForwardIterator>
 596:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     inline void
 597:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     __uninitialized_default(_ForwardIterator __first,
 598:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 			    _ForwardIterator __last)
 599:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     {
 600:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 601:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	_ValueType;
 602:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       // trivial types can have deleted assignment
 603:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       const bool __assignable = is_copy_assignable<_ValueType>::value;
 604:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 605:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       std::__uninitialized_default_1<__is_trivial(_ValueType)
 606:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 				     && __assignable>::
 607:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	__uninit_default(__first, __last);
 608:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     }
 609:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 610:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   // __uninitialized_default_n
 611:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   // Fills [first, first + n) with n default constructed value_type(s).
 612:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size>
 613:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     inline _ForwardIterator
 614:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     __uninitialized_default_n(_ForwardIterator __first, _Size __n)
 615:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     {
 616:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 617:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	_ValueType;
 618:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       // trivial types can have deleted assignment
 619:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       const bool __assignable = is_copy_assignable<_ValueType>::value;
 620:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 621:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       return __uninitialized_default_n_1<__is_trivial(_ValueType)
 622:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 				       && __assignable>::
 623:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	__uninit_default_n(__first, __n);
 624:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     }
 625:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 626:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 627:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   // __uninitialized_default_a
 628:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   // Fills [first, last) with std::distance(first, last) default
 629:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   // constructed value_types(s), constructed with the allocator alloc.
 630:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Allocator>
 631:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     void
 632:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     __uninitialized_default_a(_ForwardIterator __first,
 633:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 			      _ForwardIterator __last,
 634:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 			      _Allocator& __alloc)
 635:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     {
 636:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       _ForwardIterator __cur = __first;
 637:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       __try
ARM GAS  /tmp/ccw5fbVv.s 			page 205


 638:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	{
 639:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 640:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  for (; __cur != __last; ++__cur)
 641:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	    __traits::construct(__alloc, std::__addressof(*__cur));
 642:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	}
 643:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       __catch(...)
 644:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	{
 645:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  std::_Destroy(__first, __cur, __alloc);
 646:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 647:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	}
 648:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     }
 649:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 650:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp>
 651:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     inline void
 652:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     __uninitialized_default_a(_ForwardIterator __first,
 653:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 			      _ForwardIterator __last,
 654:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 			      allocator<_Tp>&)
 655:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     { std::__uninitialized_default(__first, __last); }
 656:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 657:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 658:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   // __uninitialized_default_n_a
 659:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   // Fills [first, first + n) with n default constructed value_types(s),
 660:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   // constructed with the allocator alloc.
 661:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Allocator>
 662:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     _ForwardIterator
 663:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     __uninitialized_default_n_a(_ForwardIterator __first, _Size __n, 
 664:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 				_Allocator& __alloc)
 665:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     {
 666:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       _ForwardIterator __cur = __first;
 667:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       __try
 668:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	{
 669:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 670:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  for (; __n > 0; --__n, (void) ++__cur)
 671:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	    __traits::construct(__alloc, std::__addressof(*__cur));
 672:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  return __cur;
 673:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	}
 674:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       __catch(...)
 675:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	{
 676:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  std::_Destroy(__first, __cur, __alloc);
 677:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 678:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	}
 679:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     }
 680:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 681:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Tp>
 682:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     inline _ForwardIterator
 683:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     __uninitialized_default_n_a(_ForwardIterator __first, _Size __n, 
 1075              		.loc 27 683 5 is_stmt 1 view .LVU231
 1076              	.LBB2027:
 1077              	.LBI2027:
 614:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     {
 1078              		.loc 27 614 5 view .LVU232
 1079              	.LBB2028:
 1080              	.LBB2029:
 1081              	.LBI2029:
 583:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****         {
 1082              		.loc 27 583 9 view .LVU233
 1083              	.LBB2030:
ARM GAS  /tmp/ccw5fbVv.s 			page 206


 1084              	.LBB2031:
 1085              	.LBI2031:
 1086              		.file 28 "/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits
   1:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // Core algorithmic facilities -*- C++ -*-
   2:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
   3:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** //
   5:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // software; you can redistribute it and/or modify it under the
   7:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // terms of the GNU General Public License as published by the
   8:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // any later version.
  10:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
  11:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // This library is distributed in the hope that it will be useful,
  12:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // GNU General Public License for more details.
  15:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
  16:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // 3.1, as published by the Free Software Foundation.
  19:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
  20:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // You should have received a copy of the GNU General Public License and
  21:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** // <http://www.gnu.org/licenses/>.
  24:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
  25:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** /*
  26:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  *
  27:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * Copyright (c) 1994
  28:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * Hewlett-Packard Company
  29:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  *
  30:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  33:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  34:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  36:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  *
  38:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  *
  39:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * Copyright (c) 1996-1998
  40:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  *
  42:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  45:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  46:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  48:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  */
  50:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
  51:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** /** @file bits/stl_algobase.h
  52:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  *  This is an internal header file, included by other library headers.
  53:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  *  Do not attempt to use it directly. @headername{algorithm}
  54:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****  */
ARM GAS  /tmp/ccw5fbVv.s 			page 207


  55:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
  56:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #ifndef _STL_ALGOBASE_H
  57:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #define _STL_ALGOBASE_H 1
  58:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
  59:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <bits/c++config.h>
  60:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <bits/functexcept.h>
  61:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <bits/cpp_type_traits.h>
  62:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <ext/type_traits.h>
  63:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <ext/numeric_traits.h>
  64:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <bits/stl_pair.h>
  65:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <bits/stl_iterator_base_types.h>
  66:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <bits/stl_iterator_base_funcs.h>
  67:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <bits/stl_iterator.h>
  68:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <bits/concept_check.h>
  69:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <debug/debug.h>
  70:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <bits/move.h> // For std::swap
  71:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #include <bits/predefined_ops.h>
  72:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
  73:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** # include <type_traits>
  74:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #endif
  75:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #if __cplusplus > 201703L
  76:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** # include <compare>
  77:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #endif
  78:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
  79:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** namespace std _GLIBCXX_VISIBILITY(default)
  80:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** {
  81:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  82:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
  83:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   /*
  84:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    * A constexpr wrapper for __builtin_memcmp.
  85:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    * @param __num The number of elements of type _Tp (not bytes).
  86:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    */
  87:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<typename _Tp, typename _Up>
  88:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
  89:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     inline int
  90:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     __memcmp(const _Tp* __first1, const _Up* __first2, size_t __num)
  91:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
  92:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
  93:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       static_assert(sizeof(_Tp) == sizeof(_Up), "can be compared with memcmp");
  94:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #endif
  95:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #ifdef __cpp_lib_is_constant_evaluated
  96:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       if (std::is_constant_evaluated())
  97:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	{
  98:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  for(; __num > 0; ++__first1, ++__first2, --__num)
  99:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	    if (*__first1 != *__first2)
 100:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	      return *__first1 < *__first2 ? -1 : 1;
 101:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  return 0;
 102:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	}
 103:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       else
 104:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #endif
 105:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	return __builtin_memcmp(__first1, __first2, sizeof(_Tp) * __num);
 106:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     }
 107:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 108:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #if __cplusplus < 201103L
 109:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   // See http://gcc.gnu.org/ml/libstdc++/2004-08/msg00167.html: in a
 110:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   // nutshell, we are partially implementing the resolution of DR 187,
 111:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   // when it's safe, i.e., the value_types are equal.
ARM GAS  /tmp/ccw5fbVv.s 			page 208


 112:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<bool _BoolType>
 113:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     struct __iter_swap
 114:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 115:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 116:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	static void
 117:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 118:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	{
 119:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  typedef typename iterator_traits<_ForwardIterator1>::value_type
 120:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	    _ValueType1;
 121:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  _ValueType1 __tmp = *__a;
 122:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  *__a = *__b;
 123:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  *__b = __tmp;
 124:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	}
 125:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     };
 126:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 127:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<>
 128:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     struct __iter_swap<true>
 129:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 130:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 131:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	static void
 132:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 133:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	{
 134:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  swap(*__a, *__b);
 135:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	}
 136:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     };
 137:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #endif // C++03
 138:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 139:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   /**
 140:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @brief Swaps the contents of two iterators.
 141:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 142:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __a  An iterator.
 143:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __b  Another iterator.
 144:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @return   Nothing.
 145:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *
 146:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  This function swaps the values pointed to by two iterators, not the
 147:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  iterators themselves.
 148:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   */
 149:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 150:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 151:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     inline void
 152:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 153:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 154:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       // concept requirements
 155:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 156:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 157:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 158:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 159:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 160:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #if __cplusplus < 201103L
 161:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::value_type
 162:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	_ValueType1;
 163:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::value_type
 164:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	_ValueType2;
 165:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 166:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType1,
 167:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 				  _ValueType2>)
 168:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType2,
ARM GAS  /tmp/ccw5fbVv.s 			page 209


 169:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 				  _ValueType1>)
 170:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 171:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::reference
 172:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	_ReferenceType1;
 173:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::reference
 174:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	_ReferenceType2;
 175:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
 176:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	&& __are_same<_ValueType1&, _ReferenceType1>::__value
 177:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	&& __are_same<_ValueType2&, _ReferenceType2>::__value>::
 178:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	iter_swap(__a, __b);
 179:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #else
 180:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 181:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       // 187. iter_swap underspecified
 182:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       swap(*__a, *__b);
 183:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #endif
 184:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     }
 185:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 186:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   /**
 187:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @brief Swap the elements of two sequences.
 188:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 189:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __first1  A forward iterator.
 190:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __last1   A forward iterator.
 191:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __first2  A forward iterator.
 192:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @return   An iterator equal to @p first2+(last1-first1).
 193:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *
 194:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  Swaps each element in the range @p [first1,last1) with the
 195:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  corresponding element in the range @p [first2,(last1-first1)).
 196:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  The ranges must not overlap.
 197:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   */
 198:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 199:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 200:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _ForwardIterator2
 201:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 202:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 		_ForwardIterator2 __first2)
 203:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 204:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       // concept requirements
 205:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 206:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 207:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 208:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 209:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first1, __last1);
 210:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 211:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       for (; __first1 != __last1; ++__first1, (void)++__first2)
 212:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	std::iter_swap(__first1, __first2);
 213:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       return __first2;
 214:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     }
 215:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 216:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   /**
 217:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 218:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 219:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 220:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 221:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @return   The lesser of the parameters.
 222:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *
 223:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 224:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 225:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  preprocessor macro.
ARM GAS  /tmp/ccw5fbVv.s 			page 210


 226:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   */
 227:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<typename _Tp>
 228:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 229:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     inline const _Tp&
 230:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b)
 231:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 232:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       // concept requirements
 233:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 234:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       //return __b < __a ? __b : __a;
 235:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       if (__b < __a)
 236:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	return __b;
 237:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       return __a;
 238:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     }
 239:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 240:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   /**
 241:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 242:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 243:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 244:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 245:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @return   The greater of the parameters.
 246:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *
 247:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 248:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 249:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  preprocessor macro.
 250:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   */
 251:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<typename _Tp>
 252:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 253:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     inline const _Tp&
 254:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b)
 255:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 256:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       // concept requirements
 257:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 258:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       //return  __a < __b ? __b : __a;
 259:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       if (__a < __b)
 260:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	return __b;
 261:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       return __a;
 262:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     }
 263:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 264:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   /**
 265:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 266:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 267:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 268:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 269:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __comp  A @link comparison_functors comparison functor@endlink.
 270:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @return   The lesser of the parameters.
 271:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *
 272:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  This will work on temporary expressions, since they are only evaluated
 273:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  once, unlike a preprocessor macro.
 274:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   */
 275:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<typename _Tp, typename _Compare>
 276:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 277:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     inline const _Tp&
 278:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b, _Compare __comp)
 279:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 280:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       //return __comp(__b, __a) ? __b : __a;
 281:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       if (__comp(__b, __a))
 282:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	return __b;
ARM GAS  /tmp/ccw5fbVv.s 			page 211


 283:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       return __a;
 284:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     }
 285:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 286:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   /**
 287:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 288:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 289:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 290:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 291:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __comp  A @link comparison_functors comparison functor@endlink.
 292:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @return   The greater of the parameters.
 293:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *
 294:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  This will work on temporary expressions, since they are only evaluated
 295:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  once, unlike a preprocessor macro.
 296:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   */
 297:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<typename _Tp, typename _Compare>
 298:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 299:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     inline const _Tp&
 300:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b, _Compare __comp)
 301:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 302:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       //return __comp(__a, __b) ? __b : __a;
 303:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       if (__comp(__a, __b))
 304:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	return __b;
 305:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       return __a;
 306:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     }
 307:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 308:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   // Fallback implementation of the function in bits/stl_iterator.h used to
 309:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   // remove the __normal_iterator wrapper. See copy, fill, ...
 310:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<typename _Iterator>
 311:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 312:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     inline _Iterator
 313:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     __niter_base(_Iterator __it)
 314:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
 315:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     { return __it; }
 316:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 317:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   // Reverse the __niter_base transformation to get a
 318:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   // __normal_iterator back again (this assumes that __normal_iterator
 319:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   // is only used to wrap random access iterators, like pointers).
 320:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<typename _From, typename _To>
 321:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 322:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     inline _From
 323:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     __niter_wrap(_From __from, _To __res)
 324:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     { return __from + (__res - std::__niter_base(__from)); }
 325:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 326:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   // No need to wrap, iterator already has the right type.
 327:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<typename _Iterator>
 328:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 329:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     inline _Iterator
 330:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     __niter_wrap(const _Iterator&, _Iterator __res)
 331:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     { return __res; }
 332:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 333:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   // All of these auxiliary structs serve two purposes.  (1) Replace
 334:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   // calls to copy with memmove whenever possible.  (Memmove, not memcpy,
 335:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   // because the input and output ranges are permitted to overlap.)
 336:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   // (2) If we're using random access iterators, then write the loop as
 337:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   // a for loop with an explicit count.
 338:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 339:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<bool _IsMove, bool _IsSimple, typename _Category>
ARM GAS  /tmp/ccw5fbVv.s 			page 212


 340:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     struct __copy_move
 341:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 342:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 343:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 344:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	static _OI
 345:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	__copy_m(_II __first, _II __last, _OI __result)
 346:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	{
 347:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  for (; __first != __last; ++__result, (void)++__first)
 348:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	    *__result = *__first;
 349:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  return __result;
 350:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	}
 351:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     };
 352:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 353:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 354:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<typename _Category>
 355:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     struct __copy_move<true, false, _Category>
 356:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 357:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 358:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 359:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	static _OI
 360:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	__copy_m(_II __first, _II __last, _OI __result)
 361:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	{
 362:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  for (; __first != __last; ++__result, (void)++__first)
 363:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	    *__result = std::move(*__first);
 364:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  return __result;
 365:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	}
 366:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     };
 367:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #endif
 368:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 369:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<>
 370:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     struct __copy_move<false, false, random_access_iterator_tag>
 371:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 372:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 373:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 374:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	static _OI
 375:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	__copy_m(_II __first, _II __last, _OI __result)
 376:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	{
 377:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  typedef typename iterator_traits<_II>::difference_type _Distance;
 378:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  for(_Distance __n = __last - __first; __n > 0; --__n)
 379:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	    {
 380:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	      *__result = *__first;
 381:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	      ++__first;
 382:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	      ++__result;
 383:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	    }
 384:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  return __result;
 385:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	}
 386:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     };
 387:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 388:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 389:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<>
 390:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     struct __copy_move<true, false, random_access_iterator_tag>
 391:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 392:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 393:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 394:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	static _OI
 395:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	__copy_m(_II __first, _II __last, _OI __result)
 396:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	{
ARM GAS  /tmp/ccw5fbVv.s 			page 213


 397:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  typedef typename iterator_traits<_II>::difference_type _Distance;
 398:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  for(_Distance __n = __last - __first; __n > 0; --__n)
 399:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	    {
 400:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	      *__result = std::move(*__first);
 401:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	      ++__first;
 402:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	      ++__result;
 403:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	    }
 404:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  return __result;
 405:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	}
 406:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     };
 407:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #endif
 408:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 409:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<bool _IsMove>
 410:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     struct __copy_move<_IsMove, true, random_access_iterator_tag>
 411:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 412:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       template<typename _Tp>
 413:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 414:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	static _Tp*
 415:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 416:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	{
 417:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 418:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  using __assignable = conditional<_IsMove,
 419:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 					   is_move_assignable<_Tp>,
 420:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 					   is_copy_assignable<_Tp>>;
 421:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  // trivial types can have deleted assignment
 422:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  static_assert( __assignable::type::value, "type is not assignable" );
 423:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #endif
 424:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  const ptrdiff_t _Num = __last - __first;
 425:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  if (_Num)
 426:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 427:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  return __result + _Num;
 428:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	}
 429:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     };
 430:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 431:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   // Helpers for streambuf iterators (either istream or ostream).
 432:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   // NB: avoid including <iosfwd>, relatively large.
 433:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<typename _CharT>
 434:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     struct char_traits;
 435:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 436:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<typename _CharT, typename _Traits>
 437:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     class istreambuf_iterator;
 438:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 439:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<typename _CharT, typename _Traits>
 440:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     class ostreambuf_iterator;
 441:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 442:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 443:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
 444:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	     ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
 445:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     __copy_move_a2(_CharT*, _CharT*,
 446:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 		   ostreambuf_iterator<_CharT, char_traits<_CharT> >);
 447:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 448:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 449:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
 450:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	     ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
 451:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     __copy_move_a2(const _CharT*, const _CharT*,
 452:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 		   ostreambuf_iterator<_CharT, char_traits<_CharT> >);
 453:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
ARM GAS  /tmp/ccw5fbVv.s 			page 214


 454:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 455:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
 456:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 				    _CharT*>::__type
 457:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
 458:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 		   istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);
 459:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 460:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 461:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 462:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     inline _OI
 463:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     __copy_move_a2(_II __first, _II __last, _OI __result)
 464:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 465:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_II>::iterator_category _Category;
 466:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #ifdef __cpp_lib_is_constant_evaluated
 467:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       if (std::is_constant_evaluated())
 468:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	return std::__copy_move<_IsMove, false, _Category>::
 469:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  __copy_m(__first, __last, __result);
 470:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #endif
 471:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       return std::__copy_move<_IsMove, __memcpyable<_OI, _II>::__value,
 472:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 			      _Category>::__copy_m(__first, __last, __result);
 473:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     }
 474:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 475:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
 476:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 477:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<typename _Tp, typename _Ref, typename _Ptr>
 478:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     struct _Deque_iterator;
 479:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 480:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** _GLIBCXX_END_NAMESPACE_CONTAINER
 481:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 482:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<bool _IsMove,
 483:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	   typename _Tp, typename _Ref, typename _Ptr, typename _OI>
 484:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _OI
 485:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     __copy_move_a1(_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,
 486:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 		   _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,
 487:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 		   _OI);
 488:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 489:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<bool _IsMove,
 490:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	   typename _ITp, typename _IRef, typename _IPtr, typename _OTp>
 491:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>
 492:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     __copy_move_a1(_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr>,
 493:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 		   _GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr>,
 494:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 		   _GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>);
 495:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 496:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _II, typename _Tp>
 497:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<
 498:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __is_random_access_iter<_II>::__value,
 499:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
 500:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     __copy_move_a1(_II, _II, _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>);
 501:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 502:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 503:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 504:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     inline _OI
 505:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     __copy_move_a1(_II __first, _II __last, _OI __result)
 506:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 507:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 508:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 509:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 510:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     inline _OI
ARM GAS  /tmp/ccw5fbVv.s 			page 215


 511:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     __copy_move_a(_II __first, _II __last, _OI __result)
 512:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 513:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       return std::__niter_wrap(__result,
 514:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 		std::__copy_move_a1<_IsMove>(std::__niter_base(__first),
 515:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 					     std::__niter_base(__last),
 516:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 					     std::__niter_base(__result)));
 517:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     }
 518:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 519:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<bool _IsMove,
 520:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	   typename _Ite, typename _Seq, typename _Cat, typename _OI>
 521:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _OI
 522:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     __copy_move_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 523:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 		  const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 524:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 		  _OI);
 525:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 526:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<bool _IsMove,
 527:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	   typename _II, typename _Ite, typename _Seq, typename _Cat>
 528:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     __gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>
 529:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     __copy_move_a(_II, _II,
 530:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 		  const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&);
 531:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 532:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<bool _IsMove,
 533:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	   typename _IIte, typename _ISeq, typename _ICat,
 534:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	   typename _OIte, typename _OSeq, typename _OCat>
 535:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>
 536:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     __copy_move_a(const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
 537:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 		  const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
 538:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 		  const ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>&);
 539:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 540:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   /**
 541:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @brief Copies the range [first,last) into result.
 542:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 543:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __first  An input iterator.
 544:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __last   An input iterator.
 545:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __result An output iterator.
 546:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @return   result + (last - first)
 547:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *
 548:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 549:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 550:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 551:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  optimizations such as unrolling).  Result may not be contained within
 552:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  [first,last); the copy_backward function should be used instead.
 553:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *
 554:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  Note that the end of the output range is permitted to be contained
 555:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  within [first,last).
 556:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   */
 557:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<typename _II, typename _OI>
 558:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 559:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     inline _OI
 560:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     copy(_II __first, _II __last, _OI __result)
 561:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 562:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       // concept requirements
 563:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_InputIteratorConcept<_II>)
 564:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OI,
 565:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	    typename iterator_traits<_II>::value_type>)
 566:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __glibcxx_requires_can_increment_range(__first, __last, __result);
 567:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
ARM GAS  /tmp/ccw5fbVv.s 			page 216


 568:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       return std::__copy_move_a<__is_move_iterator<_II>::__value>
 569:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 570:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     }
 571:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 572:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 573:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   /**
 574:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @brief Moves the range [first,last) into result.
 575:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 576:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __first  An input iterator.
 577:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __last   An input iterator.
 578:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __result An output iterator.
 579:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @return   result + (last - first)
 580:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *
 581:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 582:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 583:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 584:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  optimizations such as unrolling).  Result may not be contained within
 585:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  [first,last); the move_backward function should be used instead.
 586:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *
 587:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  Note that the end of the output range is permitted to be contained
 588:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  within [first,last).
 589:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   */
 590:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<typename _II, typename _OI>
 591:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 592:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     inline _OI
 593:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     move(_II __first, _II __last, _OI __result)
 594:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 595:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       // concept requirements
 596:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_InputIteratorConcept<_II>)
 597:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OI,
 598:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	    typename iterator_traits<_II>::value_type>)
 599:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __glibcxx_requires_can_increment_range(__first, __last, __result);
 600:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 601:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       return std::__copy_move_a<true>(std::__miter_base(__first),
 602:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 				      std::__miter_base(__last), __result);
 603:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     }
 604:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 605:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #define _GLIBCXX_MOVE3(_Tp, _Up, _Vp) std::move(_Tp, _Up, _Vp)
 606:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #else
 607:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #define _GLIBCXX_MOVE3(_Tp, _Up, _Vp) std::copy(_Tp, _Up, _Vp)
 608:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #endif
 609:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 610:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<bool _IsMove, bool _IsSimple, typename _Category>
 611:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     struct __copy_move_backward
 612:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 613:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       template<typename _BI1, typename _BI2>
 614:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 615:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	static _BI2
 616:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 617:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	{
 618:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  while (__first != __last)
 619:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	    *--__result = *--__last;
 620:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  return __result;
 621:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	}
 622:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     };
 623:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 624:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
ARM GAS  /tmp/ccw5fbVv.s 			page 217


 625:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<typename _Category>
 626:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     struct __copy_move_backward<true, false, _Category>
 627:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 628:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       template<typename _BI1, typename _BI2>
 629:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 630:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	static _BI2
 631:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 632:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	{
 633:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  while (__first != __last)
 634:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	    *--__result = std::move(*--__last);
 635:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  return __result;
 636:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	}
 637:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     };
 638:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #endif
 639:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 640:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<>
 641:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     struct __copy_move_backward<false, false, random_access_iterator_tag>
 642:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 643:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       template<typename _BI1, typename _BI2>
 644:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 645:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	static _BI2
 646:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 647:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	{
 648:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  typename iterator_traits<_BI1>::difference_type
 649:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	    __n = __last - __first;
 650:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  for (; __n > 0; --__n)
 651:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	    *--__result = *--__last;
 652:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  return __result;
 653:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	}
 654:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     };
 655:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 656:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 657:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<>
 658:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     struct __copy_move_backward<true, false, random_access_iterator_tag>
 659:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 660:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       template<typename _BI1, typename _BI2>
 661:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 662:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	static _BI2
 663:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 664:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	{
 665:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  typename iterator_traits<_BI1>::difference_type
 666:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	    __n = __last - __first;
 667:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  for (; __n > 0; --__n)
 668:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	    *--__result = std::move(*--__last);
 669:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  return __result;
 670:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	}
 671:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     };
 672:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #endif
 673:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 674:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<bool _IsMove>
 675:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>
 676:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 677:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       template<typename _Tp>
 678:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 679:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	static _Tp*
 680:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 681:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	{
ARM GAS  /tmp/ccw5fbVv.s 			page 218


 682:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 683:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  using __assignable = conditional<_IsMove,
 684:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 					   is_move_assignable<_Tp>,
 685:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 					   is_copy_assignable<_Tp>>;
 686:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  // trivial types can have deleted assignment
 687:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  static_assert( __assignable::type::value, "type is not assignable" );
 688:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #endif
 689:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  const ptrdiff_t _Num = __last - __first;
 690:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  if (_Num)
 691:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 692:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  return __result - _Num;
 693:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	}
 694:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     };
 695:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 696:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _BI1, typename _BI2>
 697:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 698:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     inline _BI2
 699:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 700:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 701:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_BI1>::iterator_category _Category;
 702:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #ifdef __cpp_lib_is_constant_evaluated
 703:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       if (std::is_constant_evaluated())
 704:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	return std::__copy_move_backward<_IsMove, false, _Category>::
 705:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  __copy_move_b(__first, __last, __result);
 706:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #endif
 707:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       return std::__copy_move_backward<_IsMove,
 708:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 				       __memcpyable<_BI2, _BI1>::__value,
 709:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 				       _Category>::__copy_move_b(__first,
 710:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 								 __last,
 711:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 								 __result);
 712:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     }
 713:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 714:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _BI1, typename _BI2>
 715:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 716:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     inline _BI2
 717:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 718:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 719:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 720:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<bool _IsMove,
 721:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	   typename _Tp, typename _Ref, typename _Ptr, typename _OI>
 722:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _OI
 723:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     __copy_move_backward_a1(_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,
 724:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 			    _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,
 725:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 			    _OI);
 726:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 727:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<bool _IsMove,
 728:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	   typename _ITp, typename _IRef, typename _IPtr, typename _OTp>
 729:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>
 730:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     __copy_move_backward_a1(
 731:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 			_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr>,
 732:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 			_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr>,
 733:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 			_GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>);
 734:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 735:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _II, typename _Tp>
 736:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<
 737:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __is_random_access_iter<_II>::__value,
 738:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
ARM GAS  /tmp/ccw5fbVv.s 			page 219


 739:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     __copy_move_backward_a1(_II, _II,
 740:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 			    _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>);
 741:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 742:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 743:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 744:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     inline _OI
 745:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     __copy_move_backward_a(_II __first, _II __last, _OI __result)
 746:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 747:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       return std::__niter_wrap(__result,
 748:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 		std::__copy_move_backward_a1<_IsMove>
 749:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 		  (std::__niter_base(__first), std::__niter_base(__last),
 750:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 		   std::__niter_base(__result)));
 751:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     }
 752:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 753:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<bool _IsMove,
 754:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	   typename _Ite, typename _Seq, typename _Cat, typename _OI>
 755:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _OI
 756:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     __copy_move_backward_a(
 757:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 		const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 758:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 		const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 759:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 		_OI);
 760:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 761:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<bool _IsMove,
 762:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	   typename _II, typename _Ite, typename _Seq, typename _Cat>
 763:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     __gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>
 764:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     __copy_move_backward_a(_II, _II,
 765:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 		const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&);
 766:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 767:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<bool _IsMove,
 768:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	   typename _IIte, typename _ISeq, typename _ICat,
 769:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	   typename _OIte, typename _OSeq, typename _OCat>
 770:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>
 771:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     __copy_move_backward_a(
 772:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 		const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
 773:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 		const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
 774:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 		const ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>&);
 775:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 776:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   /**
 777:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @brief Copies the range [first,last) into result.
 778:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 779:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __first  A bidirectional iterator.
 780:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __last   A bidirectional iterator.
 781:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __result A bidirectional iterator.
 782:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @return   result - (last - first)
 783:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *
 784:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  The function has the same effect as copy, but starts at the end of the
 785:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  range and works its way to the start, returning the start of the result.
 786:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 787:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 788:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 789:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  optimizations such as unrolling).
 790:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *
 791:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  Result may not be in the range (first,last].  Use copy instead.  Note
 792:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  that the start of the output range may overlap [first,last).
 793:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   */
 794:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<typename _BI1, typename _BI2>
 795:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
ARM GAS  /tmp/ccw5fbVv.s 			page 220


 796:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     inline _BI2
 797:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 798:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 799:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       // concept requirements
 800:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<_BI1>)
 801:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<_BI2>)
 802:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<
 803:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	    typename iterator_traits<_BI1>::value_type,
 804:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	    typename iterator_traits<_BI2>::value_type>)
 805:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __glibcxx_requires_can_decrement_range(__first, __last, __result);
 806:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 807:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       return std::__copy_move_backward_a<__is_move_iterator<_BI1>::__value>
 808:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 809:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     }
 810:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 811:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 812:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   /**
 813:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @brief Moves the range [first,last) into result.
 814:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 815:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __first  A bidirectional iterator.
 816:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __last   A bidirectional iterator.
 817:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __result A bidirectional iterator.
 818:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @return   result - (last - first)
 819:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *
 820:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  The function has the same effect as move, but starts at the end of the
 821:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  range and works its way to the start, returning the start of the result.
 822:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 823:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 824:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 825:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  optimizations such as unrolling).
 826:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *
 827:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  Result may not be in the range (first,last].  Use move instead.  Note
 828:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  that the start of the output range may overlap [first,last).
 829:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   */
 830:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<typename _BI1, typename _BI2>
 831:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 832:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     inline _BI2
 833:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 834:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 835:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       // concept requirements
 836:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<_BI1>)
 837:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<_BI2>)
 838:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<
 839:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	    typename iterator_traits<_BI1>::value_type,
 840:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	    typename iterator_traits<_BI2>::value_type>)
 841:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __glibcxx_requires_can_decrement_range(__first, __last, __result);
 842:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 843:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 844:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 					       std::__miter_base(__last),
 845:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 					       __result);
 846:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     }
 847:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 848:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #define _GLIBCXX_MOVE_BACKWARD3(_Tp, _Up, _Vp) std::move_backward(_Tp, _Up, _Vp)
 849:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #else
 850:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #define _GLIBCXX_MOVE_BACKWARD3(_Tp, _Up, _Vp) std::copy_backward(_Tp, _Up, _Vp)
 851:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #endif
 852:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
ARM GAS  /tmp/ccw5fbVv.s 			page 221


 853:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<typename _ForwardIterator, typename _Tp>
 854:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 855:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     inline typename
 856:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, void>::__type
 857:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 858:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	      const _Tp& __value)
 859:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 860:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       for (; __first != __last; ++__first)
 861:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	*__first = __value;
 862:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     }
 863:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 864:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<typename _ForwardIterator, typename _Tp>
 865:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 866:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     inline typename
 867:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
 868:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 869:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	      const _Tp& __value)
 870:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 871:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       const _Tp __tmp = __value;
 872:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       for (; __first != __last; ++__first)
 873:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	*__first = __tmp;
 874:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     }
 875:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 876:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   // Specialization: for char types we can use memset.
 877:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<typename _Tp>
 878:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 879:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     inline typename
 880:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, void>::__type
 881:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     __fill_a1(_Tp* __first, _Tp* __last, const _Tp& __c)
 882:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 883:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       const _Tp __tmp = __c;
 884:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #if __cpp_lib_is_constant_evaluated
 885:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       if (std::is_constant_evaluated())
 886:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	{
 887:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  for (; __first != __last; ++__first)
 888:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	    *__first = __tmp;
 889:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  return;
 890:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	}
 891:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #endif
 892:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       if (const size_t __len = __last - __first)
 893:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 894:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     }
 895:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 896:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<typename _Ite, typename _Cont, typename _Tp>
 897:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 898:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     inline void
 899:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     __fill_a1(::__gnu_cxx::__normal_iterator<_Ite, _Cont> __first,
 900:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	      ::__gnu_cxx::__normal_iterator<_Ite, _Cont> __last,
 901:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	      const _Tp& __value)
 902:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     { std::__fill_a1(__first.base(), __last.base(), __value); }
 903:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 904:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<typename _Tp, typename _VTp>
 905:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     void
 906:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     __fill_a1(const _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>&,
 907:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	      const _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>&,
 908:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	      const _VTp&);
 909:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
ARM GAS  /tmp/ccw5fbVv.s 			page 222


 910:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<typename _FIte, typename _Tp>
 911:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 912:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     inline void
 913:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 914:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     { std::__fill_a1(__first, __last, __value); }
 915:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 916:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<typename _Ite, typename _Seq, typename _Cat, typename _Tp>
 917:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     void
 918:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     __fill_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 919:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	     const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 920:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	     const _Tp&);
 921:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 922:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   /**
 923:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @brief Fills the range [first,last) with copies of value.
 924:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 925:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __first  A forward iterator.
 926:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __last   A forward iterator.
 927:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __value  A reference-to-const of arbitrary type.
 928:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @return   Nothing.
 929:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *
 930:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  This function fills a range with copies of the same value.  For char
 931:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  types filling contiguous areas of memory, this becomes an inline call
 932:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  to @c memset or @c wmemset.
 933:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   */
 934:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<typename _ForwardIterator, typename _Tp>
 935:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 936:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     inline void
 937:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
 938:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 939:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       // concept requirements
 940:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 941:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 				  _ForwardIterator>)
 942:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first, __last);
 943:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 944:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       std::__fill_a(__first, __last, __value);
 945:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     }
 946:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 947:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   // Used by fill_n, generate_n, etc. to convert _Size to an integral type:
 948:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR int
 949:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   __size_to_integer(int __n) { return __n; }
 950:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned
 951:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   __size_to_integer(unsigned __n) { return __n; }
 952:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long
 953:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   __size_to_integer(long __n) { return __n; }
 954:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned long
 955:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   __size_to_integer(unsigned long __n) { return __n; }
 956:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long long
 957:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   __size_to_integer(long long __n) { return __n; }
 958:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned long long
 959:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   __size_to_integer(unsigned long long __n) { return __n; }
 960:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 961:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #if defined(__GLIBCXX_TYPE_INT_N_0)
 962:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_0
 963:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   __size_to_integer(__GLIBCXX_TYPE_INT_N_0 __n) { return __n; }
 964:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_0
 965:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_0 __n) { return __n; }
 966:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #endif
ARM GAS  /tmp/ccw5fbVv.s 			page 223


 967:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #if defined(__GLIBCXX_TYPE_INT_N_1)
 968:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_1
 969:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   __size_to_integer(__GLIBCXX_TYPE_INT_N_1 __n) { return __n; }
 970:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_1
 971:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_1 __n) { return __n; }
 972:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #endif
 973:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #if defined(__GLIBCXX_TYPE_INT_N_2)
 974:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_2
 975:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   __size_to_integer(__GLIBCXX_TYPE_INT_N_2 __n) { return __n; }
 976:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_2
 977:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_2 __n) { return __n; }
 978:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #endif
 979:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #if defined(__GLIBCXX_TYPE_INT_N_3)
 980:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_3
 981:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   __size_to_integer(__GLIBCXX_TYPE_INT_N_3 __n) { return __n; }
 982:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_3
 983:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_3 __n) { return __n; }
 984:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #endif
 985:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 986:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long long
 987:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   __size_to_integer(float __n) { return __n; }
 988:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long long
 989:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   __size_to_integer(double __n) { return __n; }
 990:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long long
 991:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   __size_to_integer(long double __n) { return __n; }
 992:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #if !defined(__STRICT_ANSI__) && defined(_GLIBCXX_USE_FLOAT128)
 993:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long long
 994:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   __size_to_integer(__float128 __n) { return __n; }
 995:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #endif
 996:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
 997:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<typename _OutputIterator, typename _Size, typename _Tp>
 998:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 999:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     inline typename
1000:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, _OutputIterator>::__type
1001:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     __fill_n_a1(_OutputIterator __first, _Size __n, const _Tp& __value)
1002:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
1003:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       for (; __n > 0; --__n, (void) ++__first)
1004:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	*__first = __value;
1005:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       return __first;
1006:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     }
1007:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
1008:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<typename _OutputIterator, typename _Size, typename _Tp>
1009:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
1010:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     inline typename
1011:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, _OutputIterator>::__type
1012:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     __fill_n_a1(_OutputIterator __first, _Size __n, const _Tp& __value)
1013:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
1014:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       const _Tp __tmp = __value;
1015:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       for (; __n > 0; --__n, (void) ++__first)
1016:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	*__first = __tmp;
1017:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       return __first;
1018:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     }
1019:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
1020:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<typename _Ite, typename _Seq, typename _Cat, typename _Size,
1021:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	   typename _Tp>
1022:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>
1023:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     __fill_n_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>& __first,
ARM GAS  /tmp/ccw5fbVv.s 			page 224


1024:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	       _Size __n, const _Tp& __value,
1025:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	       std::input_iterator_tag);
1026:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
1027:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<typename _OutputIterator, typename _Size, typename _Tp>
1028:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
1029:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     inline _OutputIterator
1030:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
1031:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	       std::output_iterator_tag)
1032:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
1033:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
1034:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
1035:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #endif
1036:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       return __fill_n_a1(__first, __n, __value);
1037:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     }
1038:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
1039:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<typename _OutputIterator, typename _Size, typename _Tp>
1040:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
1041:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     inline _OutputIterator
1042:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
1043:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	       std::input_iterator_tag)
1044:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
1045:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
1046:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
1047:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #endif
1048:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       return __fill_n_a1(__first, __n, __value);
1049:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     }
1050:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
1051:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<typename _OutputIterator, typename _Size, typename _Tp>
1052:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
1053:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     inline _OutputIterator
1054:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
1055:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	       std::random_access_iterator_tag)
1056:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
1057:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
1058:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
1059:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** #endif
1060:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       if (__n <= 0)
1061:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	return __first;
1062:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
1063:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       __glibcxx_requires_can_increment(__first, __n);
1064:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
1065:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       std::__fill_a(__first, __first + __n, __value);
1066:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       return __first + __n;
1067:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     }
1068:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 
1069:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   /**
1070:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @brief Fills the range [first,first+n) with copies of value.
1071:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
1072:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __first  An output iterator.
1073:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __n      The count of copies to perform.
1074:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @param  __value  A reference-to-const of arbitrary type.
1075:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  @return   The iterator at first+n.
1076:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *
1077:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  This function fills a range with copies of the same value.  For char
1078:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  types filling contiguous areas of memory, this becomes an inline call
1079:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  to @c memset or @c wmemset.
1080:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *
ARM GAS  /tmp/ccw5fbVv.s 			page 225


1081:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****    *  If @p __n is negative, the function does nothing.
1082:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   */
1083:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
1084:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   // DR 865. More algorithms that throw away information
1085:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   // DR 426. search_n(), fill_n(), and generate_n() with negative n
1086:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   template<typename _OI, typename _Size, typename _Tp>
1087:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
1088:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     inline _OI
1089:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     fill_n(_OI __first, _Size __n, const _Tp& __value)
 1087              		.loc 28 1089 5 view .LVU234
 1088              		.loc 28 1089 5 is_stmt 0 view .LVU235
 1089              	.LBE2031:
 1090              	.LBE2030:
 1091              	.LBE2029:
 1092              	.LBE2028:
 1093              	.LBE2027:
 1094              	.LBE2026:
 1095              	.LBE2109:
 1096              	.LBE2114:
 1097              	.LBE2119:
 951:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long
 1098              		.loc 28 951 37 is_stmt 1 view .LVU236
 1099              	.LBB2120:
 1100              	.LBB2115:
 1101              	.LBB2110:
 1102              	.LBB2042:
 1103              	.LBB2041:
 1104              	.LBB2040:
 1105              	.LBB2039:
 1106              	.LBB2038:
 1107              	.LBB2037:
 1108              	.LBB2032:
 1109              	.LBI2032:
1054:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	       std::random_access_iterator_tag)
 1110              		.loc 28 1054 5 view .LVU237
 1111              	.LBB2033:
1065:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       return __first + __n;
 1112              		.loc 28 1065 38 is_stmt 0 view .LVU238
 1113 0028 A400     		lsls	r4, r4, #2
 1114              	.LVL37:
 1115              	.LBB2034:
 1116              	.LBI2034:
 913:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     { std::__fill_a1(__first, __last, __value); }
 1117              		.loc 28 913 5 is_stmt 1 view .LVU239
 1118              	.LBB2035:
 1119              	.LBI2035:
 868:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	      const _Tp& __value)
 1120              		.loc 28 868 5 view .LVU240
 1121              	.LBB2036:
 872:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	*__first = __tmp;
 1122              		.loc 28 872 22 view .LVU241
 873:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     }
 1123              		.loc 28 873 11 is_stmt 0 view .LVU242
 1124 002a 1846     		mov	r0, r3
 1125              	.LVL38:
 873:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     }
 1126              		.loc 28 873 11 view .LVU243
ARM GAS  /tmp/ccw5fbVv.s 			page 226


 1127 002c 0021     		movs	r1, #0
 1128 002e 2246     		mov	r2, r4
 1129 0030 FFF7FEFF 		bl	memset
 1130              	.LVL39:
 873:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     }
 1131              		.loc 28 873 11 view .LVU244
 1132 0034 0346     		mov	r3, r0
 1133              	.LVL40:
 873:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     }
 1134              		.loc 28 873 11 view .LVU245
 1135              	.LBE2036:
 1136              	.LBE2035:
 1137              	.LBE2034:
1065:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****       return __first + __n;
 1138              		.loc 28 1065 20 view .LVU246
 1139 0036 2344     		add	r3, r3, r4
 1140              	.LBE2033:
 1141              	.LBE2032:
 1142              	.LBE2037:
 1143              	.LBE2038:
 1144              	.LBE2039:
 1145              	.LBE2040:
 1146              	.LBE2041:
 1147              	.LBE2042:
 624:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    {
 625:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
 626:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      this->_M_impl._M_finish =
 1148              		.loc 26 626 32 view .LVU247
 1149 0038 6B60     		str	r3, [r5, #4]
 1150              	.LBE2110:
 1151              	.LBE2115:
 1152              	.LBE2120:
 627:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		std::__uninitialized_default_n_a(this->_M_impl._M_finish,
 628:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 						 __n, _M_get_Tp_allocator());
 629:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      _GLIBCXX_ASAN_ANNOTATE_GREW(__n);
 630:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    }
 631:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	  else
 632:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    {
 633:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      const size_type __len =
 634:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		_M_check_len(__n, "vector::_M_default_append");
 635:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      pointer __new_start(this->_M_allocate(__len));
 636:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 637:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		{
 638:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		  __try
 639:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		    {
 640:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		      std::__uninitialized_default_n_a(__new_start + __size,
 641:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 			      __n, _M_get_Tp_allocator());
 642:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		    }
 643:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		  __catch(...)
 644:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		    {
 645:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		      _M_deallocate(__new_start, __len);
 646:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		      __throw_exception_again;
 647:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		    }
 648:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		  _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 649:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 			      __new_start, _M_get_Tp_allocator());
 650:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		}
 651:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      else
ARM GAS  /tmp/ccw5fbVv.s 			page 227


 652:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		{
 653:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		  pointer __destroy_from = pointer();
 654:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		  __try
 655:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		    {
 656:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		      std::__uninitialized_default_n_a(__new_start + __size,
 657:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 			      __n, _M_get_Tp_allocator());
 658:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		      __destroy_from = __new_start + __size;
 659:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		      std::__uninitialized_move_if_noexcept_a(
 660:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 			      this->_M_impl._M_start, this->_M_impl._M_finish,
 661:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 			      __new_start, _M_get_Tp_allocator());
 662:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		    }
 663:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		  __catch(...)
 664:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		    {
 665:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		      if (__destroy_from)
 666:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 			std::_Destroy(__destroy_from, __destroy_from + __n,
 667:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 				      _M_get_Tp_allocator());
 668:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		      _M_deallocate(__new_start, __len);
 669:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		      __throw_exception_again;
 670:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		    }
 671:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 672:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 				_M_get_Tp_allocator());
 673:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 		}
 674:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      _GLIBCXX_ASAN_ANNOTATE_REINIT;
 675:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      _M_deallocate(this->_M_impl._M_start,
 676:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 			    this->_M_impl._M_end_of_storage
 677:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 			    - this->_M_impl._M_start);
 678:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      this->_M_impl._M_start = __new_start;
 679:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      this->_M_impl._M_finish = __new_start + __size + __n;
 680:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      this->_M_impl._M_end_of_storage = __new_start + __len;
 681:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    }
 682:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	}
 683:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     }
 1153              		.loc 26 683 5 view .LVU248
 1154 003a BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1155              	.LVL41:
 1156              	.L49:
 1157              		.cfi_def_cfa_offset 0
 1158              		.cfi_restore 3
 1159              		.cfi_restore 4
 1160              		.cfi_restore 5
 1161              		.cfi_restore 6
 1162              		.cfi_restore 7
 1163              		.cfi_restore 8
 1164              		.cfi_restore 9
 1165              		.cfi_restore 10
 1166              		.cfi_restore 11
 1167              		.cfi_restore 14
 1168              		.loc 26 683 5 view .LVU249
 1169 003e 7047     		bx	lr
 1170              	.LVL42:
 1171              	.L30:
 1172              		.cfi_def_cfa_offset 40
 1173              		.cfi_offset 3, -40
 1174              		.cfi_offset 4, -36
 1175              		.cfi_offset 5, -32
 1176              		.cfi_offset 6, -28
 1177              		.cfi_offset 7, -24
ARM GAS  /tmp/ccw5fbVv.s 			page 228


 1178              		.cfi_offset 8, -20
 1179              		.cfi_offset 9, -16
 1180              		.cfi_offset 10, -12
 1181              		.cfi_offset 11, -8
 1182              		.cfi_offset 14, -4
 1183              	.LBB2121:
 1184              	.LBB2116:
 1185              	.LBB2111:
 1186              	.LBB2043:
 1187              	.LBB2044:
 1188              	.LBI2044:
1047:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       }
1048:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1049:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**
1050:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @brief  Subscript access to the data contained in the %vector.
1051:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @param __n The index of the element for which data should be
1052:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  accessed.
1053:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @return  Read-only (constant) reference to data.
1054:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *
1055:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  This operator allows for easy, array-style, data access.
1056:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  Note that data access with this operator is unchecked and
1057:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  out_of_range lookups are not defined. (For checked lookups
1058:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  see at().)
1059:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        */
1060:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       const_reference
1061:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       operator[](size_type __n) const _GLIBCXX_NOEXCEPT
1062:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       {
1063:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	__glibcxx_requires_subscript(__n);
1064:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	return *(this->_M_impl._M_start + __n);
1065:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       }
1066:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1067:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****     protected:
1068:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /// Safety check used only from at().
1069:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       void
1070:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       _M_range_check(size_type __n) const
1071:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       {
1072:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	if (__n >= this->size())
1073:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
1074:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 				       "(which is %zu) >= this->size() "
1075:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 				       "(which is %zu)"),
1076:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 				   __n, this->size());
1077:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       }
1078:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1079:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****     public:
1080:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**
1081:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @brief  Provides access to the data contained in the %vector.
1082:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @param __n The index of the element for which data should be
1083:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  accessed.
1084:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @return  Read/write reference to data.
1085:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @throw  std::out_of_range  If @a __n is an invalid index.
1086:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *
1087:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  This function provides for safer data access.  The parameter
1088:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  is first checked that it is in the range of the vector.  The
1089:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  function throws out_of_range if the check fails.
1090:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        */
1091:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       reference
1092:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       at(size_type __n)
ARM GAS  /tmp/ccw5fbVv.s 			page 229


1093:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       {
1094:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	_M_range_check(__n);
1095:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	return (*this)[__n];
1096:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       }
1097:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1098:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**
1099:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @brief  Provides access to the data contained in the %vector.
1100:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @param __n The index of the element for which data should be
1101:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  accessed.
1102:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @return  Read-only (constant) reference to data.
1103:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @throw  std::out_of_range  If @a __n is an invalid index.
1104:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *
1105:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  This function provides for safer data access.  The parameter
1106:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  is first checked that it is in the range of the vector.  The
1107:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  function throws out_of_range if the check fails.
1108:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        */
1109:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       const_reference
1110:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       at(size_type __n) const
1111:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       {
1112:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	_M_range_check(__n);
1113:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	return (*this)[__n];
1114:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       }
1115:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1116:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**
1117:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  Returns a read/write reference to the data at the first
1118:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  element of the %vector.
1119:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        */
1120:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       reference
1121:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       front() _GLIBCXX_NOEXCEPT
1122:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       {
1123:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	__glibcxx_requires_nonempty();
1124:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	return *begin();
1125:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       }
1126:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1127:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**
1128:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  Returns a read-only (constant) reference to the data at the first
1129:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  element of the %vector.
1130:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        */
1131:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       const_reference
1132:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       front() const _GLIBCXX_NOEXCEPT
1133:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       {
1134:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	__glibcxx_requires_nonempty();
1135:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	return *begin();
1136:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       }
1137:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1138:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**
1139:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  Returns a read/write reference to the data at the last
1140:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  element of the %vector.
1141:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        */
1142:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       reference
1143:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       back() _GLIBCXX_NOEXCEPT
1144:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       {
1145:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	__glibcxx_requires_nonempty();
1146:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	return *(end() - 1);
1147:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       }
1148:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1149:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**
ARM GAS  /tmp/ccw5fbVv.s 			page 230


1150:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  Returns a read-only (constant) reference to the data at the
1151:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  last element of the %vector.
1152:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        */
1153:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       const_reference
1154:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       back() const _GLIBCXX_NOEXCEPT
1155:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       {
1156:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	__glibcxx_requires_nonempty();
1157:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	return *(end() - 1);
1158:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       }
1159:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1160:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1161:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       // DR 464. Suggestion for new member functions in standard containers.
1162:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       // data access
1163:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**
1164:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *   Returns a pointer such that [data(), data() + size()) is a valid
1165:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *   range.  For a non-empty %vector, data() == &front().
1166:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        */
1167:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       _Tp*
1168:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       data() _GLIBCXX_NOEXCEPT
1169:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       { return _M_data_ptr(this->_M_impl._M_start); }
1170:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1171:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       const _Tp*
1172:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       data() const _GLIBCXX_NOEXCEPT
1173:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       { return _M_data_ptr(this->_M_impl._M_start); }
1174:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1175:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       // [23.2.4.3] modifiers
1176:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**
1177:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @brief  Add data to the end of the %vector.
1178:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @param  __x  Data to be added.
1179:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *
1180:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  This is a typical stack operation.  The function creates an
1181:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  element at the end of the %vector and assigns the given data
1182:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  to it.  Due to the nature of a %vector this operation can be
1183:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  done in constant time if the %vector has preallocated space
1184:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  available.
1185:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        */
1186:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       void
1187:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       push_back(const value_type& __x)
1188:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       {
1189:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
1190:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  {
1191:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
1192:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
1193:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 				     __x);
1194:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	    ++this->_M_impl._M_finish;
1195:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
1196:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  }
1197:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	else
1198:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  _M_realloc_insert(end(), __x);
1199:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       }
1200:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1201:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
1202:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       void
1203:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       push_back(value_type&& __x)
1204:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       { emplace_back(std::move(__x)); }
1205:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1206:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       template<typename... _Args>
ARM GAS  /tmp/ccw5fbVv.s 			page 231


1207:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #if __cplusplus > 201402L
1208:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	reference
1209:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #else
1210:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	void
1211:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #endif
1212:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	emplace_back(_Args&&... __args);
1213:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #endif
1214:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1215:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**
1216:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @brief  Removes last element.
1217:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *
1218:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  This is a typical stack operation. It shrinks the %vector by one.
1219:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *
1220:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  Note that no data is returned, and if the last element's
1221:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  data is needed, it should be retrieved before pop_back() is
1222:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  called.
1223:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        */
1224:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       void
1225:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       pop_back() _GLIBCXX_NOEXCEPT
1226:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       {
1227:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	__glibcxx_requires_nonempty();
1228:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	--this->_M_impl._M_finish;
1229:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	_Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
1230:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	_GLIBCXX_ASAN_ANNOTATE_SHRINK(1);
1231:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       }
1232:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1233:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
1234:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**
1235:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @brief  Inserts an object in %vector before specified iterator.
1236:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1237:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @param  __args  Arguments.
1238:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1239:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *
1240:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  This function will insert an object of type T constructed
1241:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  with T(std::forward<Args>(args)...) before the specified location.
1242:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a %vector
1243:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  and if it is frequently used the user should consider using
1244:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  std::list.
1245:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        */
1246:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       template<typename... _Args>
1247:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	iterator
1248:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	emplace(const_iterator __position, _Args&&... __args)
1249:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	{ return _M_emplace_aux(__position, std::forward<_Args>(__args)...); }
1250:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1251:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**
1252:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @brief  Inserts given value into %vector before specified iterator.
1253:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1254:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
1255:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1256:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *
1257:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  This function will insert a copy of the given value before
1258:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  the specified location.  Note that this kind of operation
1259:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
1260:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  used the user should consider using std::list.
1261:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        */
1262:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       iterator
1263:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       insert(const_iterator __position, const value_type& __x);
ARM GAS  /tmp/ccw5fbVv.s 			page 232


1264:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #else
1265:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**
1266:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @brief  Inserts given value into %vector before specified iterator.
1267:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1268:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
1269:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1270:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *
1271:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  This function will insert a copy of the given value before
1272:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  the specified location.  Note that this kind of operation
1273:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
1274:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  used the user should consider using std::list.
1275:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        */
1276:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       iterator
1277:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       insert(iterator __position, const value_type& __x);
1278:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #endif
1279:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1280:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
1281:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**
1282:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @brief  Inserts given rvalue into %vector before specified iterator.
1283:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1284:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
1285:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1286:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *
1287:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  This function will insert a copy of the given rvalue before
1288:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  the specified location.  Note that this kind of operation
1289:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
1290:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  used the user should consider using std::list.
1291:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        */
1292:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       iterator
1293:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       insert(const_iterator __position, value_type&& __x)
1294:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       { return _M_insert_rval(__position, std::move(__x)); }
1295:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1296:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**
1297:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @brief  Inserts an initializer_list into the %vector.
1298:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1299:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
1300:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *
1301:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  This function will insert copies of the data in the
1302:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  initializer_list @a l into the %vector before the location
1303:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  specified by @a position.
1304:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *
1305:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1306:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1307:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  consider using std::list.
1308:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        */
1309:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       iterator
1310:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       insert(const_iterator __position, initializer_list<value_type> __l)
1311:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       {
1312:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	auto __offset = __position - cbegin();
1313:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	_M_range_insert(begin() + __offset, __l.begin(), __l.end(),
1314:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 			std::random_access_iterator_tag());
1315:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	return begin() + __offset;
1316:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       }
1317:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #endif
1318:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1319:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
1320:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**
ARM GAS  /tmp/ccw5fbVv.s 			page 233


1321:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @brief  Inserts a number of copies of given data into the %vector.
1322:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1323:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @param  __n  Number of elements to be inserted.
1324:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
1325:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1326:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *
1327:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  This function will insert a specified number of copies of
1328:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  the given data before the location specified by @a position.
1329:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *
1330:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1331:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1332:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  consider using std::list.
1333:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        */
1334:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       iterator
1335:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       insert(const_iterator __position, size_type __n, const value_type& __x)
1336:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       {
1337:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	difference_type __offset = __position - cbegin();
1338:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	_M_fill_insert(begin() + __offset, __n, __x);
1339:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	return begin() + __offset;
1340:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       }
1341:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #else
1342:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**
1343:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @brief  Inserts a number of copies of given data into the %vector.
1344:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1345:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @param  __n  Number of elements to be inserted.
1346:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
1347:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *
1348:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  This function will insert a specified number of copies of
1349:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  the given data before the location specified by @a position.
1350:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *
1351:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1352:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1353:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  consider using std::list.
1354:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        */
1355:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       void
1356:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       insert(iterator __position, size_type __n, const value_type& __x)
1357:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       { _M_fill_insert(__position, __n, __x); }
1358:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #endif
1359:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1360:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
1361:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**
1362:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @brief  Inserts a range into the %vector.
1363:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1364:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @param  __first  An input iterator.
1365:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @param  __last   An input iterator.
1366:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1367:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *
1368:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  This function will insert copies of the data in the range
1369:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  [__first,__last) into the %vector before the location specified
1370:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  by @a pos.
1371:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *
1372:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1373:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1374:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  consider using std::list.
1375:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        */
1376:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       template<typename _InputIterator,
1377:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
ARM GAS  /tmp/ccw5fbVv.s 			page 234


1378:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	iterator
1379:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	insert(const_iterator __position, _InputIterator __first,
1380:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	       _InputIterator __last)
1381:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	{
1382:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  difference_type __offset = __position - cbegin();
1383:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  _M_insert_dispatch(begin() + __offset,
1384:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 			     __first, __last, __false_type());
1385:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  return begin() + __offset;
1386:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	}
1387:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #else
1388:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**
1389:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @brief  Inserts a range into the %vector.
1390:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1391:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @param  __first  An input iterator.
1392:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @param  __last   An input iterator.
1393:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *
1394:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  This function will insert copies of the data in the range
1395:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  [__first,__last) into the %vector before the location specified
1396:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  by @a pos.
1397:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *
1398:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1399:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1400:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  consider using std::list.
1401:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        */
1402:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       template<typename _InputIterator>
1403:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	void
1404:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	insert(iterator __position, _InputIterator __first,
1405:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	       _InputIterator __last)
1406:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	{
1407:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
1408:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
1409:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  _M_insert_dispatch(__position, __first, __last, _Integral());
1410:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	}
1411:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #endif
1412:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1413:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**
1414:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @brief  Remove element at given position.
1415:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @param  __position  Iterator pointing to element to be erased.
1416:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @return  An iterator pointing to the next element (or end()).
1417:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *
1418:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  This function will erase the element at the given position and thus
1419:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  shorten the %vector by one.
1420:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *
1421:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  Note This operation could be expensive and if it is
1422:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  frequently used the user should consider using std::list.
1423:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  The user is also cautioned that this function only erases
1424:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  the element, and that if the element is itself a pointer,
1425:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  the pointed-to memory is not touched in any way.  Managing
1426:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  the pointer is the user's responsibility.
1427:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        */
1428:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       iterator
1429:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
1430:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       erase(const_iterator __position)
1431:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       { return _M_erase(begin() + (__position - cbegin())); }
1432:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #else
1433:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       erase(iterator __position)
1434:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       { return _M_erase(__position); }
ARM GAS  /tmp/ccw5fbVv.s 			page 235


1435:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #endif
1436:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1437:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**
1438:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @brief  Remove a range of elements.
1439:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @param  __first  Iterator pointing to the first element to be erased.
1440:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @param  __last  Iterator pointing to one past the last element to be
1441:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *                  erased.
1442:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @return  An iterator pointing to the element pointed to by @a __last
1443:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *           prior to erasing (or end()).
1444:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *
1445:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  This function will erase the elements in the range
1446:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  [__first,__last) and shorten the %vector accordingly.
1447:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *
1448:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  Note This operation could be expensive and if it is
1449:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  frequently used the user should consider using std::list.
1450:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  The user is also cautioned that this function only erases
1451:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  the elements, and that if the elements themselves are
1452:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  pointers, the pointed-to memory is not touched in any way.
1453:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  Managing the pointer is the user's responsibility.
1454:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        */
1455:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       iterator
1456:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
1457:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       erase(const_iterator __first, const_iterator __last)
1458:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       {
1459:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	const auto __beg = begin();
1460:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	const auto __cbeg = cbegin();
1461:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	return _M_erase(__beg + (__first - __cbeg), __beg + (__last - __cbeg));
1462:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       }
1463:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #else
1464:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       erase(iterator __first, iterator __last)
1465:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       { return _M_erase(__first, __last); }
1466:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #endif
1467:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1468:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**
1469:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @brief  Swaps data with another %vector.
1470:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  @param  __x  A %vector of the same element and allocator types.
1471:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *
1472:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  This exchanges the elements between two vectors in constant time.
1473:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  (Three pointers, so it should be quite fast.)
1474:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  Note that the global std::swap() function is specialized such that
1475:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  std::swap(v1,v2) will feed to this function.
1476:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *
1477:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  Whether the allocators are swapped depends on the allocator traits.
1478:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        */
1479:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       void
1480:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       swap(vector& __x) _GLIBCXX_NOEXCEPT
1481:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       {
1482:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
1483:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	__glibcxx_assert(_Alloc_traits::propagate_on_container_swap::value
1484:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 			 || _M_get_Tp_allocator() == __x._M_get_Tp_allocator());
1485:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #endif
1486:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	this->_M_impl._M_swap_data(__x._M_impl);
1487:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	_Alloc_traits::_S_on_swap(_M_get_Tp_allocator(),
1488:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 				  __x._M_get_Tp_allocator());
1489:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       }
1490:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1491:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**
ARM GAS  /tmp/ccw5fbVv.s 			page 236


1492:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  Erases all the elements.  Note that this function only erases the
1493:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  elements, and that if the elements themselves are pointers, the
1494:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  pointed-to memory is not touched in any way.  Managing the pointer is
1495:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  the user's responsibility.
1496:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        */
1497:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       void
1498:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       clear() _GLIBCXX_NOEXCEPT
1499:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       { _M_erase_at_end(this->_M_impl._M_start); }
1500:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1501:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****     protected:
1502:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       /**
1503:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  Memory expansion handler.  Uses the member allocation function to
1504:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        *  obtain @a n bytes of memory, and then copies [first,last) into it.
1505:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****        */
1506:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       template<typename _ForwardIterator>
1507:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	pointer
1508:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	_M_allocate_and_copy(size_type __n,
1509:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 			     _ForwardIterator __first, _ForwardIterator __last)
1510:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	{
1511:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  pointer __result = this->_M_allocate(__n);
1512:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  __try
1513:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	    {
1514:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	      std::__uninitialized_copy_a(__first, __last, __result,
1515:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 					  _M_get_Tp_allocator());
1516:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	      return __result;
1517:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	    }
1518:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  __catch(...)
1519:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	    {
1520:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	      _M_deallocate(__result, __n);
1521:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	      __throw_exception_again;
1522:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	    }
1523:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	}
1524:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1525:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1526:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       // Internal constructor functions follow.
1527:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1528:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       // Called by the range constructor to implement [23.1.1]/9
1529:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1530:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #if __cplusplus < 201103L
1531:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1532:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       // 438. Ambiguity in the "do the right thing" clause
1533:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       template<typename _Integer>
1534:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	void
1535:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	_M_initialize_dispatch(_Integer __n, _Integer __value, __true_type)
1536:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	{
1537:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  this->_M_impl._M_start = _M_allocate(_S_check_init_len(
1538:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 		static_cast<size_type>(__n), _M_get_Tp_allocator()));
1539:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  this->_M_impl._M_end_of_storage =
1540:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	    this->_M_impl._M_start + static_cast<size_type>(__n);
1541:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  _M_fill_initialize(static_cast<size_type>(__n), __value);
1542:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	}
1543:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1544:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       // Called by the range constructor to implement [23.1.1]/9
1545:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       template<typename _InputIterator>
1546:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	void
1547:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	_M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
1548:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 			       __false_type)
ARM GAS  /tmp/ccw5fbVv.s 			page 237


1549:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	{
1550:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  _M_range_initialize(__first, __last,
1551:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 			      std::__iterator_category(__first));
1552:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	}
1553:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #endif
1554:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1555:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       // Called by the second initialize_dispatch above
1556:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       template<typename _InputIterator>
1557:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	void
1558:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	_M_range_initialize(_InputIterator __first, _InputIterator __last,
1559:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 			    std::input_iterator_tag)
1560:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	{
1561:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  __try {
1562:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	    for (; __first != __last; ++__first)
1563:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
1564:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	      emplace_back(*__first);
1565:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #else
1566:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	      push_back(*__first);
1567:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #endif
1568:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  } __catch(...) {
1569:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	    clear();
1570:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	    __throw_exception_again;
1571:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  }
1572:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	}
1573:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1574:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       // Called by the second initialize_dispatch above
1575:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       template<typename _ForwardIterator>
1576:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	void
1577:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
1578:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 			    std::forward_iterator_tag)
1579:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	{
1580:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  const size_type __n = std::distance(__first, __last);
1581:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  this->_M_impl._M_start
1582:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
1583:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
1584:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  this->_M_impl._M_finish =
1585:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	    std::__uninitialized_copy_a(__first, __last,
1586:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 					this->_M_impl._M_start,
1587:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 					_M_get_Tp_allocator());
1588:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	}
1589:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1590:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       // Called by the first initialize_dispatch above and by the
1591:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       // vector(n,value,a) constructor.
1592:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       void
1593:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       _M_fill_initialize(size_type __n, const value_type& __value)
1594:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       {
1595:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	this->_M_impl._M_finish =
1596:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
1597:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 					_M_get_Tp_allocator());
1598:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       }
1599:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1600:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
1601:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       // Called by the vector(n) constructor.
1602:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       void
1603:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       _M_default_initialize(size_type __n)
1604:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       {
1605:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	this->_M_impl._M_finish =
ARM GAS  /tmp/ccw5fbVv.s 			page 238


1606:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
1607:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 					   _M_get_Tp_allocator());
1608:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       }
1609:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #endif
1610:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1611:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       // Internal assign functions follow.  The *_aux functions do the actual
1612:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       // assignment work for the range versions.
1613:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1614:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       // Called by the range assign to implement [23.1.1]/9
1615:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1616:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1617:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       // 438. Ambiguity in the "do the right thing" clause
1618:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       template<typename _Integer>
1619:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	void
1620:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	_M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
1621:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	{ _M_fill_assign(__n, __val); }
1622:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1623:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       // Called by the range assign to implement [23.1.1]/9
1624:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       template<typename _InputIterator>
1625:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	void
1626:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	_M_assign_dispatch(_InputIterator __first, _InputIterator __last,
1627:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 			   __false_type)
1628:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	{ _M_assign_aux(__first, __last, std::__iterator_category(__first)); }
1629:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1630:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       // Called by the second assign_dispatch above
1631:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       template<typename _InputIterator>
1632:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	void
1633:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	_M_assign_aux(_InputIterator __first, _InputIterator __last,
1634:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 		      std::input_iterator_tag);
1635:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1636:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       // Called by the second assign_dispatch above
1637:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       template<typename _ForwardIterator>
1638:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	void
1639:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	_M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
1640:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 		      std::forward_iterator_tag);
1641:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1642:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       // Called by assign(n,t), and the range assign when it turns out
1643:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       // to be the same thing.
1644:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       void
1645:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       _M_fill_assign(size_type __n, const value_type& __val);
1646:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1647:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       // Internal insert functions follow.
1648:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1649:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       // Called by the range insert to implement [23.1.1]/9
1650:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1651:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1652:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       // 438. Ambiguity in the "do the right thing" clause
1653:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       template<typename _Integer>
1654:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	void
1655:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	_M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val,
1656:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 			   __true_type)
1657:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	{ _M_fill_insert(__pos, __n, __val); }
1658:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1659:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       // Called by the range insert to implement [23.1.1]/9
1660:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       template<typename _InputIterator>
1661:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	void
1662:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	_M_insert_dispatch(iterator __pos, _InputIterator __first,
ARM GAS  /tmp/ccw5fbVv.s 			page 239


1663:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 			   _InputIterator __last, __false_type)
1664:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	{
1665:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  _M_range_insert(__pos, __first, __last,
1666:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 			  std::__iterator_category(__first));
1667:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	}
1668:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1669:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       // Called by the second insert_dispatch above
1670:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       template<typename _InputIterator>
1671:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	void
1672:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	_M_range_insert(iterator __pos, _InputIterator __first,
1673:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 			_InputIterator __last, std::input_iterator_tag);
1674:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1675:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       // Called by the second insert_dispatch above
1676:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       template<typename _ForwardIterator>
1677:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	void
1678:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	_M_range_insert(iterator __pos, _ForwardIterator __first,
1679:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 			_ForwardIterator __last, std::forward_iterator_tag);
1680:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1681:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       // Called by insert(p,n,x), and the range insert when it turns out to be
1682:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       // the same thing.
1683:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       void
1684:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);
1685:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1686:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
1687:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       // Called by resize(n).
1688:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       void
1689:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       _M_default_append(size_type __n);
1690:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1691:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       bool
1692:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       _M_shrink_to_fit();
1693:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #endif
1694:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1695:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #if __cplusplus < 201103L
1696:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       // Called by insert(p,x)
1697:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       void
1698:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       _M_insert_aux(iterator __position, const value_type& __x);
1699:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1700:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       void
1701:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       _M_realloc_insert(iterator __position, const value_type& __x);
1702:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #else
1703:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       // A value_type object constructed with _Alloc_traits::construct()
1704:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       // and destroyed with _Alloc_traits::destroy().
1705:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       struct _Temporary_value
1706:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       {
1707:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	template<typename... _Args>
1708:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  explicit
1709:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  _Temporary_value(vector* __vec, _Args&&... __args) : _M_this(__vec)
1710:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  {
1711:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	    _Alloc_traits::construct(_M_this->_M_impl, _M_ptr(),
1712:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 				     std::forward<_Args>(__args)...);
1713:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  }
1714:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1715:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	~_Temporary_value()
1716:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	{ _Alloc_traits::destroy(_M_this->_M_impl, _M_ptr()); }
1717:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1718:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	value_type&
1719:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	_M_val() { return *_M_ptr(); }
ARM GAS  /tmp/ccw5fbVv.s 			page 240


1720:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1721:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       private:
1722:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	_Tp*
1723:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	_M_ptr() { return reinterpret_cast<_Tp*>(&__buf); }
1724:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1725:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	vector* _M_this;
1726:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	typename aligned_storage<sizeof(_Tp), alignof(_Tp)>::type __buf;
1727:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       };
1728:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1729:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       // Called by insert(p,x) and other functions when insertion needs to
1730:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       // reallocate or move existing elements. _Arg is either _Tp& or _Tp.
1731:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       template<typename _Arg>
1732:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	void
1733:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	_M_insert_aux(iterator __position, _Arg&& __arg);
1734:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1735:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       template<typename... _Args>
1736:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	void
1737:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	_M_realloc_insert(iterator __position, _Args&&... __args);
1738:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1739:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       // Either move-construct at the end, or forward to _M_insert_aux.
1740:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       iterator
1741:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       _M_insert_rval(const_iterator __position, value_type&& __v);
1742:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1743:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       // Try to emplace at the end, otherwise forward to _M_insert_aux.
1744:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       template<typename... _Args>
1745:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	iterator
1746:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	_M_emplace_aux(const_iterator __position, _Args&&... __args);
1747:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1748:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       // Emplacing an rvalue of the correct type can use _M_insert_rval.
1749:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       iterator
1750:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       _M_emplace_aux(const_iterator __position, value_type&& __v)
1751:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       { return _M_insert_rval(__position, std::move(__v)); }
1752:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** #endif
1753:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1754:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       // Called by _M_fill_insert, _M_insert_aux etc.
1755:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       size_type
1756:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       _M_check_len(size_type __n, const char* __s) const
 1189              		.loc 2 1756 7 is_stmt 1 view .LVU250
 1190              	.LBB2045:
1757:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       {
1758:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	if (max_size() - size() < __n)
 1191              		.loc 2 1758 2 is_stmt 0 view .LVU251
 1192 0040 A142     		cmp	r1, r4
 1193 0042 41D3     		bcc	.L52
 1194 0044 A642     		cmp	r6, r4
 1195 0046 3346     		mov	r3, r6
 1196              	.LVL43:
 1197              		.loc 2 1758 2 view .LVU252
 1198 0048 38BF     		it	cc
 1199 004a 2346     		movcc	r3, r4
 1200 004c F318     		adds	r3, r6, r3
 1201 004e 38D2     		bcs	.L33
 1202              	.LVL44:
 1203              		.loc 2 1758 2 view .LVU253
 1204              	.LBE2045:
 1205              	.LBE2044:
 1206              	.LBB2047:
ARM GAS  /tmp/ccw5fbVv.s 			page 241


 1207              	.LBI2047:
 343:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       {
 1208              		.loc 2 343 7 is_stmt 1 view .LVU254
 1209              	.LBB2048:
 346:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       }
 1210              		.loc 2 346 18 is_stmt 0 view .LVU255
 1211 0050 23BB     		cbnz	r3, .L53
 1212 0052 9946     		mov	r9, r3
 1213 0054 BB46     		mov	fp, r7
 1214 0056 9A46     		mov	r10, r3
 1215              	.LVL45:
 1216              	.L35:
 346:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       }
 1217              		.loc 2 346 18 view .LVU256
 1218              	.LBE2048:
 1219              	.LBE2047:
 1220              	.LBB2056:
 1221              	.LBB2057:
 1222              	.LBI2057:
 1223              		.loc 27 683 5 is_stmt 1 view .LVU257
 1224              	.LBB2058:
 1225              	.LBI2058:
 614:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     {
 1226              		.loc 27 614 5 view .LVU258
 1227              	.LBB2059:
 1228              	.LBB2060:
 1229              	.LBI2060:
 583:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****         {
 1230              		.loc 27 583 9 view .LVU259
 1231              	.LBB2061:
 1232              	.LBB2062:
 1233              	.LBI2062:
 1234              		.loc 28 1089 5 view .LVU260
 1235              		.loc 28 1089 5 is_stmt 0 view .LVU261
 1236              	.LBE2062:
 1237              	.LBE2061:
 1238              	.LBE2060:
 1239              	.LBE2059:
 1240              	.LBE2058:
 1241              	.LBE2057:
 1242              	.LBE2056:
 1243              	.LBE2043:
 1244              	.LBE2111:
 1245              	.LBE2116:
 1246              	.LBE2121:
 951:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long
 1247              		.loc 28 951 37 is_stmt 1 view .LVU262
 1248              	.LBB2122:
 1249              	.LBB2117:
 1250              	.LBB2112:
 1251              	.LBB2106:
 1252              	.LBB2092:
 1253              	.LBB2073:
 1254              	.LBB2072:
 1255              	.LBB2071:
 1256              	.LBB2070:
 1257              	.LBB2069:
ARM GAS  /tmp/ccw5fbVv.s 			page 242


 1258              	.LBB2068:
 1259              	.LBB2063:
 1260              	.LBI2063:
1054:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	       std::random_access_iterator_tag)
 1261              		.loc 28 1054 5 view .LVU263
 1262              	.LBB2064:
 1263              	.LBB2065:
 1264              	.LBI2065:
 913:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     { std::__fill_a1(__first, __last, __value); }
 1265              		.loc 28 913 5 view .LVU264
 1266              	.LBB2066:
 1267              	.LBI2066:
 868:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	      const _Tp& __value)
 1268              		.loc 28 868 5 view .LVU265
 1269              	.LBB2067:
 872:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	*__first = __tmp;
 1270              		.loc 28 872 22 view .LVU266
 873:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     }
 1271              		.loc 28 873 11 is_stmt 0 view .LVU267
 1272 0058 0AEB0700 		add	r0, r10, r7
 1273              	.LVL46:
 873:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     }
 1274              		.loc 28 873 11 view .LVU268
 1275 005c A200     		lsls	r2, r4, #2
 1276 005e 0021     		movs	r1, #0
 1277 0060 FFF7FEFF 		bl	memset
 1278              	.LVL47:
 873:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     }
 1279              		.loc 28 873 11 view .LVU269
 1280              	.LBE2067:
 1281              	.LBE2066:
 1282              	.LBE2065:
 1283              	.LBE2064:
 1284              	.LBE2063:
 1285              	.LBE2068:
 1286              	.LBE2069:
 1287              	.LBE2070:
 1288              	.LBE2071:
 1289              	.LBE2072:
 1290              	.LBE2073:
 1291              	.LBB2074:
 1292              	.LBI2074:
 465:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 		  _Tp_alloc_type& __alloc) noexcept
 1293              		.loc 2 465 7 is_stmt 1 view .LVU270
 1294              	.LBB2075:
 1295              	.LBB2076:
 1296              	.LBI2076:
 453:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 		     _Tp_alloc_type& __alloc, true_type) noexcept
 1297              		.loc 2 453 7 view .LVU271
 1298              	.LBB2077:
 1299              	.LBI2077:
 684:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 				allocator<_Tp>&)
 685:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     { return std::__uninitialized_default_n(__first, __n); }
 686:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 687:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   template<bool _TrivialValueType>
 688:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     struct __uninitialized_default_novalue_1
 689:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     {
ARM GAS  /tmp/ccw5fbVv.s 			page 243


 690:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       template<typename _ForwardIterator>
 691:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	static void
 692:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	__uninit_default_novalue(_ForwardIterator __first,
 693:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 				 _ForwardIterator __last)
 694:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	{
 695:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 696:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  __try
 697:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	    {
 698:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	      for (; __cur != __last; ++__cur)
 699:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 		std::_Construct_novalue(std::__addressof(*__cur));
 700:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	    }
 701:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  __catch(...)
 702:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	    {
 703:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 704:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	      __throw_exception_again;
 705:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	    }
 706:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	}
 707:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     };
 708:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 709:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   template<>
 710:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     struct __uninitialized_default_novalue_1<true>
 711:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     {
 712:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       template<typename _ForwardIterator>
 713:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****         static void
 714:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****         __uninit_default_novalue(_ForwardIterator __first,
 715:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 				 _ForwardIterator __last)
 716:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	{
 717:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	}
 718:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     };
 719:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 720:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   template<bool _TrivialValueType>
 721:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     struct __uninitialized_default_novalue_n_1
 722:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     {
 723:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size>
 724:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	static _ForwardIterator
 725:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	__uninit_default_novalue_n(_ForwardIterator __first, _Size __n)
 726:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	{
 727:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 728:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  __try
 729:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	    {
 730:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	      for (; __n > 0; --__n, (void) ++__cur)
 731:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 		std::_Construct_novalue(std::__addressof(*__cur));
 732:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	      return __cur;
 733:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	    }
 734:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  __catch(...)
 735:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	    {
 736:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 737:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	      __throw_exception_again;
 738:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	    }
 739:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	}
 740:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     };
 741:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 742:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   template<>
 743:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     struct __uninitialized_default_novalue_n_1<true>
 744:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     {
 745:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size>
 746:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	static _ForwardIterator
ARM GAS  /tmp/ccw5fbVv.s 			page 244


 747:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	__uninit_default_novalue_n(_ForwardIterator __first, _Size __n)
 748:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	{ return std::next(__first, __n); }
 749:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     };
 750:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 751:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   // __uninitialized_default_novalue
 752:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   // Fills [first, last) with std::distance(first, last) default-initialized
 753:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   // value_types(s).
 754:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   template<typename _ForwardIterator>
 755:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     inline void
 756:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     __uninitialized_default_novalue(_ForwardIterator __first,
 757:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 				    _ForwardIterator __last)
 758:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     {
 759:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 760:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	_ValueType;
 761:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 762:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       std::__uninitialized_default_novalue_1<
 763:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	is_trivially_default_constructible<_ValueType>::value>::
 764:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	__uninit_default_novalue(__first, __last);
 765:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     }
 766:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 767:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   // __uninitialized_default_n
 768:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   // Fills [first, first + n) with n default-initialized value_type(s).
 769:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size>
 770:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     inline _ForwardIterator
 771:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     __uninitialized_default_novalue_n(_ForwardIterator __first, _Size __n)
 772:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     {
 773:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 774:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	_ValueType;
 775:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 776:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       return __uninitialized_default_novalue_n_1<
 777:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	is_trivially_default_constructible<_ValueType>::value>::
 778:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	__uninit_default_novalue_n(__first, __n);
 779:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     }
 780:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 781:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _Size,
 782:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	   typename _ForwardIterator>
 783:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     _ForwardIterator
 784:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     __uninitialized_copy_n(_InputIterator __first, _Size __n,
 785:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 			   _ForwardIterator __result, input_iterator_tag)
 786:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     {
 787:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       _ForwardIterator __cur = __result;
 788:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       __try
 789:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	{
 790:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  for (; __n > 0; --__n, (void) ++__first, ++__cur)
 791:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	    std::_Construct(std::__addressof(*__cur), *__first);
 792:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  return __cur;
 793:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	}
 794:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       __catch(...)
 795:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	{
 796:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  std::_Destroy(__result, __cur);
 797:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 798:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	}
 799:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     }
 800:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 801:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   template<typename _RandomAccessIterator, typename _Size,
 802:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	   typename _ForwardIterator>
 803:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     inline _ForwardIterator
ARM GAS  /tmp/ccw5fbVv.s 			page 245


 804:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     __uninitialized_copy_n(_RandomAccessIterator __first, _Size __n,
 805:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 			   _ForwardIterator __result,
 806:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 			   random_access_iterator_tag)
 807:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     { return std::uninitialized_copy(__first, __first + __n, __result); }
 808:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 809:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _Size,
 810:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	   typename _ForwardIterator>
 811:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     pair<_InputIterator, _ForwardIterator>
 812:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     __uninitialized_copy_n_pair(_InputIterator __first, _Size __n,
 813:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 			   _ForwardIterator __result, input_iterator_tag)
 814:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     {
 815:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       _ForwardIterator __cur = __result;
 816:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       __try
 817:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	{
 818:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  for (; __n > 0; --__n, (void) ++__first, ++__cur)
 819:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	    std::_Construct(std::__addressof(*__cur), *__first);
 820:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  return {__first, __cur};
 821:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	}
 822:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       __catch(...)
 823:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	{
 824:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  std::_Destroy(__result, __cur);
 825:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 826:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	}
 827:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     }
 828:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 829:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   template<typename _RandomAccessIterator, typename _Size,
 830:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	   typename _ForwardIterator>
 831:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     inline pair<_RandomAccessIterator, _ForwardIterator>
 832:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     __uninitialized_copy_n_pair(_RandomAccessIterator __first, _Size __n,
 833:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 			   _ForwardIterator __result,
 834:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 			   random_access_iterator_tag)
 835:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     {
 836:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       auto __second_res = uninitialized_copy(__first, __first + __n, __result);
 837:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       auto __first_res = std::next(__first, __n);
 838:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       return {__first_res, __second_res};
 839:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     }
 840:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 841:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   /// @endcond
 842:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 843:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   /**
 844:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****    *  @brief Copies the range [first,first+n) into result.
 845:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****    *  @param  __first  An input iterator.
 846:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****    *  @param  __n      The number of elements to copy.
 847:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****    *  @param  __result An output iterator.
 848:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****    *  @return  __result + __n
 849:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****    *
 850:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****    *  Like copy_n(), but does not require an initialized output range.
 851:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   */
 852:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _Size, typename _ForwardIterator>
 853:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     inline _ForwardIterator
 854:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     uninitialized_copy_n(_InputIterator __first, _Size __n,
 855:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 			 _ForwardIterator __result)
 856:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     { return std::__uninitialized_copy_n(__first, __n, __result,
 857:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 					 std::__iterator_category(__first)); }
 858:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 859:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   /// @cond undocumented
 860:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _Size, typename _ForwardIterator>
ARM GAS  /tmp/ccw5fbVv.s 			page 246


 861:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     inline pair<_InputIterator, _ForwardIterator>
 862:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     __uninitialized_copy_n_pair(_InputIterator __first, _Size __n,
 863:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 			      _ForwardIterator __result)
 864:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     {
 865:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       return
 866:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	std::__uninitialized_copy_n_pair(__first, __n, __result,
 867:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 					 std::__iterator_category(__first));
 868:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     }
 869:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   /// @endcond
 870:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** #endif
 871:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 872:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** #if __cplusplus >= 201703L
 873:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** # define __cpp_lib_raw_memory_algorithms 201606L
 874:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 875:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   /**
 876:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****    *  @brief Default-initializes objects in the range [first,last).
 877:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****    *  @param  __first  A forward iterator.
 878:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****    *  @param  __last   A forward iterator.
 879:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   */
 880:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   template <typename _ForwardIterator>
 881:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     inline void
 882:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     uninitialized_default_construct(_ForwardIterator __first,
 883:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 				    _ForwardIterator __last)
 884:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     {
 885:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       __uninitialized_default_novalue(__first, __last);
 886:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     }
 887:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 888:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   /**
 889:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****    *  @brief Default-initializes objects in the range [first,first+count).
 890:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****    *  @param  __first  A forward iterator.
 891:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****    *  @param  __count  The number of objects to construct.
 892:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****    *  @return   __first + __count
 893:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   */
 894:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   template <typename _ForwardIterator, typename _Size>
 895:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     inline _ForwardIterator
 896:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     uninitialized_default_construct_n(_ForwardIterator __first, _Size __count)
 897:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     {
 898:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       return __uninitialized_default_novalue_n(__first, __count);
 899:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     }
 900:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 901:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   /**
 902:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****    *  @brief Value-initializes objects in the range [first,last).
 903:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****    *  @param  __first  A forward iterator.
 904:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****    *  @param  __last   A forward iterator.
 905:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   */
 906:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   template <typename _ForwardIterator>
 907:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     inline void
 908:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     uninitialized_value_construct(_ForwardIterator __first,
 909:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 				  _ForwardIterator __last)
 910:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     {
 911:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       return __uninitialized_default(__first, __last);
 912:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     }
 913:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 914:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   /**
 915:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****    *  @brief Value-initializes objects in the range [first,first+count).
 916:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****    *  @param  __first  A forward iterator.
 917:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****    *  @param  __count  The number of objects to construct.
ARM GAS  /tmp/ccw5fbVv.s 			page 247


 918:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****    *  @return   __result + __count
 919:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   */
 920:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   template <typename _ForwardIterator, typename _Size>
 921:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     inline _ForwardIterator
 922:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     uninitialized_value_construct_n(_ForwardIterator __first, _Size __count)
 923:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     {
 924:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       return __uninitialized_default_n(__first, __count);
 925:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     }
 926:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 927:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   /**
 928:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****    *  @brief Move-construct from the range [first,last) into result.
 929:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****    *  @param  __first  An input iterator.
 930:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****    *  @param  __last   An input iterator.
 931:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****    *  @param  __result An output iterator.
 932:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****    *  @return   __result + (__first - __last)
 933:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   */
 934:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   template <typename _InputIterator, typename _ForwardIterator>
 935:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     inline _ForwardIterator
 936:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     uninitialized_move(_InputIterator __first, _InputIterator __last,
 937:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 		       _ForwardIterator __result)
 938:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     {
 939:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       return std::uninitialized_copy
 940:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),
 941:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	 _GLIBCXX_MAKE_MOVE_ITERATOR(__last), __result);
 942:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     }
 943:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 944:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   /**
 945:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****    *  @brief Move-construct from the range [first,first+count) into result.
 946:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****    *  @param  __first  An input iterator.
 947:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****    *  @param  __count  The number of objects to initialize.
 948:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****    *  @param  __result An output iterator.
 949:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****    *  @return  __result + __count
 950:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   */
 951:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   template <typename _InputIterator, typename _Size, typename _ForwardIterator>
 952:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     inline pair<_InputIterator, _ForwardIterator>
 953:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     uninitialized_move_n(_InputIterator __first, _Size __count,
 954:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 			 _ForwardIterator __result)
 955:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     {
 956:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       auto __res = std::__uninitialized_copy_n_pair
 957:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),
 958:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	 __count, __result);
 959:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       return {__res.first.base(), __res.second};
 960:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     }
 961:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** #endif // C++17
 962:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 963:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** #if __cplusplus >= 201103L
 964:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   /// @cond undocumented
 965:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 966:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   template<typename _Tp, typename _Up, typename _Allocator>
 967:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     inline void
 968:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 969:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 			_Allocator& __alloc)
 970:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     noexcept(noexcept(std::allocator_traits<_Allocator>::construct(__alloc,
 971:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 			 __dest, std::move(*__orig)))
 972:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	     && noexcept(std::allocator_traits<_Allocator>::destroy(
 973:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 			    __alloc, std::__addressof(*__orig))))
 974:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     {
ARM GAS  /tmp/ccw5fbVv.s 			page 248


 975:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       typedef std::allocator_traits<_Allocator> __traits;
 976:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       __traits::construct(__alloc, __dest, std::move(*__orig));
 977:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       __traits::destroy(__alloc, std::__addressof(*__orig));
 978:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     }
 979:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 980:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   // This class may be specialized for specific types.
 981:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   // Also known as is_trivially_relocatable.
 982:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   template<typename _Tp, typename = void>
 983:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     struct __is_bitwise_relocatable
 984:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     : is_trivial<_Tp> { };
 985:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 986:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   template <typename _Tp, typename _Up>
 987:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>
 988:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     __relocate_a_1(_Tp* __first, _Tp* __last,
 989:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 		   _Tp* __result, allocator<_Up>&) noexcept
 990:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     {
 991:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       ptrdiff_t __count = __last - __first;
 992:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       if (__count > 0)
 993:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 994:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       return __result + __count;
 995:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     }
 996:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
 997:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   template <typename _InputIterator, typename _ForwardIterator,
 998:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	    typename _Allocator>
 999:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     inline _ForwardIterator
1000:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     __relocate_a_1(_InputIterator __first, _InputIterator __last,
1001:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 		   _ForwardIterator __result, _Allocator& __alloc)
1002:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     noexcept(noexcept(std::__relocate_object_a(std::addressof(*__result),
1003:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 					       std::addressof(*__first),
1004:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 					       __alloc)))
1005:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     {
1006:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_InputIterator>::value_type
1007:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	_ValueType;
1008:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
1009:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	_ValueType2;
1010:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       static_assert(std::is_same<_ValueType, _ValueType2>::value,
1011:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	  "relocation is only possible for values of the same type");
1012:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       _ForwardIterator __cur = __result;
1013:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       for (; __first != __last; ++__first, (void)++__cur)
1014:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	std::__relocate_object_a(std::__addressof(*__cur),
1015:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 				 std::__addressof(*__first), __alloc);
1016:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       return __cur;
1017:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     }
1018:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 
1019:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****   template <typename _InputIterator, typename _ForwardIterator,
1020:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	    typename _Allocator>
1021:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     inline _ForwardIterator
1022:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****     __relocate_a(_InputIterator __first, _InputIterator __last,
 1300              		.loc 27 1022 5 view .LVU272
 1301              	.LBB2078:
 1302              	.LBI2078:
 988:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 		   _Tp* __result, allocator<_Up>&) noexcept
 1303              		.loc 27 988 5 view .LVU273
 1304              	.LBB2079:
 992:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 1305              		.loc 27 992 7 is_stmt 0 view .LVU274
 1306 0064 BBF1000F 		cmp	fp, #0
ARM GAS  /tmp/ccw5fbVv.s 			page 249


 1307 0068 0CDC     		bgt	.L54
 1308              	.LVL48:
 992:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 1309              		.loc 27 992 7 view .LVU275
 1310              	.LBE2079:
 1311              	.LBE2078:
 1312              	.LBE2077:
 1313              	.LBE2076:
 1314              	.LBE2075:
 1315              	.LBE2074:
 1316              	.LBE2092:
 1317              	.LBB2093:
 1318              	.LBI2093:
 350:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       {
 1319              		.loc 2 350 7 is_stmt 1 view .LVU276
 1320              	.LBB2094:
 353:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 1321              		.loc 2 353 2 is_stmt 0 view .LVU277
 1322 006a B8F1000F 		cmp	r8, #0
 1323 006e 24D1     		bne	.L55
 1324              	.LVL49:
 1325              	.L38:
 353:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 1326              		.loc 2 353 2 view .LVU278
 1327              	.LBE2094:
 1328              	.LBE2093:
 679:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      this->_M_impl._M_end_of_storage = __new_start + __len;
 1329              		.loc 26 679 55 view .LVU279
 1330 0070 3444     		add	r4, r4, r6
 1331              	.LVL50:
 678:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      this->_M_impl._M_finish = __new_start + __size + __n;
 1332              		.loc 26 678 31 view .LVU280
 1333 0072 C5F800A0 		str	r10, [r5]
 680:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    }
 1334              		.loc 26 680 40 view .LVU281
 1335 0076 C5F80890 		str	r9, [r5, #8]
 679:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      this->_M_impl._M_end_of_storage = __new_start + __len;
 1336              		.loc 26 679 55 view .LVU282
 1337 007a 0AEB8404 		add	r4, r10, r4, lsl #2
 679:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      this->_M_impl._M_end_of_storage = __new_start + __len;
 1338              		.loc 26 679 32 view .LVU283
 1339 007e 6C60     		str	r4, [r5, #4]
 1340              	.LBE2106:
 1341              	.LBE2112:
 1342              	.LBE2117:
 1343              	.LBE2122:
 1344              		.loc 26 683 5 view .LVU284
 1345 0080 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1346              	.LVL51:
 1347              	.L54:
 1348              	.LBB2123:
 1349              	.LBB2118:
 1350              	.LBB2113:
 1351              	.LBB2107:
 1352              	.LBB2100:
 1353              	.LBB2090:
 1354              	.LBB2088:
ARM GAS  /tmp/ccw5fbVv.s 			page 250


 1355              	.LBB2086:
 1356              	.LBB2084:
 1357              	.LBB2082:
 1358              	.LBB2080:
 993:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       return __result + __count;
 1359              		.loc 27 993 19 view .LVU285
 1360 0084 4146     		mov	r1, r8
 1361 0086 5A46     		mov	r2, fp
 1362 0088 5046     		mov	r0, r10
 1363 008a FFF7FEFF 		bl	memmove
 1364              	.LVL52:
 993:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       return __result + __count;
 1365              		.loc 27 993 19 view .LVU286
 1366              	.LBE2080:
 1367              	.LBE2082:
 1368              	.LBE2084:
 1369              	.LBE2086:
 1370              	.LBE2088:
 1371              	.LBE2090:
 1372              	.LBE2100:
 677:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      this->_M_impl._M_start = __new_start;
 1373              		.loc 26 677 8 view .LVU287
 1374 008e A968     		ldr	r1, [r5, #8]
 1375 0090 A1EB0801 		sub	r1, r1, r8
 1376              	.LVL53:
 1377              	.LBB2101:
 350:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       {
 1378              		.loc 2 350 7 is_stmt 1 view .LVU288
 1379              	.L37:
 1380              	.LBB2099:
 1381              	.LBB2095:
 1382              	.LBI2095:
 491:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 1383              		.loc 9 491 7 view .LVU289
 1384              	.LBB2096:
 1385              	.LBB2097:
 1386              	.LBI2097:
 120:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****       {
 1387              		.loc 4 120 7 view .LVU290
 1388              	.LBB2098:
 1389              		.loc 4 133 19 is_stmt 0 view .LVU291
 1390 0094 4046     		mov	r0, r8
 1391 0096 FFF7FEFF 		bl	_ZdlPvj
 1392              	.LVL54:
 1393              		.loc 4 133 19 view .LVU292
 1394              	.LBE2098:
 1395              	.LBE2097:
 492:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 1396              		.loc 9 492 35 view .LVU293
 1397 009a E9E7     		b	.L38
 1398              	.LVL55:
 1399              	.L53:
 492:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h **** 
 1400              		.loc 9 492 35 view .LVU294
 1401              	.LBE2096:
 1402              	.LBE2095:
 1403              	.LBE2099:
ARM GAS  /tmp/ccw5fbVv.s 			page 251


 1404              	.LBE2101:
 1405              	.LBB2102:
 1406              	.LBB2054:
 1407              	.LBB2049:
 1408              	.LBB2050:
 1409              	.LBB2051:
 115:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****       }
 1410              		.loc 4 115 41 view .LVU295
 1411 009c 4B45     		cmp	r3, r9
 1412 009e 28BF     		it	cs
 1413 00a0 4B46     		movcs	r3, r9
 1414              	.LVL56:
 115:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****       }
 1415              		.loc 4 115 41 view .LVU296
 1416 00a2 4FEA8309 		lsl	r9, r3, #2
 1417              	.LVL57:
 1418              	.L34:
 115:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****       }
 1419              		.loc 4 115 41 view .LVU297
 1420              	.LBE2051:
 1421              	.LBE2050:
 1422              	.LBI2049:
 459:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       { return __a.allocate(__n); }
 1423              		.loc 9 459 7 is_stmt 1 view .LVU298
 1424              	.LBB2053:
 1425              	.LBI2050:
 103:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****       {
 1426              		.loc 4 103 7 view .LVU299
 1427              	.LBB2052:
 115:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****       }
 1428              		.loc 4 115 41 is_stmt 0 view .LVU300
 1429 00a6 4846     		mov	r0, r9
 1430              	.LVL58:
 115:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****       }
 1431              		.loc 4 115 41 view .LVU301
 1432 00a8 FFF7FEFF 		bl	_Znwj
 1433              	.LVL59:
 115:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****       }
 1434              		.loc 4 115 41 view .LVU302
 1435 00ac 8246     		mov	r10, r0
 1436              	.LVL60:
 115:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****       }
 1437              		.loc 4 115 41 view .LVU303
 1438              	.LBE2052:
 1439              	.LBE2053:
 1440              	.LBE2049:
 1441              	.LBE2054:
 1442              	.LBE2102:
 680:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    }
 1443              		.loc 26 680 54 view .LVU304
 1444 00ae 8144     		add	r9, r9, r0
 1445              	.LBB2103:
 1446              	.LBB2091:
 1447              	.LBB2089:
 1448              	.LBB2087:
 1449              	.LBB2085:
 1450              	.LBB2083:
ARM GAS  /tmp/ccw5fbVv.s 			page 252


 1451              	.LBB2081:
 991:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       if (__count > 0)
 1452              		.loc 27 991 34 view .LVU305
 1453 00b0 D5E90083 		ldrd	r8, r3, [r5]
 1454 00b4 A3EB080B 		sub	fp, r3, r8
 1455              	.LBE2081:
 1456              	.LBE2083:
 1457              	.LBE2085:
 1458              	.LBE2087:
 1459              	.LBE2089:
 1460              	.LBE2091:
 1461              	.LBE2103:
 1462              	.LBB2104:
 1463              	.LBB2055:
 1464 00b8 CEE7     		b	.L35
 1465              	.LVL61:
 1466              	.L55:
 991:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h ****       if (__count > 0)
 1467              		.loc 27 991 34 view .LVU306
 1468              	.LBE2055:
 1469              	.LBE2104:
 677:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      this->_M_impl._M_start = __new_start;
 1470              		.loc 26 677 8 view .LVU307
 1471 00ba A968     		ldr	r1, [r5, #8]
 1472 00bc A1EB0801 		sub	r1, r1, r8
 1473 00c0 E8E7     		b	.L37
 1474              	.LVL62:
 1475              	.L33:
 1476              	.LBB2105:
 1477              	.LBB2046:
 677:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      this->_M_impl._M_start = __new_start;
 1478              		.loc 26 677 8 view .LVU308
 1479 00c2 DFF81090 		ldr	r9, .L56+4
 1480 00c6 EEE7     		b	.L34
 1481              	.LVL63:
 1482              	.L52:
1759:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  __throw_length_error(__N(__s));
 1483              		.loc 2 1759 24 view .LVU309
 1484 00c8 0148     		ldr	r0, .L56
 1485              	.LVL64:
 1486              		.loc 2 1759 24 view .LVU310
 1487 00ca FFF7FEFF 		bl	_ZSt20__throw_length_errorPKc
 1488              	.LVL65:
 1489              	.L57:
 1490              		.loc 2 1759 24 view .LVU311
 1491 00ce 00BF     		.align	2
 1492              	.L56:
 1493 00d0 00000000 		.word	.LC6
 1494 00d4 FCFFFF7F 		.word	2147483644
 1495              	.LBE2046:
 1496              	.LBE2105:
 1497              	.LBE2107:
 1498              	.LBE2113:
 1499              	.LBE2118:
 1500              	.LBE2123:
 1501              		.cfi_endproc
 1502              	.LFE8650:
ARM GAS  /tmp/ccw5fbVv.s 			page 253


 1504              		.section	.rodata._ZN15ImpulseResponse11_SetWeightsEv.str1.4,"aMS",%progbits,1
 1505              		.align	2
 1506              	.LC7:
 1507 0000 28285369 		.ascii	"((SizeAtCompileTime == Dynamic && (MaxSizeAtCompile"
 1507      7A654174 
 1507      436F6D70 
 1507      696C6554 
 1507      696D6520 
 1508 0033 54696D65 		.ascii	"Time == Dynamic || size <= MaxSizeAtCompileTime)) |"
 1508      203D3D20 
 1508      44796E61 
 1508      6D696320 
 1508      7C7C2073 
 1509 0066 7C205369 		.ascii	"| SizeAtCompileTime == size) && size >= 0\000"
 1509      7A654174 
 1509      436F6D70 
 1509      696C6554 
 1509      696D6520 
 1510              		.align	2
 1511              	.LC8:
 1512 0090 636F6E73 		.ascii	"constexpr void Eigen::PlainObjectBase<Derived>::res"
 1512      74657870 
 1512      7220766F 
 1512      69642045 
 1512      6967656E 
 1513 00c3 697A6528 		.ascii	"ize(Eigen::Index) [with Derived = Eigen::Matrix<flo"
 1513      45696765 
 1513      6E3A3A49 
 1513      6E646578 
 1513      29205B77 
 1514 00f6 61742C20 		.ascii	"at, -1, 1>; Eigen::Index = int]\000"
 1514      2D312C20 
 1514      313E3B20 
 1514      45696765 
 1514      6E3A3A49 
 1515 0116 0000     		.align	2
 1516              	.LC9:
 1517 0118 2E2E2F2E 		.ascii	"../../RTNeural/modules/Eigen/Eigen/src/Core/PlainOb"
 1517      2E2F5254 
 1517      4E657572 
 1517      616C2F6D 
 1517      6F64756C 
 1518 014b 6A656374 		.ascii	"jectBase.h\000"
 1518      42617365 
 1518      2E6800
 1519 0156 0000     		.align	2
 1520              	.LC10:
 1521 0158 696E6465 		.ascii	"index >= 0 && index < size()\000"
 1521      78203E3D 
 1521      20302026 
 1521      2620696E 
 1521      64657820 
 1522 0175 000000   		.align	2
 1523              	.LC11:
 1524 0178 45696765 		.ascii	"Eigen::DenseCoeffsBase<Derived, 1>::Scalar& Eigen::"
 1524      6E3A3A44 
 1524      656E7365 
ARM GAS  /tmp/ccw5fbVv.s 			page 254


 1524      436F6566 
 1524      66734261 
 1525 01ab 44656E73 		.ascii	"DenseCoeffsBase<Derived, 1>::operator[](Eigen::Inde"
 1525      65436F65 
 1525      66667342 
 1525      6173653C 
 1525      44657269 
 1526 01de 7829205B 		.ascii	"x) [with Derived = Eigen::Matrix<float, -1, 1>; Eig"
 1526      77697468 
 1526      20446572 
 1526      69766564 
 1526      203D2045 
 1527 0211 656E3A3A 		.ascii	"en::DenseCoeffsBase<Derived, 1>::Scalar = float; Ei"
 1527      44656E73 
 1527      65436F65 
 1527      66667342 
 1527      6173653C 
 1528 0244 67656E3A 		.ascii	"gen::Index = int]\000"
 1528      3A496E64 
 1528      6578203D 
 1528      20696E74 
 1528      5D00
 1529 0256 0000     		.align	2
 1530              	.LC12:
 1531 0258 2E2E2F2E 		.ascii	"../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCo"
 1531      2E2F5254 
 1531      4E657572 
 1531      616C2F6D 
 1531      6F64756C 
 1532 028b 65666673 		.ascii	"effsBase.h\000"
 1532      42617365 
 1532      2E6800
 1533              		.section	.text._ZN15ImpulseResponse11_SetWeightsEv,"ax",%progbits
 1534              		.align	1
 1535              		.p2align 2,,3
 1536              		.global	_ZN15ImpulseResponse11_SetWeightsEv
 1537              		.syntax unified
 1538              		.thumb
 1539              		.thumb_func
 1540              		.fpu fpv5-d16
 1542              	_ZN15ImpulseResponse11_SetWeightsEv:
 1543              	.LVL66:
 1544              	.LFB8127:
  44:ImpulseResponse/ImpulseResponse.cpp **** 
  45:ImpulseResponse/ImpulseResponse.cpp **** void ImpulseResponse::_SetWeights()
  46:ImpulseResponse/ImpulseResponse.cpp **** {
 1545              		.loc 1 46 1 is_stmt 1 view -0
 1546              		.cfi_startproc
 1547              		@ args = 0, pretend = 0, frame = 0
 1548              		@ frame_needed = 0, uses_anonymous_args = 0
  47:ImpulseResponse/ImpulseResponse.cpp **** 
  48:ImpulseResponse/ImpulseResponse.cpp ****   const size_t irLength = std::min(mRawAudio.size(), mMaxLength);
 1549              		.loc 1 48 3 view .LVU313
 1550              	.LBB2186:
 1551              	.LBI2186:
 918:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 1552              		.loc 2 918 7 view .LVU314
ARM GAS  /tmp/ccw5fbVv.s 			page 255


 1553              	.LBB2187:
 919:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 1554              		.loc 2 919 50 is_stmt 0 view .LVU315
 1555 0000 D0E90523 		ldrd	r2, r3, [r0, #20]
 1556 0004 816A     		ldr	r1, [r0, #40]
 1557 0006 9B1A     		subs	r3, r3, r2
 1558              	.LBE2187:
 1559              	.LBE2186:
  46:ImpulseResponse/ImpulseResponse.cpp **** 
 1560              		.loc 1 46 1 view .LVU316
 1561 0008 70B5     		push	{r4, r5, r6, lr}
 1562              		.cfi_def_cfa_offset 16
 1563              		.cfi_offset 4, -16
 1564              		.cfi_offset 5, -12
 1565              		.cfi_offset 6, -8
 1566              		.cfi_offset 14, -4
 1567              	.LBB2189:
 1568              	.LBB2188:
 919:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 1569              		.loc 2 919 50 view .LVU317
 1570 000a 9C10     		asrs	r4, r3, #2
 1571 000c 8C42     		cmp	r4, r1
 1572 000e 28BF     		it	cs
 1573 0010 0C46     		movcs	r4, r1
 1574              	.LVL67:
 919:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 1575              		.loc 2 919 50 view .LVU318
 1576              	.LBE2188:
 1577              	.LBE2189:
  49:ImpulseResponse/ImpulseResponse.cpp ****   mWeight.resize(irLength);
 1578              		.loc 1 49 3 is_stmt 1 view .LVU319
 1579              	.LBB2190:
 1580              	.LBI2190:
 243:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     { return m_storage.data(); }
 244:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** 
 245:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     /** \returns a pointer to the data array of this matrix */
 246:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar *data()
 247:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     { return m_storage.data(); }
 248:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** 
 249:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     /** Resizes \c *this to a \a rows x \a cols matrix.
 250:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****       *
 251:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****       * This method is intended for dynamic-size matrices, although it is legal to call it on any
 252:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****       * matrix as long as fixed dimensions are left unchanged. If you only want to change the numbe
 253:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****       * of rows and/or of columns, you can use resize(NoChange_t, Index), resize(Index, NoChange_t)
 254:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****       *
 255:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****       * If the current number of coefficients of \c *this exactly matches the
 256:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****       * product \a rows * \a cols, then no memory allocation is performed and
 257:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****       * the current values are left unchanged. In all other cases, including
 258:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****       * shrinking, the data is reallocated and all previous values are lost.
 259:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****       *
 260:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****       * Example: \include Matrix_resize_int_int.cpp
 261:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****       * Output: \verbinclude Matrix_resize_int_int.out
 262:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****       *
 263:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****       * \sa resize(Index) for vectors, resize(NoChange_t, Index), resize(Index, NoChange_t)
 264:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****       */
 265:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE constexpr void resize(Index rows, Index cols) {
 266:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****       eigen_assert(internal::check_implication(RowsAtCompileTime!=Dynamic, rows==RowsAtCompileTime)
ARM GAS  /tmp/ccw5fbVv.s 			page 256


 267:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****                    && internal::check_implication(ColsAtCompileTime!=Dynamic, cols==ColsAtCompileTi
 268:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****                    && internal::check_implication(RowsAtCompileTime==Dynamic && MaxRowsAtCompileTim
 269:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****                    && internal::check_implication(ColsAtCompileTime==Dynamic && MaxColsAtCompileTim
 270:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****                    && rows>=0 && cols>=0 && "Invalid sizes when resizing a matrix or array.");
 271:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****       internal::check_rows_cols_for_overflow<MaxSizeAtCompileTime>::run(rows, cols);
 272:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****       #ifdef EIGEN_INITIALIZE_COEFFS
 273:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****         Index size = rows*cols;
 274:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****         bool size_changed = size != this->size();
 275:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****         m_storage.resize(size, rows, cols);
 276:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****         if(size_changed) EIGEN_INITIALIZE_COEFFS_IF_THAT_OPTION_IS_ENABLED
 277:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****       #else
 278:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****         m_storage.resize(rows*cols, rows, cols);
 279:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****       #endif
 280:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     }
 281:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h **** 
 282:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     /** Resizes \c *this to a vector of length \a size
 283:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****       *
 284:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****       * \only_for_vectors. This method does not work for
 285:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****       * partially dynamic matrices when the static dimension is anything other
 286:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****       * than 1. For example it will not work with Matrix<double, 2, Dynamic>.
 287:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****       *
 288:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****       * Example: \include Matrix_resize_int.cpp
 289:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****       * Output: \verbinclude Matrix_resize_int.out
 290:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****       *
 291:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****       * \sa resize(Index,Index), resize(NoChange_t, Index), resize(Index, NoChange_t)
 292:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****       */
 293:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     EIGEN_DEVICE_FUNC inline constexpr void resize(Index size) {
 1581              		.loc 7 293 45 view .LVU320
 1582              	.LBB2191:
 294:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****         EIGEN_STATIC_ASSERT_VECTOR_ONLY(PlainObjectBase)
 295:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****         eigen_assert(
 1583              		.loc 7 295 9 is_stmt 0 view .LVU321
 1584 0012 002C     		cmp	r4, #0
 1585 0014 67DB     		blt	.L93
 1586              	.LBB2192:
 1587              	.LBB2193:
 671:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       {
 1588              		.loc 5 671 7 view .LVU322
 1589 0016 036B     		ldr	r3, [r0, #48]
 1590 0018 0646     		mov	r6, r0
 1591              	.LVL68:
 671:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       {
 1592              		.loc 5 671 7 view .LVU323
 1593              	.LBE2193:
 1594              	.LBI2192:
 669:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     {
 1595              		.loc 5 669 48 is_stmt 1 view .LVU324
 1596              	.LBB2219:
 671:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****       {
 1597              		.loc 5 671 7 is_stmt 0 view .LVU325
 1598 001a 9C42     		cmp	r4, r3
 1599 001c 1FD0     		beq	.L60
 673:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****         if (size>0) // >0 and not simply !=0 to let the compiler knows that size cannot be negative
 1600              		.loc 5 673 77 view .LVU326
 1601 001e C36A     		ldr	r3, [r0, #44]
 1602              	.LVL69:
 1603              	.LBB2194:
ARM GAS  /tmp/ccw5fbVv.s 			page 257


 1604              	.LBI2194:
 1605              		.loc 8 528 64 is_stmt 1 view .LVU327
 1606              	.LBB2195:
 1607              	.LBI2195:
 300:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** {
 1608              		.loc 8 300 52 view .LVU328
 1609              	.LBB2196:
 1610              	.LBI2196:
 232:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** {
 1611              		.loc 8 232 31 view .LVU329
 1612              	.LBE2196:
 1613              	.LBE2195:
 1614              	.LBE2194:
 1615              	.LBE2219:
 1616              	.LBE2192:
 1617              	.LBE2191:
 1618              	.LBE2190:
 242:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   #endif
 1619              		.loc 8 242 5 view .LVU330
 1620              	.LBB2239:
 1621              	.LBB2232:
 1622              	.LBB2226:
 1623              	.LBB2220:
 1624              	.LBB2205:
 1625              	.LBB2203:
 1626              	.LBB2201:
 1627              	.LBB2197:
 1628              	.LBI2197:
 165:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** {
 1629              		.loc 8 165 31 view .LVU331
 1630              	.LBE2197:
 1631              	.LBE2201:
 1632              	.LBE2203:
 1633              	.LBE2205:
 1634              	.LBE2220:
 1635              	.LBE2226:
 1636              	.LBE2232:
 1637              	.LBE2239:
 167:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     uint8_t offset = static_cast<uint8_t>(*(static_cast<uint8_t*>(ptr) - 1));
 1638              		.loc 8 167 3 view .LVU332
 1639              	.LBB2240:
 1640              	.LBB2233:
 1641              	.LBB2227:
 1642              	.LBB2221:
 1643              	.LBB2206:
 1644              	.LBB2204:
 1645              	.LBB2202:
 1646              	.LBB2200:
 1647              	.LBB2198:
 1648 0020 23B1     		cbz	r3, .L61
 1649              	.LBB2199:
 168:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     void* original = static_cast<void*>(static_cast<uint8_t*>(ptr) - offset);
 1650              		.loc 8 168 5 view .LVU333
 1651              	.LVL70:
 169:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
 1652              		.loc 8 169 5 view .LVU334
 171:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     EIGEN_USING_STD(free)
ARM GAS  /tmp/ccw5fbVv.s 			page 258


 1653              		.loc 8 171 5 view .LVU335
 172:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****     free(original);
 1654              		.loc 8 172 5 view .LVU336
 173:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   }
 1655              		.loc 8 173 5 view .LVU337
 169:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
 1656              		.loc 8 169 70 is_stmt 0 view .LVU338
 1657 0022 13F8010C 		ldrb	r0, [r3, #-1]	@ zero_extendqisi2
 1658              	.LVL71:
 173:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   }
 1659              		.loc 8 173 9 view .LVU339
 1660 0026 181A     		subs	r0, r3, r0
 1661              	.LVL72:
 173:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   }
 1662              		.loc 8 173 9 view .LVU340
 1663 0028 FFF7FEFF 		bl	free
 1664              	.LVL73:
 1665              	.L61:
 173:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   }
 1666              		.loc 8 173 9 view .LVU341
 1667              	.LBE2199:
 1668              	.LBE2198:
 1669              	.LBE2200:
 1670              	.LBE2202:
 1671              	.LBE2204:
 1672              	.LBE2206:
 674:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****           m_data = internal::conditional_aligned_new_auto<T,(Options_&DontAlign)==0>(size);
 1673              		.loc 5 674 9 view .LVU342
 1674 002c 002C     		cmp	r4, #0
 1675 002e 36DC     		bgt	.L94
 677:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****         EIGEN_INTERNAL_DENSE_STORAGE_CTOR_PLUGIN({})
 1676              		.loc 5 677 18 view .LVU343
 1677 0030 0023     		movs	r3, #0
 1678              	.LBE2221:
 1679              	.LBE2227:
 1680              	.LBE2233:
 1681              	.LBE2240:
 1682              	.LBB2241:
  50:ImpulseResponse/ImpulseResponse.cpp ****   // Gain reduction.
  51:ImpulseResponse/ImpulseResponse.cpp ****   // https://github.com/sdatkinson/NeuralAmpModelerPlugin/issues/100#issuecomment-1455273839
  52:ImpulseResponse/ImpulseResponse.cpp ****   // Add sample rate-dependence
  53:ImpulseResponse/ImpulseResponse.cpp ****   //const float gain = pow(10, -18 * 0.05) * 48000 / mSampleRate;  //KAB NOTE: This made a very bad
  54:ImpulseResponse/ImpulseResponse.cpp ****   for (size_t i = 0, j = irLength - 1; i < irLength; i++, j--)
 1683              		.loc 1 54 22 view .LVU344
 1684 0032 4FF0FF35 		mov	r5, #-1
 1685              	.LBE2241:
 1686              	.LBB2269:
 1687              	.LBB2234:
 1688              	.LBB2228:
 1689              	.LBB2222:
 680:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     }
 1690              		.loc 5 680 14 view .LVU345
 1691 0036 C6E90B33 		strd	r3, r3, [r6, #44]
 1692              	.LVL74:
 680:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     }
 1693              		.loc 5 680 14 view .LVU346
 1694              	.LBE2222:
ARM GAS  /tmp/ccw5fbVv.s 			page 259


 1695              	.LBE2228:
 1696              	.LBE2234:
 1697              	.LBE2269:
 1698              		.loc 1 54 3 is_stmt 1 view .LVU347
 1699              	.LBB2270:
 1700              		.loc 1 54 42 view .LVU348
 1701              	.L66:
 1702              		.loc 1 54 42 is_stmt 0 view .LVU349
 1703              	.LBE2270:
  55:ImpulseResponse/ImpulseResponse.cpp ****     //mWeight[j] = gain * mRawAudio[i];  
  56:ImpulseResponse/ImpulseResponse.cpp ****     mWeight[j] = mRawAudio[i];
  57:ImpulseResponse/ImpulseResponse.cpp ****   mHistoryRequired = irLength - 1;
 1704              		.loc 1 57 3 is_stmt 1 view .LVU350
 1705              	.LBB2271:
 1706              	.LBB2272:
 1707              	.LBB2273:
 1708              	.LBB2274:
 919:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 1709              		.loc 2 919 66 is_stmt 0 view .LVU351
 1710 003a D6E90002 		ldrd	r0, r2, [r6]
 1711              	.LBE2274:
 1712              	.LBE2273:
 1713              	.LBE2272:
 1714              	.LBE2271:
  58:ImpulseResponse/ImpulseResponse.cpp **** 
  59:ImpulseResponse/ImpulseResponse.cpp ****   // Moved from HISTORY::EnsureHistorySize since only doing once for this module (assuming same siz
  60:ImpulseResponse/ImpulseResponse.cpp ****   //   TODO: Maybe find a more efficient method of indexing mHistory,
  61:ImpulseResponse/ImpulseResponse.cpp ****   //         rather than copying the end of the vector (length of IR) back to the beginning all at 
  62:ImpulseResponse/ImpulseResponse.cpp ****   const size_t requiredHistoryArraySize = 5 * mHistoryRequired; // Just so we don't spend too much 
 1715              		.loc 1 62 16 view .LVU352
 1716 003e 05EB8501 		add	r1, r5, r5, lsl #2
  57:ImpulseResponse/ImpulseResponse.cpp **** 
 1717              		.loc 1 57 20 view .LVU353
 1718 0042 F560     		str	r5, [r6, #12]
 1719              		.loc 1 62 3 is_stmt 1 view .LVU354
 1720              	.LVL75:
  63:ImpulseResponse/ImpulseResponse.cpp ****   mHistory.resize(requiredHistoryArraySize);
 1721              		.loc 1 63 3 view .LVU355
 1722              	.LBB2283:
 1723              	.LBI2271:
 937:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       {
 1724              		.loc 2 937 7 view .LVU356
 1725              	.LBB2279:
 1726              	.LBB2276:
 1727              	.LBI2273:
 918:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 1728              		.loc 2 918 7 view .LVU357
 1729              	.LBB2275:
 919:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 1730              		.loc 2 919 50 is_stmt 0 view .LVU358
 1731 0044 131A     		subs	r3, r2, r0
 1732 0046 9B10     		asrs	r3, r3, #2
 1733              	.LVL76:
 919:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 1734              		.loc 2 919 50 view .LVU359
 1735              	.LBE2275:
 1736              	.LBE2276:
ARM GAS  /tmp/ccw5fbVv.s 			page 260


 939:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  _M_default_append(__new_size - size());
 1737              		.loc 2 939 2 view .LVU360
 1738 0048 9942     		cmp	r1, r3
 1739 004a 3BD8     		bhi	.L95
 941:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 1740              		.loc 2 941 7 view .LVU361
 1741 004c 20D3     		bcc	.L96
 1742              	.LVL77:
 1743              	.L73:
 941:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 1744              		.loc 2 941 7 view .LVU362
 1745              	.LBE2279:
 1746              	.LBE2283:
  64:ImpulseResponse/ImpulseResponse.cpp ****   std::fill(mHistory.begin(), mHistory.end(), 0.0f);
 1747              		.loc 1 64 3 is_stmt 1 view .LVU363
 1748              	.LBB2284:
 1749              	.LBI2284:
 811:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_start); }
 1750              		.loc 2 811 7 view .LVU364
 1751              	.LBB2285:
 1752              	.LBI2285:
 1753              		.file 29 "/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits
   1:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** // Iterators -*- C++ -*-
   2:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
   3:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** //
   5:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** // software; you can redistribute it and/or modify it under the
   7:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** // terms of the GNU General Public License as published by the
   8:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** // any later version.
  10:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
  11:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** // This library is distributed in the hope that it will be useful,
  12:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** // GNU General Public License for more details.
  15:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
  16:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** // 3.1, as published by the Free Software Foundation.
  19:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
  20:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** // You should have received a copy of the GNU General Public License and
  21:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** // <http://www.gnu.org/licenses/>.
  24:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
  25:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** /*
  26:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****  *
  27:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****  * Copyright (c) 1994
  28:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****  * Hewlett-Packard Company
  29:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****  *
  30:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****  * provided that the above copyright notice appear in all copies and
  33:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****  * that both that copyright notice and this permission notice appear
  34:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****  * representations about the suitability of this software for any
ARM GAS  /tmp/ccw5fbVv.s 			page 261


  36:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****  *
  38:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****  *
  39:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****  * Copyright (c) 1996-1998
  40:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****  *
  42:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****  * provided that the above copyright notice appear in all copies and
  45:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****  * that both that copyright notice and this permission notice appear
  46:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****  * representations about the suitability of this software for any
  48:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****  */
  50:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
  51:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** /** @file bits/stl_iterator.h
  52:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****  *  This is an internal header file, included by other library headers.
  53:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****  *  Do not attempt to use it directly. @headername{iterator}
  54:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****  *
  55:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****  *  This file implements reverse_iterator, back_insert_iterator,
  56:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****  *  front_insert_iterator, insert_iterator, __normal_iterator, and their
  57:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****  *  supporting functions and overloaded operators.
  58:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****  */
  59:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
  60:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** #ifndef _STL_ITERATOR_H
  61:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** #define _STL_ITERATOR_H 1
  62:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
  63:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** #include <bits/cpp_type_traits.h>
  64:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** #include <ext/type_traits.h>
  65:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** #include <bits/move.h>
  66:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** #include <bits/ptr_traits.h>
  67:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
  68:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** #if __cplusplus >= 201103L
  69:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** # include <type_traits>
  70:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** #endif
  71:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
  72:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** #if __cplusplus > 201703L
  73:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** # define __cpp_lib_array_constexpr 201811L
  74:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** # define __cpp_lib_constexpr_iterator 201811L
  75:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** #elif __cplusplus == 201703L
  76:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** # define __cpp_lib_array_constexpr 201803L
  77:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** #endif
  78:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
  79:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** #if __cplusplus > 201703L
  80:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** # include <compare>
  81:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** # include <new>
  82:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** # include <bits/iterator_concepts.h>
  83:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** #endif
  84:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
  85:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** namespace std _GLIBCXX_VISIBILITY(default)
  86:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** {
  87:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  88:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
  89:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   /**
  90:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    * @addtogroup iterators
  91:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    * @{
  92:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    */
ARM GAS  /tmp/ccw5fbVv.s 			page 262


  93:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
  94:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** #if __cplusplus > 201703L && __cpp_lib_concepts
  95:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   namespace __detail
  96:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   {
  97:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     // Weaken iterator_category _Cat to _Limit if it is derived from that,
  98:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     // otherwise use _Otherwise.
  99:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     template<typename _Cat, typename _Limit, typename _Otherwise = _Cat>
 100:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       using __clamp_iter_cat
 101:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	= conditional_t<derived_from<_Cat, _Limit>, _Limit, _Otherwise>;
 102:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   }
 103:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** #endif
 104:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 105:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   // 24.4.1 Reverse iterators
 106:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   /**
 107:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  Bidirectional and random access iterators have corresponding reverse
 108:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  %iterator adaptors that iterate through the data structure in the
 109:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  opposite direction.  They have the same signatures as the corresponding
 110:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  iterators.  The fundamental relation between a reverse %iterator and its
 111:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  corresponding %iterator @c i is established by the identity:
 112:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  @code
 113:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *      &*(reverse_iterator(i)) == &*(i - 1)
 114:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  @endcode
 115:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *
 116:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  <em>This mapping is dictated by the fact that while there is always a
 117:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  pointer past the end of an array, there might not be a valid pointer
 118:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  before the beginning of an array.</em> [24.4.1]/1,2
 119:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *
 120:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  Reverse iterators can be tricky and surprising at first.  Their
 121:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  semantics make sense, however, and the trickiness is a side effect of
 122:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  the requirement that the iterators must be safe.
 123:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   */
 124:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   template<typename _Iterator>
 125:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     class reverse_iterator
 126:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     : public iterator<typename iterator_traits<_Iterator>::iterator_category,
 127:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 		      typename iterator_traits<_Iterator>::value_type,
 128:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 		      typename iterator_traits<_Iterator>::difference_type,
 129:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 		      typename iterator_traits<_Iterator>::pointer,
 130:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****                       typename iterator_traits<_Iterator>::reference>
 131:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     {
 132:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     protected:
 133:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       _Iterator current;
 134:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 135:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       typedef iterator_traits<_Iterator>		__traits_type;
 136:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 137:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     public:
 138:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       typedef _Iterator					iterator_type;
 139:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       typedef typename __traits_type::difference_type	difference_type;
 140:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       typedef typename __traits_type::pointer		pointer;
 141:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       typedef typename __traits_type::reference		reference;
 142:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 143:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** #if __cplusplus > 201703L && __cpp_lib_concepts
 144:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       using iterator_concept
 145:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	= conditional_t<random_access_iterator<_Iterator>,
 146:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 			random_access_iterator_tag,
 147:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 			bidirectional_iterator_tag>;
 148:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       using iterator_category
 149:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	= __detail::__clamp_iter_cat<typename __traits_type::iterator_category,
ARM GAS  /tmp/ccw5fbVv.s 			page 263


 150:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 				     random_access_iterator_tag>;
 151:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** #endif
 152:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 153:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       /**
 154:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *  The default constructor value-initializes member @p current.
 155:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *  If it is a pointer, that means it is zero-initialized.
 156:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       */
 157:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 158:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       // 235 No specification of default ctor for reverse_iterator
 159:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       // 1012. reverse_iterator default ctor should value initialize
 160:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR
 161:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       reverse_iterator() : current() { }
 162:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 163:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       /**
 164:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *  This %iterator will move in the opposite direction that @p x does.
 165:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       */
 166:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       explicit _GLIBCXX17_CONSTEXPR
 167:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       reverse_iterator(iterator_type __x) : current(__x) { }
 168:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 169:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       /**
 170:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *  The copy constructor is normal.
 171:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       */
 172:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR
 173:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       reverse_iterator(const reverse_iterator& __x)
 174:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       : current(__x.current) { }
 175:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 176:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** #if __cplusplus >= 201103L
 177:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       reverse_iterator& operator=(const reverse_iterator&) = default;
 178:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** #endif
 179:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 180:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       /**
 181:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *  A %reverse_iterator across other types can be copied if the
 182:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *  underlying %iterator can be converted to the type of @c current.
 183:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       */
 184:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       template<typename _Iter>
 185:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	_GLIBCXX17_CONSTEXPR
 186:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****         reverse_iterator(const reverse_iterator<_Iter>& __x)
 187:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	: current(__x.base()) { }
 188:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 189:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       /**
 190:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *  @return  @c current, the %iterator used for underlying work.
 191:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       */
 192:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR iterator_type
 193:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       base() const
 194:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       { return current; }
 195:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 196:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       /**
 197:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *  @return  A reference to the value at @c --current
 198:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *
 199:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *  This requires that @c --current is dereferenceable.
 200:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *
 201:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *  @warning This implementation requires that for an iterator of the
 202:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *           underlying iterator type, @c x, a reference obtained by
 203:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *           @c *x remains valid after @c x has been modified or
 204:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *           destroyed. This is a bug: http://gcc.gnu.org/PR51823
 205:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       */
 206:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reference
ARM GAS  /tmp/ccw5fbVv.s 			page 264


 207:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       operator*() const
 208:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       {
 209:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	_Iterator __tmp = current;
 210:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	return *--__tmp;
 211:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       }
 212:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 213:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       /**
 214:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *  @return  A pointer to the value at @c --current
 215:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *
 216:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *  This requires that @c --current is dereferenceable.
 217:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       */
 218:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR pointer
 219:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       operator->() const
 220:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** #if __cplusplus > 201703L && __cpp_concepts >= 201907L
 221:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       requires is_pointer_v<_Iterator>
 222:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	|| requires(const _Iterator __i) { __i.operator->(); }
 223:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** #endif
 224:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       {
 225:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
 226:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	// 1052. operator-> should also support smart pointers
 227:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	_Iterator __tmp = current;
 228:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	--__tmp;
 229:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	return _S_to_pointer(__tmp);
 230:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       }
 231:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 232:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       /**
 233:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *  @return  @c *this
 234:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *
 235:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *  Decrements the underlying iterator.
 236:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       */
 237:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator&
 238:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       operator++()
 239:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       {
 240:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	--current;
 241:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	return *this;
 242:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       }
 243:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 244:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       /**
 245:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *  @return  The original value of @c *this
 246:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *
 247:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *  Decrements the underlying iterator.
 248:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       */
 249:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 250:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       operator++(int)
 251:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       {
 252:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	reverse_iterator __tmp = *this;
 253:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	--current;
 254:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	return __tmp;
 255:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       }
 256:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 257:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       /**
 258:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *  @return  @c *this
 259:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *
 260:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *  Increments the underlying iterator.
 261:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       */
 262:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator&
 263:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       operator--()
ARM GAS  /tmp/ccw5fbVv.s 			page 265


 264:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       {
 265:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	++current;
 266:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	return *this;
 267:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       }
 268:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 269:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       /**
 270:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *  @return  A reverse_iterator with the previous value of @c *this
 271:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *
 272:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *  Increments the underlying iterator.
 273:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       */
 274:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 275:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       operator--(int)
 276:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       {
 277:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	reverse_iterator __tmp = *this;
 278:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	++current;
 279:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	return __tmp;
 280:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       }
 281:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 282:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       /**
 283:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *  @return  A reverse_iterator that refers to @c current - @a __n
 284:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *
 285:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 286:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       */
 287:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 288:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       operator+(difference_type __n) const
 289:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       { return reverse_iterator(current - __n); }
 290:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 291:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       /**
 292:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *  @return  *this
 293:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *
 294:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *  Moves the underlying iterator backwards @a __n steps.
 295:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 296:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       */
 297:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator&
 298:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       operator+=(difference_type __n)
 299:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       {
 300:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	current -= __n;
 301:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	return *this;
 302:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       }
 303:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 304:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       /**
 305:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *  @return  A reverse_iterator that refers to @c current - @a __n
 306:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *
 307:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 308:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       */
 309:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 310:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       operator-(difference_type __n) const
 311:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       { return reverse_iterator(current + __n); }
 312:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 313:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       /**
 314:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *  @return  *this
 315:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *
 316:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *  Moves the underlying iterator forwards @a __n steps.
 317:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 318:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       */
 319:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator&
 320:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       operator-=(difference_type __n)
ARM GAS  /tmp/ccw5fbVv.s 			page 266


 321:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       {
 322:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	current += __n;
 323:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	return *this;
 324:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       }
 325:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 326:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       /**
 327:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *  @return  The value at @c current - @a __n - 1
 328:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *
 329:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 330:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       */
 331:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reference
 332:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       operator[](difference_type __n) const
 333:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       { return *(*this + __n); }
 334:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 335:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** #if __cplusplus > 201703L && __cpp_lib_concepts
 336:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       friend constexpr iter_rvalue_reference_t<_Iterator>
 337:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       iter_move(const reverse_iterator& __i)
 338:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       noexcept(is_nothrow_copy_constructible_v<_Iterator>
 339:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	       && noexcept(ranges::iter_move(--std::declval<_Iterator&>())))
 340:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       {
 341:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	auto __tmp = __i.base();
 342:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	return ranges::iter_move(--__tmp);
 343:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       }
 344:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 345:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       template<indirectly_swappable<_Iterator> _Iter2>
 346:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	friend constexpr void
 347:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	iter_swap(const reverse_iterator& __x,
 348:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 		  const reverse_iterator<_Iter2>& __y)
 349:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	noexcept(is_nothrow_copy_constructible_v<_Iterator>
 350:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 		 && is_nothrow_copy_constructible_v<_Iter2>
 351:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 		 && noexcept(ranges::iter_swap(--std::declval<_Iterator&>(),
 352:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 					       --std::declval<_Iter2&>())))
 353:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	{
 354:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	  auto __xtmp = __x.base();
 355:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	  auto __ytmp = __y.base();
 356:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	  ranges::iter_swap(--__xtmp, --__ytmp);
 357:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	}
 358:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** #endif
 359:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 360:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     private:
 361:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       template<typename _Tp>
 362:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	static _GLIBCXX17_CONSTEXPR _Tp*
 363:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	_S_to_pointer(_Tp* __p)
 364:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****         { return __p; }
 365:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 366:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       template<typename _Tp>
 367:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	static _GLIBCXX17_CONSTEXPR pointer
 368:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	_S_to_pointer(_Tp __t)
 369:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****         { return __t.operator->(); }
 370:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     };
 371:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 372:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   //@{
 373:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   /**
 374:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  @param  __x  A %reverse_iterator.
 375:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  @param  __y  A %reverse_iterator.
 376:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  @return  A simple bool.
 377:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *
ARM GAS  /tmp/ccw5fbVv.s 			page 267


 378:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  Reverse iterators forward comparisons to their underlying base()
 379:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  iterators.
 380:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *
 381:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   */
 382:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** #if __cplusplus <= 201703L || ! defined __cpp_lib_concepts
 383:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   template<typename _Iterator>
 384:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 385:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     operator==(const reverse_iterator<_Iterator>& __x,
 386:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 387:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     { return __x.base() == __y.base(); }
 388:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 389:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   template<typename _Iterator>
 390:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 391:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     operator<(const reverse_iterator<_Iterator>& __x,
 392:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 393:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     { return __y.base() < __x.base(); }
 394:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 395:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   template<typename _Iterator>
 396:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 397:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     operator!=(const reverse_iterator<_Iterator>& __x,
 398:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 399:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     { return !(__x == __y); }
 400:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 401:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   template<typename _Iterator>
 402:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 403:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     operator>(const reverse_iterator<_Iterator>& __x,
 404:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 405:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     { return __y < __x; }
 406:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 407:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   template<typename _Iterator>
 408:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 409:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     operator<=(const reverse_iterator<_Iterator>& __x,
 410:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 411:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     { return !(__y < __x); }
 412:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 413:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   template<typename _Iterator>
 414:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 415:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     operator>=(const reverse_iterator<_Iterator>& __x,
 416:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 417:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     { return !(__x < __y); }
 418:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 419:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 420:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   // DR 280. Comparison of reverse_iterator to const reverse_iterator.
 421:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 422:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 423:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     operator==(const reverse_iterator<_IteratorL>& __x,
 424:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 425:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     { return __x.base() == __y.base(); }
 426:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 427:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 428:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 429:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     operator<(const reverse_iterator<_IteratorL>& __x,
 430:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 431:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     { return __y.base() < __x.base(); }
 432:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 433:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 434:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
ARM GAS  /tmp/ccw5fbVv.s 			page 268


 435:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     operator!=(const reverse_iterator<_IteratorL>& __x,
 436:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 437:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     { return !(__x == __y); }
 438:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 439:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 440:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 441:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     operator>(const reverse_iterator<_IteratorL>& __x,
 442:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 443:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     { return __y < __x; }
 444:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 445:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 446:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 447:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     operator<=(const reverse_iterator<_IteratorL>& __x,
 448:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 449:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     { return !(__y < __x); }
 450:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 451:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 452:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 453:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     operator>=(const reverse_iterator<_IteratorL>& __x,
 454:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 455:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     { return !(__x < __y); }
 456:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** #else // C++20
 457:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 458:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     constexpr bool
 459:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     operator==(const reverse_iterator<_IteratorL>& __x,
 460:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 461:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     requires requires { { __x.base() == __y.base() } -> convertible_to<bool>; }
 462:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     { return __x.base() == __y.base(); }
 463:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 464:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 465:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     constexpr bool
 466:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     operator!=(const reverse_iterator<_IteratorL>& __x,
 467:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 468:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     requires requires { { __x.base() != __y.base() } -> convertible_to<bool>; }
 469:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     { return __x.base() != __y.base(); }
 470:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 471:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 472:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     constexpr bool
 473:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     operator<(const reverse_iterator<_IteratorL>& __x,
 474:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 475:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     requires requires { { __x.base() > __y.base() } -> convertible_to<bool>; }
 476:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     { return __x.base() > __y.base(); }
 477:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 478:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 479:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     constexpr bool
 480:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     operator>(const reverse_iterator<_IteratorL>& __x,
 481:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 482:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     requires requires { { __x.base() < __y.base() } -> convertible_to<bool>; }
 483:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     { return __x.base() < __y.base(); }
 484:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 485:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 486:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     constexpr bool
 487:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     operator<=(const reverse_iterator<_IteratorL>& __x,
 488:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 489:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     requires requires { { __x.base() >= __y.base() } -> convertible_to<bool>; }
 490:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     { return __x.base() >= __y.base(); }
 491:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
ARM GAS  /tmp/ccw5fbVv.s 			page 269


 492:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 493:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     constexpr bool
 494:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     operator>=(const reverse_iterator<_IteratorL>& __x,
 495:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 496:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     requires requires { { __x.base() <= __y.base() } -> convertible_to<bool>; }
 497:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     { return __x.base() <= __y.base(); }
 498:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 499:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   template<typename _IteratorL,
 500:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	   three_way_comparable_with<_IteratorL> _IteratorR>
 501:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     constexpr compare_three_way_result_t<_IteratorL, _IteratorR>
 502:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     operator<=>(const reverse_iterator<_IteratorL>& __x,
 503:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 		const reverse_iterator<_IteratorR>& __y)
 504:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     { return __y.base() <=> __x.base(); }
 505:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** #endif // C++20
 506:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   //@}
 507:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 508:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** #if __cplusplus < 201103L
 509:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   template<typename _Iterator>
 510:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     inline typename reverse_iterator<_Iterator>::difference_type
 511:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     operator-(const reverse_iterator<_Iterator>& __x,
 512:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 513:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     { return __y.base() - __x.base(); }
 514:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 515:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 516:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     inline typename reverse_iterator<_IteratorL>::difference_type
 517:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     operator-(const reverse_iterator<_IteratorL>& __x,
 518:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 519:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     { return __y.base() - __x.base(); }
 520:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** #else
 521:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 522:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   // DR 685. reverse_iterator/move_iterator difference has invalid signatures
 523:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 524:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR auto
 525:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     operator-(const reverse_iterator<_IteratorL>& __x,
 526:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 527:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     -> decltype(__y.base() - __x.base())
 528:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     { return __y.base() - __x.base(); }
 529:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** #endif
 530:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 531:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   template<typename _Iterator>
 532:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>
 533:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     operator+(typename reverse_iterator<_Iterator>::difference_type __n,
 534:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __x)
 535:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     { return reverse_iterator<_Iterator>(__x.base() - __n); }
 536:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 537:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** #if __cplusplus >= 201103L
 538:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   // Same as C++14 make_reverse_iterator but used in C++11 mode too.
 539:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   template<typename _Iterator>
 540:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>
 541:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     __make_reverse_iterator(_Iterator __i)
 542:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     { return reverse_iterator<_Iterator>(__i); }
 543:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 544:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** # if __cplusplus >= 201402L
 545:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** #  define __cpp_lib_make_reverse_iterator 201402
 546:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 547:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 548:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   // DR 2285. make_reverse_iterator
ARM GAS  /tmp/ccw5fbVv.s 			page 270


 549:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   /// Generator function for reverse_iterator.
 550:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   template<typename _Iterator>
 551:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>
 552:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     make_reverse_iterator(_Iterator __i)
 553:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     { return reverse_iterator<_Iterator>(__i); }
 554:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 555:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** #  if __cplusplus > 201703L && defined __cpp_lib_concepts
 556:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   template<typename _Iterator1, typename _Iterator2>
 557:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     requires (!sized_sentinel_for<_Iterator1, _Iterator2>)
 558:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     inline constexpr bool
 559:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     disable_sized_sentinel_for<reverse_iterator<_Iterator1>,
 560:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 			       reverse_iterator<_Iterator2>> = true;
 561:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** #  endif // C++20
 562:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** # endif // C++14
 563:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 564:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   template<typename _Iterator>
 565:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     _GLIBCXX20_CONSTEXPR
 566:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     auto
 567:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     __niter_base(reverse_iterator<_Iterator> __it)
 568:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     -> decltype(__make_reverse_iterator(__niter_base(__it.base())))
 569:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     { return __make_reverse_iterator(__niter_base(__it.base())); }
 570:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 571:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   template<typename _Iterator>
 572:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     struct __is_move_iterator<reverse_iterator<_Iterator> >
 573:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       : __is_move_iterator<_Iterator>
 574:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     { };
 575:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 576:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   template<typename _Iterator>
 577:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     _GLIBCXX20_CONSTEXPR
 578:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     auto
 579:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     __miter_base(reverse_iterator<_Iterator> __it)
 580:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     -> decltype(__make_reverse_iterator(__miter_base(__it.base())))
 581:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     { return __make_reverse_iterator(__miter_base(__it.base())); }
 582:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** #endif // C++11
 583:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 584:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   // 24.4.2.2.1 back_insert_iterator
 585:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   /**
 586:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 587:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *
 588:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 589:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  Assigning a T to the iterator appends it to the container using
 590:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  push_back.
 591:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *
 592:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  Tip:  Using the back_inserter function to create these iterators can
 593:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  save typing.
 594:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   */
 595:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   template<typename _Container>
 596:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     class back_insert_iterator
 597:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 598:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     {
 599:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     protected:
 600:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       _Container* container;
 601:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 602:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     public:
 603:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 604:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       typedef _Container          container_type;
 605:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** #if __cplusplus > 201703L
ARM GAS  /tmp/ccw5fbVv.s 			page 271


 606:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       using difference_type = ptrdiff_t;
 607:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 608:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       constexpr back_insert_iterator() noexcept : container(nullptr) { }
 609:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** #endif
 610:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 611:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       /// The only way to create this %iterator is with a container.
 612:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       explicit _GLIBCXX20_CONSTEXPR
 613:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       back_insert_iterator(_Container& __x)
 614:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       : container(std::__addressof(__x)) { }
 615:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 616:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       /**
 617:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *  @param  __value  An instance of whatever type
 618:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 619:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *                 reference-to-const T for container<T>.
 620:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 621:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *
 622:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *  This kind of %iterator doesn't really have a @a position in the
 623:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *  container (you can think of the position as being permanently at
 624:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *  the end, if you like).  Assigning a value to the %iterator will
 625:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *  always append the value to the end of the container.
 626:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       */
 627:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** #if __cplusplus < 201103L
 628:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       back_insert_iterator&
 629:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 630:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       {
 631:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	container->push_back(__value);
 632:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	return *this;
 633:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       }
 634:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** #else
 635:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 636:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       back_insert_iterator&
 637:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 638:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       {
 639:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	container->push_back(__value);
 640:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	return *this;
 641:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       }
 642:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 643:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 644:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       back_insert_iterator&
 645:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 646:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       {
 647:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	container->push_back(std::move(__value));
 648:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	return *this;
 649:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       }
 650:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** #endif
 651:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 652:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       /// Simply returns *this.
 653:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 654:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       back_insert_iterator&
 655:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       operator*()
 656:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       { return *this; }
 657:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 658:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 659:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 660:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       back_insert_iterator&
 661:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       operator++()
 662:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       { return *this; }
ARM GAS  /tmp/ccw5fbVv.s 			page 272


 663:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 664:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 665:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 666:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       back_insert_iterator
 667:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       operator++(int)
 668:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       { return *this; }
 669:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     };
 670:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 671:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   /**
 672:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  @param  __x  A container of arbitrary type.
 673:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  @return  An instance of back_insert_iterator working on @p __x.
 674:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *
 675:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  This wrapper function helps in creating back_insert_iterator instances.
 676:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 677:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 678:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 679:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 680:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  types for you.
 681:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   */
 682:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   template<typename _Container>
 683:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     _GLIBCXX20_CONSTEXPR
 684:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     inline back_insert_iterator<_Container>
 685:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     back_inserter(_Container& __x)
 686:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     { return back_insert_iterator<_Container>(__x); }
 687:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 688:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   /**
 689:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 690:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *
 691:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 692:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  Assigning a T to the iterator prepends it to the container using
 693:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  push_front.
 694:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *
 695:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  Tip:  Using the front_inserter function to create these iterators can
 696:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  save typing.
 697:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   */
 698:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   template<typename _Container>
 699:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     class front_insert_iterator
 700:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 701:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     {
 702:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     protected:
 703:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       _Container* container;
 704:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 705:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     public:
 706:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 707:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       typedef _Container          container_type;
 708:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** #if __cplusplus > 201703L
 709:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       using difference_type = ptrdiff_t;
 710:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 711:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       constexpr front_insert_iterator() noexcept : container(nullptr) { }
 712:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** #endif
 713:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 714:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       /// The only way to create this %iterator is with a container.
 715:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       explicit _GLIBCXX20_CONSTEXPR
 716:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       front_insert_iterator(_Container& __x)
 717:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       : container(std::__addressof(__x)) { }
 718:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 719:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       /**
ARM GAS  /tmp/ccw5fbVv.s 			page 273


 720:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *  @param  __value  An instance of whatever type
 721:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 722:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *                 reference-to-const T for container<T>.
 723:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 724:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *
 725:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *  This kind of %iterator doesn't really have a @a position in the
 726:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *  container (you can think of the position as being permanently at
 727:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *  the front, if you like).  Assigning a value to the %iterator will
 728:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *  always prepend the value to the front of the container.
 729:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       */
 730:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** #if __cplusplus < 201103L
 731:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       front_insert_iterator&
 732:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 733:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       {
 734:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	container->push_front(__value);
 735:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	return *this;
 736:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       }
 737:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** #else
 738:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 739:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       front_insert_iterator&
 740:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 741:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       {
 742:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	container->push_front(__value);
 743:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	return *this;
 744:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       }
 745:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 746:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 747:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       front_insert_iterator&
 748:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 749:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       {
 750:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	container->push_front(std::move(__value));
 751:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	return *this;
 752:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       }
 753:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** #endif
 754:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 755:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       /// Simply returns *this.
 756:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 757:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       front_insert_iterator&
 758:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       operator*()
 759:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       { return *this; }
 760:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 761:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 762:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 763:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       front_insert_iterator&
 764:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       operator++()
 765:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       { return *this; }
 766:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 767:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 768:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 769:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       front_insert_iterator
 770:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       operator++(int)
 771:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       { return *this; }
 772:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     };
 773:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 774:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   /**
 775:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  @param  __x  A container of arbitrary type.
 776:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  @return  An instance of front_insert_iterator working on @p x.
ARM GAS  /tmp/ccw5fbVv.s 			page 274


 777:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *
 778:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  This wrapper function helps in creating front_insert_iterator instances.
 779:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 780:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 781:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 782:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 783:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  types for you.
 784:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   */
 785:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   template<typename _Container>
 786:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     _GLIBCXX20_CONSTEXPR
 787:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     inline front_insert_iterator<_Container>
 788:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     front_inserter(_Container& __x)
 789:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     { return front_insert_iterator<_Container>(__x); }
 790:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 791:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   /**
 792:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 793:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *
 794:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 795:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  Assigning a T to the iterator inserts it in the container at the
 796:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  %iterator's position, rather than overwriting the value at that
 797:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  position.
 798:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *
 799:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  (Sequences will actually insert a @e copy of the value before the
 800:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  %iterator's position.)
 801:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *
 802:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  Tip:  Using the inserter function to create these iterators can
 803:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  save typing.
 804:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   */
 805:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   template<typename _Container>
 806:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     class insert_iterator
 807:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 808:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     {
 809:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** #if __cplusplus > 201703L && defined __cpp_lib_concepts
 810:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       using _Iter = std::__detail::__range_iter_t<_Container>;
 811:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 812:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     protected:
 813:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       _Container* container = nullptr;
 814:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       _Iter iter = _Iter();
 815:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** #else
 816:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       typedef typename _Container::iterator		_Iter;
 817:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 818:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     protected:
 819:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       _Container* container;
 820:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       _Iter iter;
 821:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** #endif
 822:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 823:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     public:
 824:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 825:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       typedef _Container          container_type;
 826:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 827:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** #if __cplusplus > 201703L && defined __cpp_lib_concepts
 828:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       using difference_type = ptrdiff_t;
 829:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 830:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       insert_iterator() = default;
 831:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** #endif
 832:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 833:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       /**
ARM GAS  /tmp/ccw5fbVv.s 			page 275


 834:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *  The only way to create this %iterator is with a container and an
 835:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *  initial position (a normal %iterator into the container).
 836:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       */
 837:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 838:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       insert_iterator(_Container& __x, _Iter __i)
 839:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       : container(std::__addressof(__x)), iter(__i) {}
 840:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 841:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       /**
 842:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *  @param  __value  An instance of whatever type
 843:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 844:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *                 reference-to-const T for container<T>.
 845:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 846:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *
 847:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *  This kind of %iterator maintains its own position in the
 848:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *  container.  Assigning a value to the %iterator will insert the
 849:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *  value into the container at the place before the %iterator.
 850:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *
 851:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *  The position is maintained such that subsequent assignments will
 852:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *  insert values immediately after one another.  For example,
 853:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *  @code
 854:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *     // vector v contains A and Z
 855:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *
 856:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *     insert_iterator i (v, ++v.begin());
 857:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *     i = 1;
 858:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *     i = 2;
 859:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *     i = 3;
 860:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *
 861:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *     // vector v contains A, 1, 2, 3, and Z
 862:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****        *  @endcode
 863:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       */
 864:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** #if __cplusplus < 201103L
 865:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       insert_iterator&
 866:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 867:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       {
 868:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	iter = container->insert(iter, __value);
 869:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	++iter;
 870:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	return *this;
 871:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       }
 872:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** #else
 873:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 874:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       insert_iterator&
 875:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 876:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       {
 877:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	iter = container->insert(iter, __value);
 878:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	++iter;
 879:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	return *this;
 880:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       }
 881:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 882:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 883:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       insert_iterator&
 884:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 885:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       {
 886:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	iter = container->insert(iter, std::move(__value));
 887:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	++iter;
 888:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 	return *this;
 889:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       }
 890:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** #endif
ARM GAS  /tmp/ccw5fbVv.s 			page 276


 891:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 892:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       /// Simply returns *this.
 893:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 894:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       insert_iterator&
 895:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       operator*()
 896:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       { return *this; }
 897:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 898:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 899:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 900:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       insert_iterator&
 901:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       operator++()
 902:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       { return *this; }
 903:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 904:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 905:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 906:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       insert_iterator&
 907:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       operator++(int)
 908:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       { return *this; }
 909:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     };
 910:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 911:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   /**
 912:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  @param __x  A container of arbitrary type.
 913:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  @param __i  An iterator into the container.
 914:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  @return  An instance of insert_iterator working on @p __x.
 915:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *
 916:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  This wrapper function helps in creating insert_iterator instances.
 917:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 918:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 919:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 920:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 921:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****    *  types for you.
 922:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   */
 923:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** #if __cplusplus > 201703L && defined __cpp_lib_concepts
 924:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   template<typename _Container>
 925:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     constexpr insert_iterator<_Container>
 926:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     inserter(_Container& __x, std::__detail::__range_iter_t<_Container> __i)
 927:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     { return insert_iterator<_Container>(__x, __i); }
 928:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** #else
 929:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   template<typename _Container, typename _Iterator>
 930:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     inline insert_iterator<_Container>
 931:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     inserter(_Container& __x, _Iterator __i)
 932:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     {
 933:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       return insert_iterator<_Container>(__x,
 934:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 					 typename _Container::iterator(__i));
 935:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     }
 936:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** #endif
 937:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 938:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   // @} group iterators
 939:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 940:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** _GLIBCXX_END_NAMESPACE_VERSION
 941:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** } // namespace
 942:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 943:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
 944:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** {
 945:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
 946:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 947:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   // This iterator adapter is @a normal in the sense that it does not
ARM GAS  /tmp/ccw5fbVv.s 			page 277


 948:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   // change the semantics of any of the operators of its iterator
 949:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   // parameter.  Its primary purpose is to convert an iterator that is
 950:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   // not a class, e.g. a pointer, into an iterator that is a class.
 951:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   // The _Container parameter exists solely so that different containers
 952:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   // using this template can instantiate different types, even if the
 953:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   // _Iterator parameter is the same.
 954:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 955:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     class __normal_iterator
 956:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     {
 957:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     protected:
 958:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       _Iterator _M_current;
 959:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 960:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       typedef std::iterator_traits<_Iterator>		__traits_type;
 961:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 962:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****     public:
 963:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       typedef _Iterator					iterator_type;
 964:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       typedef typename __traits_type::iterator_category iterator_category;
 965:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       typedef typename __traits_type::value_type  	value_type;
 966:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       typedef typename __traits_type::difference_type 	difference_type;
 967:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       typedef typename __traits_type::reference 	reference;
 968:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       typedef typename __traits_type::pointer   	pointer;
 969:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 970:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** #if __cplusplus > 201703L && __cpp_lib_concepts
 971:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       using iterator_concept = std::__detail::__iter_concept<_Iterator>;
 972:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** #endif
 973:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 974:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
 975:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       : _M_current(_Iterator()) { }
 976:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h **** 
 977:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       explicit _GLIBCXX20_CONSTEXPR
 978:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 1754              		.loc 29 978 7 view .LVU365
 1755              		.loc 29 978 7 is_stmt 0 view .LVU366
 1756              	.LBE2285:
 1757              	.LBE2284:
 1758              	.LBB2288:
 1759              	.LBI2288:
 829:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 1760              		.loc 2 829 7 is_stmt 1 view .LVU367
 1761              	.LBB2289:
 1762              	.LBI2289:
 1763              		.loc 29 978 7 view .LVU368
 1764              		.loc 29 978 7 is_stmt 0 view .LVU369
 1765              	.LBE2289:
 1766              	.LBE2288:
 1767              	.LBB2290:
 1768              	.LBI2290:
 937:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 1769              		.loc 28 937 5 is_stmt 1 view .LVU370
 1770              	.LBB2291:
 1771              	.LBI2291:
 913:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     { std::__fill_a1(__first, __last, __value); }
 1772              		.loc 28 913 5 view .LVU371
 1773              	.LBB2292:
 1774              	.LBI2292:
 899:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	      ::__gnu_cxx::__normal_iterator<_Ite, _Cont> __last,
 1775              		.loc 28 899 5 view .LVU372
ARM GAS  /tmp/ccw5fbVv.s 			page 278


 1776              	.LBB2293:
 1777              	.LBI2293:
 868:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	      const _Tp& __value)
 1778              		.loc 28 868 5 view .LVU373
 1779              	.LBB2294:
 872:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	*__first = __tmp;
 1780              		.loc 28 872 22 view .LVU374
 1781 004e 8242     		cmp	r2, r0
 1782 0050 03D0     		beq	.L75
 873:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     }
 1783              		.loc 28 873 11 is_stmt 0 view .LVU375
 1784 0052 121A     		subs	r2, r2, r0
 1785 0054 0021     		movs	r1, #0
 1786 0056 FFF7FEFF 		bl	memset
 1787              	.LVL78:
 1788              	.L75:
 873:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     }
 1789              		.loc 28 873 11 view .LVU376
 1790              	.LBE2294:
 1791              	.LBE2293:
 1792              	.LBE2292:
 1793              	.LBE2291:
 1794              	.LBE2290:
  65:ImpulseResponse/ImpulseResponse.cpp ****   mHistoryIndex = mHistoryRequired; 
 1795              		.loc 1 65 3 is_stmt 1 view .LVU377
 1796              		.loc 1 65 17 is_stmt 0 view .LVU378
 1797 005a 3561     		str	r5, [r6, #16]
  66:ImpulseResponse/ImpulseResponse.cpp **** 
  67:ImpulseResponse/ImpulseResponse.cpp **** }
 1798              		.loc 1 67 1 view .LVU379
 1799 005c 70BD     		pop	{r4, r5, r6, pc}
 1800              	.LVL79:
 1801              	.L60:
  54:ImpulseResponse/ImpulseResponse.cpp ****     //mWeight[j] = gain * mRawAudio[i];  
 1802              		.loc 1 54 3 is_stmt 1 view .LVU380
 1803              	.LBB2295:
  54:ImpulseResponse/ImpulseResponse.cpp ****     //mWeight[j] = gain * mRawAudio[i];  
 1804              		.loc 1 54 22 is_stmt 0 view .LVU381
 1805 005e 651E     		subs	r5, r4, #1
 1806              	.LVL80:
  54:ImpulseResponse/ImpulseResponse.cpp ****     //mWeight[j] = gain * mRawAudio[i];  
 1807              		.loc 1 54 42 is_stmt 1 view .LVU382
 1808 0060 002C     		cmp	r4, #0
 1809 0062 47D0     		beq	.L78
 1810              	.LVL81:
 1811              	.L65:
  56:ImpulseResponse/ImpulseResponse.cpp ****   mHistoryRequired = irLength - 1;
 1812              		.loc 1 56 5 view .LVU383
 1813              	.LBB2242:
 1814              	.LBI2242:
1043:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       {
 1815              		.loc 2 1043 7 view .LVU384
1043:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       {
 1816              		.loc 2 1043 7 is_stmt 0 view .LVU385
 1817              	.LBE2242:
 1818              	.LBB2244:
 1819              	.LBI2244:
ARM GAS  /tmp/ccw5fbVv.s 			page 279


 1820              		.file 30 "../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h"
   1:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** // This file is part of Eigen, a lightweight C++ template library
   2:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** // for linear algebra.
   3:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** //
   4:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** // Copyright (C) 2006-2010 Benoit Jacob <jacob.benoit.1@gmail.com>
   5:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** //
   6:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** // This Source Code Form is subject to the terms of the Mozilla
   7:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** // Public License v. 2.0. If a copy of the MPL was not distributed
   8:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** // with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
   9:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** 
  10:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** #ifndef EIGEN_DENSECOEFFSBASE_H
  11:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** #define EIGEN_DENSECOEFFSBASE_H
  12:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** 
  13:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** #include "./InternalHeaderCheck.h"
  14:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** 
  15:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** namespace Eigen {
  16:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** 
  17:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** namespace internal {
  18:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** template<typename T> struct add_const_on_value_type_if_arithmetic
  19:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** {
  20:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****   typedef std::conditional_t<is_arithmetic<T>::value, T, add_const_on_value_type_t<T>> type;
  21:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** };
  22:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** }
  23:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** 
  24:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** /** \brief Base class providing read-only coefficient access to matrices and arrays.
  25:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****   * \ingroup Core_Module
  26:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****   * \tparam Derived Type of the derived class
  27:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****   *
  28:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****   * \note #ReadOnlyAccessors Constant indicating read-only access
  29:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****   *
  30:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****   * This class defines the \c operator() \c const function and friends, which can be used to read s
  31:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****   * entries of a matrix or array.
  32:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****   *
  33:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****   * \sa DenseCoeffsBase<Derived, WriteAccessors>, DenseCoeffsBase<Derived, DirectAccessors>,
  34:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****   *     \ref TopicClassHierarchy
  35:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****   */
  36:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** template<typename Derived>
  37:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** class DenseCoeffsBase<Derived,ReadOnlyAccessors> : public EigenBase<Derived>
  38:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** {
  39:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****   public:
  40:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     typedef typename internal::traits<Derived>::StorageKind StorageKind;
  41:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     typedef typename internal::traits<Derived>::Scalar Scalar;
  42:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     typedef typename internal::packet_traits<Scalar>::type PacketScalar;
  43:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** 
  44:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     // Explanation for this CoeffReturnType typedef.
  45:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     // - This is the return type of the coeff() method.
  46:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     // - The LvalueBit means exactly that we can offer a coeffRef() method, which means exactly tha
  47:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     // to coeffs, which means exactly that we can have coeff() return a const reference (as opposed
  48:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     // - The is_arithmetic check is required since "const int", "const double", etc. will cause war
  49:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     // while the declaration of "const T", where T is a non arithmetic type does not. Always return
  50:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     // not possible, since the underlying expressions might not offer a valid address the reference
  51:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     typedef std::conditional_t<bool(internal::traits<Derived>::Flags&LvalueBit),
  52:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****                 const Scalar&,
  53:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****                 std::conditional_t<internal::is_arithmetic<Scalar>::value, Scalar, const Scalar>
  54:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****             > CoeffReturnType;
  55:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** 
  56:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     typedef typename internal::add_const_on_value_type_if_arithmetic<
ARM GAS  /tmp/ccw5fbVv.s 			page 280


  57:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****                          typename internal::packet_traits<Scalar>::type
  58:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****                      >::type PacketReturnType;
  59:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** 
  60:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     typedef EigenBase<Derived> Base;
  61:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     using Base::rows;
  62:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     using Base::cols;
  63:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     using Base::size;
  64:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     using Base::derived;
  65:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** 
  66:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_DEVICE_FUNC
  67:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_STRONG_INLINE Index rowIndexByOuterInner(Index outer, Index inner) const
  68:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     {
  69:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       return int(Derived::RowsAtCompileTime) == 1 ? 0
  70:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****           : int(Derived::ColsAtCompileTime) == 1 ? inner
  71:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****           : int(Derived::Flags)&RowMajorBit ? outer
  72:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****           : inner;
  73:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     }
  74:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** 
  75:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_DEVICE_FUNC
  76:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_STRONG_INLINE Index colIndexByOuterInner(Index outer, Index inner) const
  77:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     {
  78:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       return int(Derived::ColsAtCompileTime) == 1 ? 0
  79:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****           : int(Derived::RowsAtCompileTime) == 1 ? inner
  80:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****           : int(Derived::Flags)&RowMajorBit ? inner
  81:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****           : outer;
  82:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     }
  83:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** 
  84:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     /** Short version: don't use this function, use
  85:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       * \link operator()(Index,Index) const \endlink instead.
  86:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       *
  87:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       * Long version: this function is similar to
  88:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       * \link operator()(Index,Index) const \endlink, but without the assertion.
  89:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       * Use this for limiting the performance cost of debugging code when doing
  90:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       * repeated coefficient access. Only use this when it is guaranteed that the
  91:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       * parameters \a row and \a col are in range.
  92:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       *
  93:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       * If EIGEN_INTERNAL_DEBUGGING is defined, an assertion will be made, making this
  94:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       * function equivalent to \link operator()(Index,Index) const \endlink.
  95:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       *
  96:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       * \sa operator()(Index,Index) const, coeffRef(Index,Index), coeff(Index) const
  97:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       */
  98:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_DEVICE_FUNC
  99:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_STRONG_INLINE CoeffReturnType coeff(Index row, Index col) const
 100:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     {
 101:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       eigen_internal_assert(row >= 0 && row < rows()
 102:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****                          && col >= 0 && col < cols());
 103:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       return internal::evaluator<Derived>(derived()).coeff(row,col);
 104:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     }
 105:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** 
 106:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_DEVICE_FUNC
 107:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_STRONG_INLINE CoeffReturnType coeffByOuterInner(Index outer, Index inner) const
 108:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     {
 109:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       return coeff(rowIndexByOuterInner(outer, inner),
 110:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****                    colIndexByOuterInner(outer, inner));
 111:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     }
 112:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** 
 113:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     /** \returns the coefficient at given the given row and column.
ARM GAS  /tmp/ccw5fbVv.s 			page 281


 114:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       *
 115:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       * \sa operator()(Index,Index), operator[](Index)
 116:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       */
 117:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_DEVICE_FUNC
 118:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_STRONG_INLINE CoeffReturnType operator()(Index row, Index col) const
 119:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     {
 120:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       eigen_assert(row >= 0 && row < rows()
 121:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****           && col >= 0 && col < cols());
 122:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       return coeff(row, col);
 123:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     }
 124:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** 
 125:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     /** Short version: don't use this function, use
 126:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       * \link operator[](Index) const \endlink instead.
 127:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       *
 128:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       * Long version: this function is similar to
 129:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       * \link operator[](Index) const \endlink, but without the assertion.
 130:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       * Use this for limiting the performance cost of debugging code when doing
 131:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       * repeated coefficient access. Only use this when it is guaranteed that the
 132:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       * parameter \a index is in range.
 133:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       *
 134:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       * If EIGEN_INTERNAL_DEBUGGING is defined, an assertion will be made, making this
 135:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       * function equivalent to \link operator[](Index) const \endlink.
 136:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       *
 137:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       * \sa operator[](Index) const, coeffRef(Index), coeff(Index,Index) const
 138:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       */
 139:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** 
 140:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_DEVICE_FUNC
 141:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_STRONG_INLINE CoeffReturnType
 142:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     coeff(Index index) const
 143:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     {
 144:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       EIGEN_STATIC_ASSERT(internal::evaluator<Derived>::Flags & LinearAccessBit,
 145:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****                           THIS_COEFFICIENT_ACCESSOR_TAKING_ONE_ACCESS_IS_ONLY_FOR_EXPRESSIONS_ALLOW
 146:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       eigen_internal_assert(index >= 0 && index < size());
 147:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       return internal::evaluator<Derived>(derived()).coeff(index);
 148:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     }
 149:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** 
 150:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** 
 151:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     /** \returns the coefficient at given index.
 152:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       *
 153:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       * This method is allowed only for vector expressions, and for matrix expressions having the L
 154:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       *
 155:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       * \sa operator[](Index), operator()(Index,Index) const, x() const, y() const,
 156:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       * z() const, w() const
 157:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       */
 158:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** 
 159:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_DEVICE_FUNC
 160:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_STRONG_INLINE CoeffReturnType
 161:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     operator[](Index index) const
 162:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     {
 163:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       EIGEN_STATIC_ASSERT(Derived::IsVectorAtCompileTime,
 164:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****                           THE_BRACKET_OPERATOR_IS_ONLY_FOR_VECTORS__USE_THE_PARENTHESIS_OPERATOR_IN
 165:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       eigen_assert(index >= 0 && index < size());
 166:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       return coeff(index);
 167:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     }
 168:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** 
 169:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     /** \returns the coefficient at given index.
 170:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       *
ARM GAS  /tmp/ccw5fbVv.s 			page 282


 171:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       * This is synonymous to operator[](Index) const.
 172:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       *
 173:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       * This method is allowed only for vector expressions, and for matrix expressions having the L
 174:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       *
 175:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       * \sa operator[](Index), operator()(Index,Index) const, x() const, y() const,
 176:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       * z() const, w() const
 177:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       */
 178:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** 
 179:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_DEVICE_FUNC
 180:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_STRONG_INLINE CoeffReturnType
 181:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     operator()(Index index) const
 182:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     {
 183:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       eigen_assert(index >= 0 && index < size());
 184:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       return coeff(index);
 185:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     }
 186:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** 
 187:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     /** equivalent to operator[](0).  */
 188:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** 
 189:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_DEVICE_FUNC
 190:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_STRONG_INLINE CoeffReturnType
 191:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     x() const { return (*this)[0]; }
 192:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** 
 193:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     /** equivalent to operator[](1).  */
 194:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** 
 195:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_DEVICE_FUNC
 196:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_STRONG_INLINE CoeffReturnType
 197:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     y() const
 198:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     {
 199:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       EIGEN_STATIC_ASSERT(Derived::SizeAtCompileTime==-1 || Derived::SizeAtCompileTime>=2, OUT_OF_R
 200:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       return (*this)[1];
 201:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     }
 202:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** 
 203:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     /** equivalent to operator[](2).  */
 204:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** 
 205:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_DEVICE_FUNC
 206:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_STRONG_INLINE CoeffReturnType
 207:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     z() const
 208:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     {
 209:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       EIGEN_STATIC_ASSERT(Derived::SizeAtCompileTime==-1 || Derived::SizeAtCompileTime>=3, OUT_OF_R
 210:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       return (*this)[2];
 211:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     }
 212:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** 
 213:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     /** equivalent to operator[](3).  */
 214:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** 
 215:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_DEVICE_FUNC
 216:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_STRONG_INLINE CoeffReturnType
 217:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     w() const
 218:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     {
 219:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       EIGEN_STATIC_ASSERT(Derived::SizeAtCompileTime==-1 || Derived::SizeAtCompileTime>=4, OUT_OF_R
 220:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       return (*this)[3];
 221:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     }
 222:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** 
 223:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     /** \internal
 224:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       * \returns the packet of coefficients starting at the given row and column. It is your respon
 225:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       * to ensure that a packet really starts there. This method is only available on expressions h
 226:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       * PacketAccessBit.
 227:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       *
ARM GAS  /tmp/ccw5fbVv.s 			page 283


 228:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       * The \a LoadMode parameter may have the value \a #Aligned or \a #Unaligned. Its effect is to
 229:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       * the appropriate vectorization instruction. Aligned access is faster, but is only possible f
 230:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       * starting at an address which is a multiple of the packet size.
 231:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       */
 232:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** 
 233:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     template<int LoadMode>
 234:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_STRONG_INLINE PacketReturnType packet(Index row, Index col) const
 235:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     {
 236:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       typedef typename internal::packet_traits<Scalar>::type DefaultPacketType;
 237:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       eigen_internal_assert(row >= 0 && row < rows() && col >= 0 && col < cols());
 238:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       return internal::evaluator<Derived>(derived()).template packet<LoadMode,DefaultPacketType>(ro
 239:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     }
 240:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** 
 241:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** 
 242:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     /** \internal */
 243:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     template<int LoadMode>
 244:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_STRONG_INLINE PacketReturnType packetByOuterInner(Index outer, Index inner) const
 245:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     {
 246:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       return packet<LoadMode>(rowIndexByOuterInner(outer, inner),
 247:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****                               colIndexByOuterInner(outer, inner));
 248:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     }
 249:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** 
 250:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     /** \internal
 251:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       * \returns the packet of coefficients starting at the given index. It is your responsibility
 252:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       * to ensure that a packet really starts there. This method is only available on expressions h
 253:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       * PacketAccessBit and the LinearAccessBit.
 254:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       *
 255:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       * The \a LoadMode parameter may have the value \a #Aligned or \a #Unaligned. Its effect is to
 256:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       * the appropriate vectorization instruction. Aligned access is faster, but is only possible f
 257:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       * starting at an address which is a multiple of the packet size.
 258:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       */
 259:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** 
 260:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     template<int LoadMode>
 261:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_STRONG_INLINE PacketReturnType packet(Index index) const
 262:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     {
 263:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       EIGEN_STATIC_ASSERT(internal::evaluator<Derived>::Flags & LinearAccessBit,
 264:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****                           THIS_COEFFICIENT_ACCESSOR_TAKING_ONE_ACCESS_IS_ONLY_FOR_EXPRESSIONS_ALLOW
 265:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       typedef typename internal::packet_traits<Scalar>::type DefaultPacketType;
 266:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       eigen_internal_assert(index >= 0 && index < size());
 267:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       return internal::evaluator<Derived>(derived()).template packet<LoadMode,DefaultPacketType>(in
 268:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     }
 269:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** 
 270:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****   protected:
 271:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     // explanation: DenseBase is doing "using ..." on the methods from DenseCoeffsBase.
 272:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     // But some methods are only available in the DirectAccess case.
 273:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     // So we add dummy methods here with these names, so that "using... " doesn't fail.
 274:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     // It's not private so that the child class DenseBase can access them, and it's not public
 275:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     // either since it's an implementation detail, so has to be protected.
 276:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     void coeffRef();
 277:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     void coeffRefByOuterInner();
 278:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     void writePacket();
 279:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     void writePacketByOuterInner();
 280:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     void copyCoeff();
 281:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     void copyCoeffByOuterInner();
 282:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     void copyPacket();
 283:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     void copyPacketByOuterInner();
 284:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     void stride();
ARM GAS  /tmp/ccw5fbVv.s 			page 284


 285:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     void innerStride();
 286:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     void outerStride();
 287:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     void rowStride();
 288:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     void colStride();
 289:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** };
 290:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** 
 291:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** /** \brief Base class providing read/write coefficient access to matrices and arrays.
 292:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****   * \ingroup Core_Module
 293:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****   * \tparam Derived Type of the derived class
 294:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****   *
 295:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****   * \note #WriteAccessors Constant indicating read/write access
 296:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****   *
 297:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****   * This class defines the non-const \c operator() function and friends, which can be used to write
 298:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****   * entries of a matrix or array. This class inherits DenseCoeffsBase<Derived, ReadOnlyAccessors> w
 299:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****   * defines the const variant for reading specific entries.
 300:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****   *
 301:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****   * \sa DenseCoeffsBase<Derived, DirectAccessors>, \ref TopicClassHierarchy
 302:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****   */
 303:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** template<typename Derived>
 304:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** class DenseCoeffsBase<Derived, WriteAccessors> : public DenseCoeffsBase<Derived, ReadOnlyAccessors>
 305:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** {
 306:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****   public:
 307:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** 
 308:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     typedef DenseCoeffsBase<Derived, ReadOnlyAccessors> Base;
 309:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** 
 310:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     typedef typename internal::traits<Derived>::StorageKind StorageKind;
 311:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     typedef typename internal::traits<Derived>::Scalar Scalar;
 312:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     typedef typename internal::packet_traits<Scalar>::type PacketScalar;
 313:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     typedef typename NumTraits<Scalar>::Real RealScalar;
 314:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** 
 315:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     using Base::coeff;
 316:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     using Base::rows;
 317:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     using Base::cols;
 318:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     using Base::size;
 319:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     using Base::derived;
 320:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     using Base::rowIndexByOuterInner;
 321:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     using Base::colIndexByOuterInner;
 322:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     using Base::operator[];
 323:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     using Base::operator();
 324:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     using Base::x;
 325:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     using Base::y;
 326:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     using Base::z;
 327:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     using Base::w;
 328:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** 
 329:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     /** Short version: don't use this function, use
 330:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       * \link operator()(Index,Index) \endlink instead.
 331:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       *
 332:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       * Long version: this function is similar to
 333:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       * \link operator()(Index,Index) \endlink, but without the assertion.
 334:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       * Use this for limiting the performance cost of debugging code when doing
 335:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       * repeated coefficient access. Only use this when it is guaranteed that the
 336:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       * parameters \a row and \a col are in range.
 337:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       *
 338:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       * If EIGEN_INTERNAL_DEBUGGING is defined, an assertion will be made, making this
 339:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       * function equivalent to \link operator()(Index,Index) \endlink.
 340:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       *
 341:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       * \sa operator()(Index,Index), coeff(Index, Index) const, coeffRef(Index)
ARM GAS  /tmp/ccw5fbVv.s 			page 285


 342:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       */
 343:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_DEVICE_FUNC
 344:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_STRONG_INLINE Scalar& coeffRef(Index row, Index col)
 345:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     {
 346:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       eigen_internal_assert(row >= 0 && row < rows()
 347:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****                          && col >= 0 && col < cols());
 348:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       return internal::evaluator<Derived>(derived()).coeffRef(row,col);
 349:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     }
 350:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** 
 351:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_DEVICE_FUNC
 352:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_STRONG_INLINE Scalar&
 353:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     coeffRefByOuterInner(Index outer, Index inner)
 354:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     {
 355:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       return coeffRef(rowIndexByOuterInner(outer, inner),
 356:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****                       colIndexByOuterInner(outer, inner));
 357:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     }
 358:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** 
 359:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     /** \returns a reference to the coefficient at given the given row and column.
 360:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       *
 361:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       * \sa operator[](Index)
 362:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       */
 363:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** 
 364:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_DEVICE_FUNC
 365:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_STRONG_INLINE Scalar&
 366:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     operator()(Index row, Index col)
 367:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     {
 368:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       eigen_assert(row >= 0 && row < rows()
 369:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****           && col >= 0 && col < cols());
 370:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       return coeffRef(row, col);
 371:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     }
 372:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** 
 373:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** 
 374:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     /** Short version: don't use this function, use
 375:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       * \link operator[](Index) \endlink instead.
 376:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       *
 377:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       * Long version: this function is similar to
 378:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       * \link operator[](Index) \endlink, but without the assertion.
 379:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       * Use this for limiting the performance cost of debugging code when doing
 380:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       * repeated coefficient access. Only use this when it is guaranteed that the
 381:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       * parameters \a row and \a col are in range.
 382:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       *
 383:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       * If EIGEN_INTERNAL_DEBUGGING is defined, an assertion will be made, making this
 384:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       * function equivalent to \link operator[](Index) \endlink.
 385:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       *
 386:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       * \sa operator[](Index), coeff(Index) const, coeffRef(Index,Index)
 387:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       */
 388:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** 
 389:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_DEVICE_FUNC
 390:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_STRONG_INLINE Scalar&
 391:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     coeffRef(Index index)
 392:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     {
 393:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       EIGEN_STATIC_ASSERT(internal::evaluator<Derived>::Flags & LinearAccessBit,
 394:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****                           THIS_COEFFICIENT_ACCESSOR_TAKING_ONE_ACCESS_IS_ONLY_FOR_EXPRESSIONS_ALLOW
 395:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       eigen_internal_assert(index >= 0 && index < size());
 396:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       return internal::evaluator<Derived>(derived()).coeffRef(index);
 397:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     }
 398:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** 
ARM GAS  /tmp/ccw5fbVv.s 			page 286


 399:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     /** \returns a reference to the coefficient at given index.
 400:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       *
 401:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       * This method is allowed only for vector expressions, and for matrix expressions having the L
 402:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       *
 403:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       * \sa operator[](Index) const, operator()(Index,Index), x(), y(), z(), w()
 404:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       */
 405:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h **** 
 406:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_DEVICE_FUNC
 407:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     EIGEN_STRONG_INLINE Scalar&
 408:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     operator[](Index index)
 1821              		.loc 30 408 5 is_stmt 1 view .LVU386
 1822              	.LBB2245:
 409:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     {
 410:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       EIGEN_STATIC_ASSERT(Derived::IsVectorAtCompileTime,
 411:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****                           THE_BRACKET_OPERATOR_IS_ONLY_FOR_VECTORS__USE_THE_PARENTHESIS_OPERATOR_IN
 412:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****       eigen_assert(index >= 0 && index < size());
 1823              		.loc 30 412 7 is_stmt 0 view .LVU387
 1824 0064 AC42     		cmp	r4, r5
 1825 0066 37DD     		ble	.L70
 1826              		.loc 30 412 7 view .LVU388
 1827 0068 F36A     		ldr	r3, [r6, #44]
 1828 006a 691C     		adds	r1, r5, #1
 1829 006c 03EB8101 		add	r1, r3, r1, lsl #2
 1830              	.LBB2246:
 1831              	.LBB2247:
 1832              	.LBB2248:
 1833              	.LBB2249:
 1834              	.LBB2250:
 1835              	.LBB2251:
 1836              		.loc 5 682 54 view .LVU389
 1837 0070 2B46     		mov	r3, r5
 1838 0072 03E0     		b	.L68
 1839              	.LVL82:
 1840              	.L71:
 1841              		.loc 5 682 54 view .LVU390
 1842              	.LBE2251:
 1843              	.LBE2250:
 1844              	.LBE2249:
 1845              	.LBE2248:
 1846              	.LBE2247:
 1847              	.LBE2246:
 1848              	.LBE2245:
 1849              	.LBE2244:
  56:ImpulseResponse/ImpulseResponse.cpp ****   mHistoryRequired = irLength - 1;
 1850              		.loc 1 56 5 is_stmt 1 discriminator 2 view .LVU391
 1851              	.LBB2265:
1043:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       {
 1852              		.loc 2 1043 7 discriminator 2 view .LVU392
1043:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       {
 1853              		.loc 2 1043 7 is_stmt 0 discriminator 2 view .LVU393
 1854              	.LBE2265:
 1855              	.LBB2266:
 408:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     {
 1856              		.loc 30 408 5 is_stmt 1 discriminator 2 view .LVU394
 1857              	.LBB2263:
 1858              		.loc 30 412 7 is_stmt 0 discriminator 2 view .LVU395
 1859 0074 9C42     		cmp	r4, r3
ARM GAS  /tmp/ccw5fbVv.s 			page 287


 1860 0076 2FDD     		ble	.L70
 1861              		.loc 30 412 7 discriminator 2 view .LVU396
 1862 0078 581C     		adds	r0, r3, #1
 1863 007a 2DD0     		beq	.L70
 1864              	.LVL83:
 1865              	.L68:
 1866              	.LBB2262:
 1867              	.LBI2246:
 391:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseCoeffsBase.h ****     {
 1868              		.loc 30 391 5 is_stmt 1 view .LVU397
 1869              	.LBB2258:
 1870              	.LBI2247:
 284:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     : evaluator<PlainObjectBase<XprType> >(m)
 1871              		.loc 21 284 12 view .LVU398
 1872              	.LBB2257:
 1873              	.LBI2248:
 197:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****     : m_d(m.data(),IsVectorAtCompileTime ? 0 : m.outerStride())
 1874              		.loc 21 197 12 view .LVU399
 1875              	.LBB2253:
 1876              	.LBI2253:
 123:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 1877              		.loc 21 123 41 view .LVU400
 123:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE ~evaluator_base() {}
 1878              		.loc 21 123 41 is_stmt 0 view .LVU401
 1879              	.LBE2253:
 1880              	.LBB2254:
 1881              	.LBI2249:
 242:../../RTNeural/modules/Eigen/Eigen/src/Core/PlainObjectBase.h ****     { return m_storage.data(); }
 1882              		.loc 7 242 57 is_stmt 1 view .LVU402
 1883              	.LBB2252:
 1884              	.LBI2250:
 1885              		.loc 5 682 32 view .LVU403
 1886              		.loc 5 682 32 is_stmt 0 view .LVU404
 1887              	.LBE2252:
 1888              	.LBE2254:
 1889              	.LBB2255:
 1890              	.LBI2255:
 141:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   {
 1891              		.loc 21 141 3 is_stmt 1 view .LVU405
 1892              	.LBB2256:
 1893              	.LBI2256:
 1894              		.loc 22 950 79 view .LVU406
 1895              		.loc 22 950 79 is_stmt 0 view .LVU407
 1896              	.LBE2256:
 1897              	.LBE2255:
 1898              	.LBE2257:
 1899              	.LBE2258:
 1900              	.LBB2259:
 1901              	.LBI2259:
 275:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   : evaluator<PlainObjectBase<Matrix<Scalar, Rows, Cols, Options, MaxRows, MaxCols> > >
 1902              		.loc 21 275 8 is_stmt 1 view .LVU408
 1903              	.LBB2260:
 1904              	.LBI2260:
 165:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h ****   : evaluator_base<Derived>
 1905              		.loc 21 165 8 view .LVU409
 1906              	.LBB2261:
 1907              	.LBI2261:
ARM GAS  /tmp/ccw5fbVv.s 			page 288


 124:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** private:
 1908              		.loc 21 124 41 view .LVU410
 124:../../RTNeural/modules/Eigen/Eigen/src/Core/CoreEvaluators.h **** private:
 1909              		.loc 21 124 41 is_stmt 0 view .LVU411
 1910              	.LBE2261:
 1911              	.LBE2260:
 1912              	.LBE2259:
 1913              	.LBE2262:
 1914              	.LBE2263:
 1915              	.LBE2266:
  54:ImpulseResponse/ImpulseResponse.cpp ****     //mWeight[j] = gain * mRawAudio[i];  
 1916              		.loc 1 54 3 view .LVU412
 1917 007c 013B     		subs	r3, r3, #1
 1918              	.LVL84:
  56:ImpulseResponse/ImpulseResponse.cpp ****   mHistoryRequired = irLength - 1;
 1919              		.loc 1 56 16 view .LVU413
 1920 007e 52F8040B 		ldr	r0, [r2], #4	@ float
  54:ImpulseResponse/ImpulseResponse.cpp ****     //mWeight[j] = gain * mRawAudio[i];  
 1921              		.loc 1 54 42 view .LVU414
 1922 0082 A5EB030C 		sub	ip, r5, r3
  56:ImpulseResponse/ImpulseResponse.cpp ****   mHistoryRequired = irLength - 1;
 1923              		.loc 1 56 16 view .LVU415
 1924 0086 41F8040D 		str	r0, [r1, #-4]!	@ float
  54:ImpulseResponse/ImpulseResponse.cpp ****     //mWeight[j] = gain * mRawAudio[i];  
 1925              		.loc 1 54 3 is_stmt 1 view .LVU416
 1926              	.LVL85:
  54:ImpulseResponse/ImpulseResponse.cpp ****     //mWeight[j] = gain * mRawAudio[i];  
 1927              		.loc 1 54 42 view .LVU417
 1928 008a 6445     		cmp	r4, ip
 1929 008c F2D8     		bhi	.L71
 1930 008e D4E7     		b	.L66
 1931              	.LVL86:
 1932              	.L96:
  54:ImpulseResponse/ImpulseResponse.cpp ****     //mWeight[j] = gain * mRawAudio[i];  
 1933              		.loc 1 54 42 is_stmt 0 view .LVU418
 1934              	.LBE2295:
 1935              	.LBB2296:
 1936              	.LBB2280:
 942:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       }
 1937              		.loc 2 942 19 view .LVU419
 1938 0090 00EB8101 		add	r1, r0, r1, lsl #2
 1939              	.LVL87:
 1940              	.LBB2277:
 1941              	.LBI2277:
1760:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1761:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	const size_type __len = size() + (std::max)(size(), __n);
1762:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	return (__len < size() || __len > max_size()) ? max_size() : __len;
1763:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       }
1764:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1765:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       // Called by constructors to check initial size.
1766:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       static size_type
1767:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       _S_check_init_len(size_type __n, const allocator_type& __a)
1768:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       {
1769:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	if (__n > _S_max_size(_Tp_alloc_type(__a)))
1770:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  __throw_length_error(
1771:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	      __N("cannot create std::vector larger than max_size()"));
1772:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	return __n;
ARM GAS  /tmp/ccw5fbVv.s 			page 289


1773:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       }
1774:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1775:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       static size_type
1776:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
1777:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       {
1778:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
1779:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
1780:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	// (even if std::allocator_traits::max_size says we can).
1781:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	const size_t __diffmax
1782:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
1783:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	const size_t __allocmax = _Alloc_traits::max_size(__a);
1784:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	return (std::min)(__diffmax, __allocmax);
1785:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       }
1786:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1787:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       // Internal erase functions follow.
1788:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
1789:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
1790:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       // _M_assign_aux.
1791:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       void
1792:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 1942              		.loc 2 1792 7 is_stmt 1 view .LVU420
 1943              	.LBB2278:
1793:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       {
1794:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	if (size_type __n = this->_M_impl._M_finish - __pos)
 1944              		.loc 2 1794 2 is_stmt 0 view .LVU421
 1945 0094 8A42     		cmp	r2, r1
 1946 0096 DAD0     		beq	.L73
 1947 0098 0A46     		mov	r2, r1
 1948              	.LVL88:
1795:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  {
1796:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	    std::_Destroy(__pos, this->_M_impl._M_finish,
1797:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 			  _M_get_Tp_allocator());
1798:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	    this->_M_impl._M_finish = __pos;
 1949              		.loc 2 1798 30 view .LVU422
 1950 009a 7160     		str	r1, [r6, #4]
 1951              	.LVL89:
 1952              		.loc 2 1798 30 view .LVU423
 1953 009c D7E7     		b	.L73
 1954              	.LVL90:
 1955              	.L94:
 1956              		.loc 2 1798 30 view .LVU424
 1957              	.LBE2278:
 1958              	.LBE2277:
 1959              	.LBE2280:
 1960              	.LBE2296:
 1961              	.LBB2297:
 1962              	.LBB2235:
 1963              	.LBB2229:
 1964              	.LBB2223:
 1965              	.LBB2207:
 1966              	.LBI2207:
 496:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** {
 1967              		.loc 8 496 62 is_stmt 1 view .LVU425
 1968              	.LBB2208:
 1969              	.LBB2209:
 1970              	.LBI2209:
 281:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** {
ARM GAS  /tmp/ccw5fbVv.s 			page 290


 1971              		.loc 8 281 53 view .LVU426
 1972              	.LBB2210:
 1973              	.LBI2210:
 207:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** {
 1974              		.loc 8 207 32 view .LVU427
 1975              	.LBB2211:
 209:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   
 1976              		.loc 8 209 3 view .LVU428
 1977 009e A000     		lsls	r0, r4, #2
 1978              	.LVL91:
 209:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   
 1979              		.loc 8 209 3 is_stmt 0 view .LVU429
 1980 00a0 18D0     		beq	.L64
 211:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   #if (EIGEN_DEFAULT_ALIGN_BYTES==0) || EIGEN_MALLOC_ALREADY_ALIGNED
 1981              		.loc 8 211 3 is_stmt 1 view .LVU430
 222:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   #endif
 1982              		.loc 8 222 5 view .LVU431
 1983              	.LVL92:
 1984              	.LBB2212:
 1985              	.LBI2212:
 150:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** {
 1986              		.loc 8 150 32 view .LVU432
 1987              	.LBB2213:
 152:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** 
 1988              		.loc 8 152 3 view .LVU433
 154:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   EIGEN_USING_STD(malloc)
 1989              		.loc 8 154 3 view .LVU434
 155:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   void* original = malloc(size + alignment);
 1990              		.loc 8 155 3 view .LVU435
 156:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   if (original == 0) return 0;
 1991              		.loc 8 156 3 view .LVU436
 156:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   if (original == 0) return 0;
 1992              		.loc 8 156 26 is_stmt 0 view .LVU437
 1993 00a2 1030     		adds	r0, r0, #16
 1994              	.LVL93:
 156:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   if (original == 0) return 0;
 1995              		.loc 8 156 26 view .LVU438
 1996 00a4 FFF7FEFF 		bl	malloc
 1997              	.LVL94:
 157:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   uint8_t offset = static_cast<uint8_t>(alignment - (reinterpret_cast<std::size_t>(original) & (ali
 1998              		.loc 8 157 3 is_stmt 1 view .LVU439
 1999 00a8 A0B1     		cbz	r0, .L64
 158:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   void* aligned = static_cast<void*>(static_cast<uint8_t*>(original) + offset);
 2000              		.loc 8 158 3 view .LVU440
 158:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   void* aligned = static_cast<void*>(static_cast<uint8_t*>(original) + offset);
 2001              		.loc 8 158 94 is_stmt 0 view .LVU441
 2002 00aa 00F00F02 		and	r2, r0, #15
 158:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   void* aligned = static_cast<void*>(static_cast<uint8_t*>(original) + offset);
 2003              		.loc 8 158 11 view .LVU442
 2004 00ae C2F11002 		rsb	r2, r2, #16
 2005 00b2 D2B2     		uxtb	r2, r2
 2006              	.LVL95:
 159:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   *(static_cast<uint8_t*>(aligned) - 1) = offset;
 2007              		.loc 8 159 3 is_stmt 1 view .LVU443
 159:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   *(static_cast<uint8_t*>(aligned) - 1) = offset;
 2008              		.loc 8 159 9 is_stmt 0 view .LVU444
 2009 00b4 1044     		add	r0, r0, r2
ARM GAS  /tmp/ccw5fbVv.s 			page 291


 2010              	.LVL96:
 160:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   return aligned;
 2011              		.loc 8 160 3 is_stmt 1 view .LVU445
 160:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   return aligned;
 2012              		.loc 8 160 41 is_stmt 0 view .LVU446
 2013 00b6 00F8012C 		strb	r2, [r0, #-1]
 161:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** }
 2014              		.loc 8 161 3 is_stmt 1 view .LVU447
 2015              	.LVL97:
 2016              	.L63:
 161:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h **** }
 2017              		.loc 8 161 3 is_stmt 0 view .LVU448
 2018              	.LBE2213:
 2019              	.LBE2212:
 2020              	.LBE2211:
 2021              	.LBE2210:
 2022              	.LBE2209:
 2023              	.LBE2208:
 2024              	.LBE2207:
 2025              	.LBE2223:
 2026              	.LBE2229:
 2027              	.LBE2235:
 2028              	.LBE2297:
 2029              	.LBB2298:
  54:ImpulseResponse/ImpulseResponse.cpp ****     //mWeight[j] = gain * mRawAudio[i];  
 2030              		.loc 1 54 22 view .LVU449
 2031 00ba 651E     		subs	r5, r4, #1
 2032              	.LBB2267:
 2033              	.LBB2243:
1046:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       }
 2034              		.loc 2 1046 25 view .LVU450
 2035 00bc 7269     		ldr	r2, [r6, #20]
 2036              	.LBE2243:
 2037              	.LBE2267:
 2038              	.LBE2298:
 2039              	.LBB2299:
 2040              	.LBB2236:
 2041              	.LBB2230:
 2042              	.LBB2224:
 680:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     }
 2043              		.loc 5 680 14 view .LVU451
 2044 00be C6E90B04 		strd	r0, r4, [r6, #44]
 2045              	.LVL98:
 680:../../RTNeural/modules/Eigen/Eigen/src/Core/DenseStorage.h ****     }
 2046              		.loc 5 680 14 view .LVU452
 2047              	.LBE2224:
 2048              	.LBE2230:
 2049              	.LBE2236:
 2050              	.LBE2299:
  54:ImpulseResponse/ImpulseResponse.cpp ****     //mWeight[j] = gain * mRawAudio[i];  
 2051              		.loc 1 54 3 is_stmt 1 view .LVU453
 2052              	.LBB2300:
  54:ImpulseResponse/ImpulseResponse.cpp ****     //mWeight[j] = gain * mRawAudio[i];  
 2053              		.loc 1 54 42 view .LVU454
 2054 00c2 CFE7     		b	.L65
 2055              	.LVL99:
 2056              	.L95:
ARM GAS  /tmp/ccw5fbVv.s 			page 292


  54:ImpulseResponse/ImpulseResponse.cpp ****     //mWeight[j] = gain * mRawAudio[i];  
 2057              		.loc 1 54 42 is_stmt 0 view .LVU455
 2058              	.LBE2300:
 2059              	.LBB2301:
 2060              	.LBB2281:
 940:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	else if (__new_size < size())
 2061              		.loc 2 940 21 view .LVU456
 2062 00c4 3046     		mov	r0, r6
 2063 00c6 C91A     		subs	r1, r1, r3
 2064              	.LVL100:
 940:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	else if (__new_size < size())
 2065              		.loc 2 940 21 view .LVU457
 2066 00c8 FFF7FEFF 		bl	_ZNSt6vectorIfSaIfEE17_M_default_appendEj
 2067              	.LVL101:
 2068              	.LBE2281:
 2069              	.LBE2301:
  65:ImpulseResponse/ImpulseResponse.cpp **** 
 2070              		.loc 1 65 19 view .LVU458
 2071 00cc F568     		ldr	r5, [r6, #12]
 2072              	.LVL102:
 2073              	.LBB2302:
 2074              	.LBB2287:
 2075              	.LBB2286:
 979:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       : _M_current(__i) { }
 2076              		.loc 29 979 23 view .LVU459
 2077 00ce D6E90002 		ldrd	r0, r2, [r6]
 2078              	.LBE2286:
 2079              	.LBE2287:
 2080              	.LBE2302:
 2081              	.LBB2303:
 2082              	.LBB2282:
 2083 00d2 BCE7     		b	.L73
 2084              	.LVL103:
 2085              	.L64:
 2086              		.loc 29 979 23 view .LVU460
 2087              	.LBE2282:
 2088              	.LBE2303:
 2089              	.LBB2304:
 2090              	.LBB2237:
 2091              	.LBB2231:
 2092              	.LBB2225:
 2093              	.LBB2218:
 2094              	.LBB2217:
 2095              	.LBB2216:
 2096              	.LBB2215:
 2097              	.LBB2214:
 209:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   
 2098              		.loc 8 209 25 view .LVU461
 2099 00d4 0020     		movs	r0, #0
 2100 00d6 F0E7     		b	.L63
 2101              	.LVL104:
 2102              	.L70:
 209:../../RTNeural/modules/Eigen/Eigen/src/Core/util/Memory.h ****   
 2103              		.loc 8 209 25 view .LVU462
 2104              	.LBE2214:
 2105              	.LBE2215:
 2106              	.LBE2216:
ARM GAS  /tmp/ccw5fbVv.s 			page 293


 2107              	.LBE2217:
 2108              	.LBE2218:
 2109              	.LBE2225:
 2110              	.LBE2231:
 2111              	.LBE2237:
 2112              	.LBE2304:
 2113              	.LBB2305:
 2114              	.LBB2268:
 2115              	.LBB2264:
 2116              		.loc 30 412 7 view .LVU463
 2117 00d8 084B     		ldr	r3, .L97
 2118 00da 4FF4CE71 		mov	r1, #412
 2119 00de 084A     		ldr	r2, .L97+4
 2120 00e0 0848     		ldr	r0, .L97+8
 2121 00e2 FFF7FEFF 		bl	__assert_func
 2122              	.LVL105:
 2123              	.L93:
 2124              		.loc 30 412 7 view .LVU464
 2125              	.LBE2264:
 2126              	.LBE2268:
 2127              	.LBE2305:
 2128              	.LBB2306:
 2129              	.LBB2238:
 2130              		.loc 7 295 9 view .LVU465
 2131 00e6 084B     		ldr	r3, .L97+12
 2132 00e8 40F22711 		movw	r1, #295
 2133 00ec 074A     		ldr	r2, .L97+16
 2134 00ee 0848     		ldr	r0, .L97+20
 2135              	.LVL106:
 2136              		.loc 7 295 9 view .LVU466
 2137 00f0 FFF7FEFF 		bl	__assert_func
 2138              	.LVL107:
 2139              	.L78:
 2140              		.loc 7 295 9 view .LVU467
 2141              	.LBE2238:
 2142              	.LBE2306:
 2143              	.LBB2307:
  54:ImpulseResponse/ImpulseResponse.cpp ****     //mWeight[j] = gain * mRawAudio[i];  
 2144              		.loc 1 54 42 view .LVU468
 2145 00f4 4FF0FF35 		mov	r5, #-1
 2146              	.LVL108:
  54:ImpulseResponse/ImpulseResponse.cpp ****     //mWeight[j] = gain * mRawAudio[i];  
 2147              		.loc 1 54 42 view .LVU469
 2148 00f8 9FE7     		b	.L66
 2149              	.L98:
 2150 00fa 00BF     		.align	2
 2151              	.L97:
 2152 00fc 58010000 		.word	.LC10
 2153 0100 78010000 		.word	.LC11
 2154 0104 58020000 		.word	.LC12
 2155 0108 00000000 		.word	.LC7
 2156 010c 90000000 		.word	.LC8
 2157 0110 18010000 		.word	.LC9
 2158              	.LBE2307:
 2159              		.cfi_endproc
 2160              	.LFE8127:
 2162              		.section	.text._ZN15ImpulseResponse4InitESt6vectorIfSaIfEE,"ax",%progbits
ARM GAS  /tmp/ccw5fbVv.s 			page 294


 2163              		.align	1
 2164              		.p2align 2,,3
 2165              		.global	_ZN15ImpulseResponse4InitESt6vectorIfSaIfEE
 2166              		.syntax unified
 2167              		.thumb
 2168              		.thumb_func
 2169              		.fpu fpv5-d16
 2171              	_ZN15ImpulseResponse4InitESt6vectorIfSaIfEE:
 2172              	.LVL109:
 2173              	.LFB8120:
  26:ImpulseResponse/ImpulseResponse.cpp ****   mRawAudio = irData;
 2174              		.loc 1 26 1 is_stmt 1 view -0
 2175              		.cfi_startproc
 2176              		@ args = 0, pretend = 0, frame = 8
 2177              		@ frame_needed = 0, uses_anonymous_args = 0
  27:ImpulseResponse/ImpulseResponse.cpp ****   _SetWeights();
 2178              		.loc 1 27 15 is_stmt 0 view .LVU471
 2179 0000 00F11403 		add	r3, r0, #20
 2180              	.LBB2387:
 2181              	.LBB2388:
 201:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	{
 2182              		.loc 26 201 7 view .LVU472
 2183 0004 9942     		cmp	r1, r3
 2184              	.LBE2388:
 2185              	.LBE2387:
  26:ImpulseResponse/ImpulseResponse.cpp ****   mRawAudio = irData;
 2186              		.loc 1 26 1 view .LVU473
 2187 0006 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2188              		.cfi_def_cfa_offset 24
 2189              		.cfi_offset 4, -24
 2190              		.cfi_offset 5, -20
 2191              		.cfi_offset 6, -16
 2192              		.cfi_offset 7, -12
 2193              		.cfi_offset 8, -8
 2194              		.cfi_offset 14, -4
 2195 000a 0446     		mov	r4, r0
  27:ImpulseResponse/ImpulseResponse.cpp ****   _SetWeights();
 2196              		.loc 1 27 3 is_stmt 1 view .LVU474
 2197              	.LVL110:
 2198              	.LBB2495:
 2199              	.LBI2387:
 198:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc ****     operator=(const vector<_Tp, _Alloc>& __x)
 2200              		.loc 26 198 5 view .LVU475
 2201              	.LBE2495:
  26:ImpulseResponse/ImpulseResponse.cpp ****   mRawAudio = irData;
 2202              		.loc 1 26 1 is_stmt 0 view .LVU476
 2203 000c 82B0     		sub	sp, sp, #8
 2204              		.cfi_def_cfa_offset 32
 2205              	.LBB2496:
 2206              	.LBB2491:
 201:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	{
 2207              		.loc 26 201 7 view .LVU477
 2208 000e 16D0     		beq	.L100
 2209 0010 0D46     		mov	r5, r1
 2210              	.LVL111:
 2211              	.LBB2389:
 2212              	.LBB2390:
ARM GAS  /tmp/ccw5fbVv.s 			page 295


 2213              	.LBI2390:
 918:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 2214              		.loc 2 918 7 is_stmt 1 view .LVU478
 2215              	.LBE2390:
 2216              	.LBB2393:
 2217              	.LBB2394:
 2218              	.LBB2395:
1000:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 2219              		.loc 2 1000 21 is_stmt 0 view .LVU479
 2220 0012 4369     		ldr	r3, [r0, #20]
 2221              	.LVL112:
1000:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 2222              		.loc 2 1000 5 view .LVU480
 2223 0014 C769     		ldr	r7, [r0, #28]
 2224              	.LBE2395:
 2225              	.LBE2394:
 2226              	.LBE2393:
 2227              	.LBB2482:
 2228              	.LBB2391:
 919:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 2229              		.loc 2 919 66 view .LVU481
 2230 0016 D1E90018 		ldrd	r1, r8, [r1]
 2231              	.LVL113:
 919:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 2232              		.loc 2 919 66 view .LVU482
 2233              	.LBE2391:
 2234              	.LBE2482:
 2235              	.LBB2483:
 2236              	.LBB2397:
 2237              	.LBB2396:
1000:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 2238              		.loc 2 1000 5 view .LVU483
 2239 001a FF1A     		subs	r7, r7, r3
 2240              	.LBE2396:
 2241              	.LBE2397:
 2242              	.LBE2483:
 2243              	.LBB2484:
 2244              	.LBB2392:
 919:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 2245              		.loc 2 919 50 view .LVU484
 2246 001c A8EB0106 		sub	r6, r8, r1
 2247              	.LVL114:
 919:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 2248              		.loc 2 919 50 view .LVU485
 2249              	.LBE2392:
 2250              	.LBE2484:
 2251              	.LBB2485:
 2252              	.LBB2398:
 2253              	.LBI2394:
 998:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_end_of_storage
 2254              		.loc 2 998 7 is_stmt 1 view .LVU486
 998:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_end_of_storage
 2255              		.loc 2 998 7 is_stmt 0 view .LVU487
 2256              	.LBE2398:
 224:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    {
 2257              		.loc 26 224 4 view .LVU488
 2258 0020 BE42     		cmp	r6, r7
ARM GAS  /tmp/ccw5fbVv.s 			page 296


 2259 0022 12D8     		bhi	.L120
 2260              	.LVL115:
 2261              	.LBB2399:
 2262              	.LBI2399:
 918:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 2263              		.loc 2 918 7 is_stmt 1 view .LVU489
 2264              	.LBB2400:
 919:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 2265              		.loc 2 919 40 is_stmt 0 view .LVU490
 2266 0024 8069     		ldr	r0, [r0, #24]
 2267              	.LVL116:
 919:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 2268              		.loc 2 919 50 view .LVU491
 2269 0026 C21A     		subs	r2, r0, r3
 2270              	.LBE2400:
 2271              	.LBE2399:
 236:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    {
 2272              		.loc 26 236 9 view .LVU492
 2273 0028 9642     		cmp	r6, r2
 2274 002a 2DD8     		bhi	.L107
 2275              	.LVL117:
 2276              	.LBB2401:
 2277              	.LBI2401:
 820:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 2278              		.loc 2 820 7 is_stmt 1 view .LVU493
 2279              	.LBB2402:
 2280              	.LBI2402:
 978:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       : _M_current(__i) { }
 2281              		.loc 29 978 7 view .LVU494
 978:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       : _M_current(__i) { }
 2282              		.loc 29 978 7 is_stmt 0 view .LVU495
 2283              	.LBE2402:
 2284              	.LBE2401:
 2285              	.LBB2403:
 2286              	.LBI2403:
 838:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 2287              		.loc 2 838 7 is_stmt 1 view .LVU496
 2288              	.LBB2404:
 2289              	.LBI2404:
 978:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       : _M_current(__i) { }
 2290              		.loc 29 978 7 view .LVU497
 978:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       : _M_current(__i) { }
 2291              		.loc 29 978 7 is_stmt 0 view .LVU498
 2292              	.LBE2404:
 2293              	.LBE2403:
 2294              	.LBB2405:
 2295              	.LBI2405:
 811:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_start); }
 2296              		.loc 2 811 7 is_stmt 1 view .LVU499
 2297              	.LBB2406:
 2298              	.LBI2406:
 978:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       : _M_current(__i) { }
 2299              		.loc 29 978 7 view .LVU500
 978:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       : _M_current(__i) { }
 2300              		.loc 29 978 7 is_stmt 0 view .LVU501
 2301              	.LBE2406:
 2302              	.LBE2405:
ARM GAS  /tmp/ccw5fbVv.s 			page 297


 2303              	.LBB2407:
 2304              	.LBI2407:
 560:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 2305              		.loc 28 560 5 is_stmt 1 view .LVU502
 2306              	.LBB2408:
 2307              	.LBI2408:
 511:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 2308              		.loc 28 511 5 view .LVU503
 2309              	.LBB2409:
 2310              	.LBI2409:
 505:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 2311              		.loc 28 505 5 view .LVU504
 2312              	.LBB2410:
 2313              	.LBI2410:
 463:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 2314              		.loc 28 463 5 view .LVU505
 2315              	.LBB2411:
 2316              	.LBB2412:
 2317              	.LBI2412:
 415:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	{
 2318              		.loc 28 415 2 view .LVU506
 2319              	.LBB2413:
 425:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 2320              		.loc 28 425 4 is_stmt 0 view .LVU507
 2321 002c 8845     		cmp	r8, r1
 2322 002e 3CD0     		beq	.L119
 426:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  return __result + _Num;
 2323              		.loc 28 426 23 view .LVU508
 2324 0030 3246     		mov	r2, r6
 2325 0032 1846     		mov	r0, r3
 2326 0034 FFF7FEFF 		bl	memmove
 2327              	.LVL118:
 426:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  return __result + _Num;
 2328              		.loc 28 426 23 view .LVU509
 2329              	.LBE2413:
 2330              	.LBE2412:
 2331              	.LBE2411:
 2332              	.LBE2410:
 2333              	.LBE2409:
 2334              	.LBE2408:
 2335              	.LBE2407:
 2336              	.LBE2485:
 250:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	}
 2337              		.loc 26 250 53 view .LVU510
 2338 0038 6369     		ldr	r3, [r4, #20]
 2339 003a 1E44     		add	r6, r6, r3
 2340              	.LVL119:
 250:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	}
 2341              		.loc 26 250 28 view .LVU511
 2342 003c A661     		str	r6, [r4, #24]
 2343              	.LVL120:
 2344              	.L100:
 250:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	}
 2345              		.loc 26 250 28 view .LVU512
 2346              	.LBE2389:
 2347              	.LBE2491:
 2348              	.LBE2496:
ARM GAS  /tmp/ccw5fbVv.s 			page 298


  28:ImpulseResponse/ImpulseResponse.cpp **** }
 2349              		.loc 1 28 3 is_stmt 1 view .LVU513
  28:ImpulseResponse/ImpulseResponse.cpp **** }
 2350              		.loc 1 28 14 is_stmt 0 view .LVU514
 2351 003e 2046     		mov	r0, r4
  29:ImpulseResponse/ImpulseResponse.cpp **** 
 2352              		.loc 1 29 1 view .LVU515
 2353 0040 02B0     		add	sp, sp, #8
 2354              		.cfi_remember_state
 2355              		.cfi_def_cfa_offset 24
 2356              		@ sp needed
 2357 0042 BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 2358              		.cfi_restore 14
 2359              		.cfi_restore 8
 2360              		.cfi_restore 7
 2361              		.cfi_restore 6
 2362              		.cfi_restore 5
 2363              		.cfi_restore 4
 2364              		.cfi_def_cfa_offset 0
 2365              	.LVL121:
  28:ImpulseResponse/ImpulseResponse.cpp **** }
 2366              		.loc 1 28 14 view .LVU516
 2367 0046 FFF7FEBF 		b	_ZN15ImpulseResponse11_SetWeightsEv
 2368              	.LVL122:
 2369              	.L120:
 2370              		.cfi_restore_state
 2371              	.LBB2497:
 2372              	.LBB2492:
 2373              	.LBB2488:
 2374              	.LBB2486:
 2375              	.LBB2414:
 2376              	.LBB2415:
 2377              	.LBI2415:
 820:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 2378              		.loc 2 820 7 is_stmt 1 view .LVU517
 2379              	.LBB2416:
 2380              	.LBI2416:
 978:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       : _M_current(__i) { }
 2381              		.loc 29 978 7 view .LVU518
 978:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       : _M_current(__i) { }
 2382              		.loc 29 978 7 is_stmt 0 view .LVU519
 2383              	.LBE2416:
 2384              	.LBE2415:
 2385              	.LBB2417:
 2386              	.LBI2417:
 838:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 2387              		.loc 2 838 7 is_stmt 1 view .LVU520
 2388              	.LBB2418:
 2389              	.LBI2418:
 978:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       : _M_current(__i) { }
 2390              		.loc 29 978 7 view .LVU521
 978:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_iterator.h ****       : _M_current(__i) { }
 2391              		.loc 29 978 7 is_stmt 0 view .LVU522
 2392              	.LBE2418:
 2393              	.LBE2417:
 2394              	.LBB2419:
 2395              	.LBI2419:
ARM GAS  /tmp/ccw5fbVv.s 			page 299


1508:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 			     _ForwardIterator __first, _ForwardIterator __last)
 2396              		.loc 2 1508 2 is_stmt 1 view .LVU523
 2397              	.LBB2420:
 2398              	.LBB2421:
 2399              	.LBI2421:
 343:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       {
 2400              		.loc 2 343 7 view .LVU524
 2401              	.LBB2422:
 346:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       }
 2402              		.loc 2 346 18 is_stmt 0 view .LVU525
 2403 004a 002E     		cmp	r6, #0
 2404 004c 35D0     		beq	.L111
 2405              	.LVL123:
 2406              	.LBB2423:
 2407              	.LBI2423:
 459:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       { return __a.allocate(__n); }
 2408              		.loc 9 459 7 is_stmt 1 view .LVU526
 2409              	.LBB2424:
 2410              	.LBI2424:
 103:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****       {
 2411              		.loc 4 103 7 view .LVU527
 2412              	.LBB2425:
 105:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** 	  std::__throw_bad_alloc();
 2413              		.loc 4 105 2 is_stmt 0 view .LVU528
 2414 004e 1D4B     		ldr	r3, .L122
 2415 0050 9E42     		cmp	r6, r3
 2416 0052 34D8     		bhi	.L121
 115:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****       }
 2417              		.loc 4 115 41 view .LVU529
 2418 0054 3046     		mov	r0, r6
 2419              	.LVL124:
 115:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****       }
 2420              		.loc 4 115 41 view .LVU530
 2421 0056 0191     		str	r1, [sp, #4]
 2422 0058 FFF7FEFF 		bl	_Znwj
 2423              	.LVL125:
 2424              	.LBE2425:
 2425              	.LBE2424:
 2426              	.LBE2423:
 2427              	.LBE2422:
 2428              	.LBE2421:
 2429              	.LBE2420:
 2430              	.LBE2419:
 228:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 			    _M_get_Tp_allocator());
 2431              		.loc 26 228 21 view .LVU531
 2432 005c 6369     		ldr	r3, [r4, #20]
 232:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      this->_M_impl._M_start = __tmp;
 2433              		.loc 26 232 8 view .LVU532
 2434 005e E769     		ldr	r7, [r4, #28]
 2435              	.LBB2450:
 2436              	.LBB2447:
 2437              	.LBB2434:
 2438              	.LBB2432:
 2439              	.LBB2430:
 2440              	.LBB2428:
 2441              	.LBB2426:
 115:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****       }
ARM GAS  /tmp/ccw5fbVv.s 			page 300


 2442              		.loc 4 115 41 view .LVU533
 2443 0060 0546     		mov	r5, r0
 2444              	.LVL126:
 115:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****       }
 2445              		.loc 4 115 41 view .LVU534
 2446              	.LBE2426:
 2447              	.LBE2428:
 2448              	.LBE2430:
 2449 0062 0199     		ldr	r1, [sp, #4]
 2450              	.LBE2432:
 2451              	.LBE2434:
 2452              	.LBE2447:
 2453              	.LBE2450:
 232:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      this->_M_impl._M_start = __tmp;
 2454              		.loc 26 232 8 view .LVU535
 2455 0064 FF1A     		subs	r7, r7, r3
 2456              	.L102:
 2457              	.LVL127:
 2458              	.LBB2451:
 2459              	.LBB2448:
 2460              	.LBB2435:
 2461              	.LBI2435:
 323:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 			   _ForwardIterator __result, allocator<_Tp>&)
 2462              		.loc 27 323 5 is_stmt 1 view .LVU536
 2463              	.LBB2436:
 2464              	.LBI2436:
 125:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 		       _ForwardIterator __result)
 2465              		.loc 27 125 5 view .LVU537
 2466              	.LBB2437:
 2467              	.LBB2438:
 2468              	.LBI2438:
 107:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 		      _ForwardIterator __result)
 2469              		.loc 27 107 9 view .LVU538
 2470              	.LBB2439:
 2471              	.LBI2439:
 560:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 2472              		.loc 28 560 5 view .LVU539
 2473              	.LBB2440:
 2474              	.LBI2440:
 511:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 2475              		.loc 28 511 5 view .LVU540
 2476              	.LBB2441:
 2477              	.LBI2441:
 505:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 2478              		.loc 28 505 5 view .LVU541
 2479              	.LBB2442:
 2480              	.LBI2442:
 463:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 2481              		.loc 28 463 5 view .LVU542
 2482              	.LBB2443:
 2483              	.LBB2444:
 2484              	.LBI2444:
 415:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	{
 2485              		.loc 28 415 2 view .LVU543
 2486              	.LBB2445:
 425:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 2487              		.loc 28 425 4 is_stmt 0 view .LVU544
ARM GAS  /tmp/ccw5fbVv.s 			page 301


 2488 0066 8845     		cmp	r8, r1
 2489 0068 05D0     		beq	.L104
 426:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  return __result + _Num;
 2490              		.loc 28 426 23 view .LVU545
 2491 006a 3246     		mov	r2, r6
 2492 006c 2846     		mov	r0, r5
 2493 006e 0193     		str	r3, [sp, #4]
 2494 0070 FFF7FEFF 		bl	memcpy
 2495              	.LVL128:
 426:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  return __result + _Num;
 2496              		.loc 28 426 23 view .LVU546
 2497 0074 019B     		ldr	r3, [sp, #4]
 2498              	.L104:
 2499              	.LVL129:
 426:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  return __result + _Num;
 2500              		.loc 28 426 23 view .LVU547
 2501              	.LBE2445:
 2502              	.LBE2444:
 2503              	.LBE2443:
 2504              	.LBE2442:
 2505              	.LBE2441:
 2506              	.LBE2440:
 2507              	.LBE2439:
 2508              	.LBE2438:
 2509              	.LBE2437:
 2510              	.LBE2436:
 2511              	.LBE2435:
 2512              	.LBE2448:
 2513              	.LBE2451:
 2514              	.LBB2452:
 2515              	.LBI2452:
 350:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       {
 2516              		.loc 2 350 7 is_stmt 1 view .LVU548
 2517              	.LBB2453:
 353:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 2518              		.loc 2 353 2 is_stmt 0 view .LVU549
 2519 0076 1BB1     		cbz	r3, .L105
 2520              	.LVL130:
 2521              	.LBB2454:
 2522              	.LBI2454:
 491:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 2523              		.loc 9 491 7 is_stmt 1 view .LVU550
 2524              	.LBB2455:
 2525              	.LBB2456:
 2526              	.LBI2456:
 120:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h ****       {
 2527              		.loc 4 120 7 view .LVU551
 2528              	.LBB2457:
 2529              		.loc 4 133 19 is_stmt 0 view .LVU552
 2530 0078 3946     		mov	r1, r7
 2531 007a 1846     		mov	r0, r3
 2532 007c FFF7FEFF 		bl	_ZdlPvj
 2533              	.LVL131:
 2534              	.L105:
 2535              		.loc 4 133 19 view .LVU553
 2536              	.LBE2457:
 2537              	.LBE2456:
ARM GAS  /tmp/ccw5fbVv.s 			page 302


 2538              	.LBE2455:
 2539              	.LBE2454:
 2540              	.LBE2453:
 2541              	.LBE2452:
 234:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    }
 2542              		.loc 26 234 65 view .LVU554
 2543 0080 2E44     		add	r6, r6, r5
 2544              	.LVL132:
 233:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 2545              		.loc 26 233 31 view .LVU555
 2546 0082 6561     		str	r5, [r4, #20]
 234:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	    }
 2547              		.loc 26 234 40 view .LVU556
 2548 0084 E661     		str	r6, [r4, #28]
 2549              	.LBE2414:
 2550 0086 11E0     		b	.L106
 2551              	.LVL133:
 2552              	.L107:
 2553              	.LBB2459:
 2554              	.LBI2459:
 560:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 2555              		.loc 28 560 5 is_stmt 1 view .LVU557
 2556              	.LBB2460:
 2557              	.LBI2460:
 511:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 2558              		.loc 28 511 5 view .LVU558
 2559              	.LBB2461:
 2560              	.LBI2461:
 505:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 2561              		.loc 28 505 5 view .LVU559
 2562              	.LBB2462:
 2563              	.LBI2462:
 463:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 2564              		.loc 28 463 5 view .LVU560
 2565              	.LBB2463:
 2566              	.LBB2464:
 2567              	.LBI2464:
 415:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	{
 2568              		.loc 28 415 2 view .LVU561
 2569              	.LBB2465:
 425:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 2570              		.loc 28 425 4 is_stmt 0 view .LVU562
 2571 0088 3AB1     		cbz	r2, .L109
 426:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  return __result + _Num;
 2572              		.loc 28 426 23 view .LVU563
 2573 008a 1846     		mov	r0, r3
 2574 008c FFF7FEFF 		bl	memmove
 2575              	.LVL134:
 426:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  return __result + _Num;
 2576              		.loc 28 426 23 view .LVU564
 2577              	.LBE2465:
 2578              	.LBE2464:
 2579              	.LBE2463:
 2580              	.LBE2462:
 2581              	.LBE2461:
 2582              	.LBE2460:
 2583              	.LBE2459:
ARM GAS  /tmp/ccw5fbVv.s 			page 303


 2584              	.LBB2466:
 2585              	.LBB2467:
 919:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 2586              		.loc 2 919 66 view .LVU565
 2587 0090 D4E90530 		ldrd	r3, r0, [r4, #20]
 2588              	.LBE2467:
 2589              	.LBE2466:
 246:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 					  this->_M_impl._M_finish,
 2590              		.loc 26 246 20 view .LVU566
 2591 0094 D5E90018 		ldrd	r1, r8, [r5]
 2592              	.LBB2469:
 2593              	.LBB2468:
 919:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 2594              		.loc 2 919 50 view .LVU567
 2595 0098 C21A     		subs	r2, r0, r3
 2596              	.L109:
 2597              	.LVL135:
 919:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h **** 
 2598              		.loc 2 919 50 view .LVU568
 2599              	.LBE2468:
 2600              	.LBI2466:
 918:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 2601              		.loc 2 918 7 is_stmt 1 view .LVU569
 918:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 2602              		.loc 2 918 7 is_stmt 0 view .LVU570
 2603              	.LBE2469:
 245:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 					  __x._M_impl._M_finish,
 2604              		.loc 26 245 35 view .LVU571
 2605 009a 1144     		add	r1, r1, r2
 2606              	.LVL136:
 2607              	.LBB2470:
 2608              	.LBI2470:
 323:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 			   _ForwardIterator __result, allocator<_Tp>&)
 2609              		.loc 27 323 5 is_stmt 1 view .LVU572
 2610              	.LBB2471:
 2611              	.LBI2471:
 125:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 		       _ForwardIterator __result)
 2612              		.loc 27 125 5 view .LVU573
 2613              	.LBB2472:
 2614              	.LBB2473:
 2615              	.LBI2473:
 107:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_uninitialized.h **** 		      _ForwardIterator __result)
 2616              		.loc 27 107 9 view .LVU574
 2617              	.LBB2474:
 2618              	.LBI2474:
 560:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 2619              		.loc 28 560 5 view .LVU575
 2620              	.LBB2475:
 2621              	.LBI2475:
 511:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 2622              		.loc 28 511 5 view .LVU576
 2623              	.LBB2476:
 2624              	.LBI2476:
 505:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 2625              		.loc 28 505 5 view .LVU577
 2626              	.LBB2477:
 2627              	.LBI2477:
ARM GAS  /tmp/ccw5fbVv.s 			page 304


 463:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h ****     {
 2628              		.loc 28 463 5 view .LVU578
 2629              	.LBB2478:
 2630              	.LBB2479:
 2631              	.LBI2479:
 415:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	{
 2632              		.loc 28 415 2 view .LVU579
 2633              	.LBB2480:
 425:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 2634              		.loc 28 425 4 is_stmt 0 view .LVU580
 2635 009c 4145     		cmp	r1, r8
 2636 009e 04D0     		beq	.L119
 426:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  return __result + _Num;
 2637              		.loc 28 426 23 view .LVU581
 2638 00a0 A8EB0102 		sub	r2, r8, r1
 2639              	.LVL137:
 426:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  return __result + _Num;
 2640              		.loc 28 426 23 view .LVU582
 2641 00a4 FFF7FEFF 		bl	memmove
 2642              	.LVL138:
 426:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_algobase.h **** 	  return __result + _Num;
 2643              		.loc 28 426 23 view .LVU583
 2644              	.LBE2480:
 2645              	.LBE2479:
 2646              	.LBE2478:
 2647              	.LBE2477:
 2648              	.LBE2476:
 2649              	.LBE2475:
 2650              	.LBE2474:
 2651              	.LBE2473:
 2652              	.LBE2472:
 2653              	.LBE2471:
 2654              	.LBE2470:
 2655              	.LBE2486:
 250:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	}
 2656              		.loc 26 250 53 view .LVU584
 2657 00a8 6369     		ldr	r3, [r4, #20]
 2658              	.LVL139:
 2659              	.L119:
 250:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	}
 2660              		.loc 26 250 53 view .LVU585
 2661 00aa 1E44     		add	r6, r6, r3
 2662              	.LVL140:
 2663              	.L106:
 250:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	}
 2664              		.loc 26 250 53 view .LVU586
 2665              	.LBE2488:
 2666              	.LBE2492:
 2667              	.LBE2497:
  28:ImpulseResponse/ImpulseResponse.cpp **** }
 2668              		.loc 1 28 14 view .LVU587
 2669 00ac 2046     		mov	r0, r4
 2670              	.LBB2498:
 2671              	.LBB2493:
 2672              	.LBB2489:
 250:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	}
 2673              		.loc 26 250 28 view .LVU588
ARM GAS  /tmp/ccw5fbVv.s 			page 305


 2674 00ae A661     		str	r6, [r4, #24]
 2675              	.LVL141:
 250:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/vector.tcc **** 	}
 2676              		.loc 26 250 28 view .LVU589
 2677              	.LBE2489:
 2678              	.LBE2493:
 2679              	.LBE2498:
  28:ImpulseResponse/ImpulseResponse.cpp **** }
 2680              		.loc 1 28 3 is_stmt 1 view .LVU590
  29:ImpulseResponse/ImpulseResponse.cpp **** 
 2681              		.loc 1 29 1 is_stmt 0 view .LVU591
 2682 00b0 02B0     		add	sp, sp, #8
 2683              		.cfi_remember_state
 2684              		.cfi_def_cfa_offset 24
 2685              		@ sp needed
 2686 00b2 BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 2687              		.cfi_restore 14
 2688              		.cfi_restore 8
 2689              		.cfi_restore 7
 2690              		.cfi_restore 6
 2691              		.cfi_restore 5
 2692              		.cfi_restore 4
 2693              		.cfi_def_cfa_offset 0
 2694              	.LVL142:
  28:ImpulseResponse/ImpulseResponse.cpp **** }
 2695              		.loc 1 28 14 view .LVU592
 2696 00b6 FFF7FEBF 		b	_ZN15ImpulseResponse11_SetWeightsEv
 2697              	.LVL143:
 2698              	.L111:
 2699              		.cfi_restore_state
 2700              	.LBB2499:
 2701              	.LBB2494:
 2702              	.LBB2490:
 2703              	.LBB2487:
 2704              	.LBB2481:
 2705              	.LBB2458:
 2706              	.LBB2449:
 2707              	.LBB2446:
 2708              	.LBB2433:
 346:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       }
 2709              		.loc 2 346 18 view .LVU593
 2710 00ba 3546     		mov	r5, r6
 2711              	.LVL144:
 346:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits/stl_vector.h ****       }
 2712              		.loc 2 346 18 view .LVU594
 2713 00bc D3E7     		b	.L102
 2714              	.LVL145:
 2715              	.L121:
 2716              	.LBB2431:
 2717              	.LBB2429:
 2718              	.LBB2427:
 106:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** 
 2719              		.loc 4 106 26 view .LVU595
 2720 00be FFF7FEFF 		bl	_ZSt17__throw_bad_allocv
 2721              	.LVL146:
 2722              	.L123:
 106:/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/new_allocator.h **** 
ARM GAS  /tmp/ccw5fbVv.s 			page 306


 2723              		.loc 4 106 26 view .LVU596
 2724 00c2 00BF     		.align	2
 2725              	.L122:
 2726 00c4 FCFFFF7F 		.word	2147483644
 2727              	.LBE2427:
 2728              	.LBE2429:
 2729              	.LBE2431:
 2730              	.LBE2433:
 2731              	.LBE2446:
 2732              	.LBE2449:
 2733              	.LBE2458:
 2734              	.LBE2481:
 2735              	.LBE2487:
 2736              	.LBE2490:
 2737              	.LBE2494:
 2738              	.LBE2499:
 2739              		.cfi_endproc
 2740              	.LFE8120:
 2742              		.text
 2743              	.Letext0:
 2744              		.file 31 "/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/machine/_defaul
 2745              		.file 32 "/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/sys/_stdint.h"
 2746              		.file 33 "/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/stdint.h"
 2747              		.file 34 "/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/lib/gcc/arm-none-eabi/10.2.1/include/
 2748              		.file 35 "/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits
 2749              		.file 36 "/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cmat
 2750              		.file 37 "/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits
 2751              		.file 38 "/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cwch
 2752              		.file 39 "/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/new"
 2753              		.file 40 "/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits
 2754              		.file 41 "/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/arm-
 2755              		.file 42 "/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/type
 2756              		.file 43 "/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits
 2757              		.file 44 "/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits
 2758              		.file 45 "/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/debu
 2759              		.file 46 "/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits
 2760              		.file 47 "/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cstd
 2761              		.file 48 "/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cloc
 2762              		.file 49 "/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits
 2763              		.file 50 "/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cstd
 2764              		.file 51 "/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cstd
 2765              		.file 52 "/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/init
 2766              		.file 53 "/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits
 2767              		.file 54 "/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/comp
 2768              		.file 55 "/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/syst
 2769              		.file 56 "/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cwct
 2770              		.file 57 "/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cstd
 2771              		.file 58 "/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits
 2772              		.file 59 "/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/tupl
 2773              		.file 60 "/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/func
 2774              		.file 61 "/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/cstr
 2775              		.file 62 "/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits
 2776              		.file 63 "/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits
 2777              		.file 64 "/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/bits
 2778              		.file 65 "/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/ext/
 2779              		.file 66 "/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/sys/_types.h"
 2780              		.file 67 "/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/sys/reent.h"
ARM GAS  /tmp/ccw5fbVv.s 			page 307


 2781              		.file 68 "/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/sys/lock.h"
 2782              		.file 69 "/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/math.h"
 2783              		.file 70 "/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/stdlib.h"
 2784              		.file 71 "/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/c++/10.2.1/math
 2785              		.file 72 "/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/lib/gcc/arm-none-eabi/10.2.1/include/
 2786              		.file 73 "/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/wchar.h"
 2787              		.file 74 "/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/locale.h"
 2788              		.file 75 "/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/stdio.h"
 2789              		.file 76 "/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/wctype.h"
 2790              		.file 77 "/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/string.h"
 2791              		.file 78 "../../RTNeural/modules/Eigen/Eigen/Core"
 2792              		.file 79 "../../RTNeural/modules/Eigen/Eigen/src/Core/util/Constants.h"
 2793              		.file 80 "../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/BFloat16.h"
 2794              		.file 81 "../../RTNeural/modules/Eigen/Eigen/src/Core/util/IndexedViewHelper.h"
 2795              		.file 82 "../../RTNeural/modules/Eigen/Eigen/src/Core/util/IntegralConstant.h"
 2796              		.file 83 "../../RTNeural/modules/Eigen/Eigen/src/Core/products/GeneralBlockPanelKernel.h"
 2797              		.file 84 "../../RTNeural/modules/Eigen/Eigen/src/Core/util/Meta.h"
 2798              		.file 85 "../../RTNeural/modules/Eigen/Eigen/src/Core/util/ForwardDeclarations.h"
 2799              		.file 86 "../../RTNeural/modules/Eigen/Eigen/src/Core/NumTraits.h"
 2800              		.file 87 "../../RTNeural/modules/Eigen/Eigen/src/Core/arch/Default/Half.h"
 2801              		.file 88 "<built-in>"
 2802              		.file 89 "../../RTNeural/modules/Eigen/Eigen/src/Core/util/SymbolicIndex.h"
 2803              		.file 90 "../../RTNeural/modules/Eigen/Eigen/src/Core/util/ReshapedHelper.h"
 2804              		.file 91 "../../RTNeural/modules/Eigen/Eigen/src/Core/ArithmeticSequence.h"
 2805              		.file 92 "../../RTNeural/modules/Eigen/Eigen/src/Core/IO.h"
 2806              		.file 93 "../../RTNeural/modules/Eigen/Eigen/src/Core/../plugins/MatrixCwiseUnaryOps.h"
 2807              		.file 94 "../../RTNeural/modules/Eigen/Eigen/src/Core/../plugins/MatrixCwiseBinaryOps.h"
 2808              		.file 95 "../../RTNeural/modules/Eigen/Eigen/src/Core/Assign.h"
 2809              		.file 96 "../../RTNeural/modules/Eigen/Eigen/src/Core/StableNorm.h"
 2810              		.file 97 "../../RTNeural/modules/Eigen/Eigen/src/Core/Transpose.h"
 2811              		.file 98 "../../RTNeural/modules/Eigen/Eigen/src/Core/Diagonal.h"
 2812              		.file 99 "../../RTNeural/modules/Eigen/Eigen/src/Core/CwiseNullaryOp.h"
 2813              		.file 100 "../../RTNeural/modules/Eigen/Eigen/src/Core/DiagonalMatrix.h"
 2814              		.file 101 "../../RTNeural/modules/Eigen/Eigen/src/Core/PermutationMatrix.h"
 2815              		.file 102 "../../RTNeural/modules/Eigen/Eigen/src/Core/SkewSymmetricMatrix3.h"
 2816              		.file 103 "../../RTNeural/modules/Eigen/Eigen/src/Core/TriangularMatrix.h"
 2817              		.file 104 "../../RTNeural/modules/Eigen/Eigen/src/Core/NoAlias.h"
 2818              		.file 105 "../../RTNeural/modules/Eigen/Eigen/src/LU/InverseImpl.h"
 2819              		.file 106 "../../RTNeural/modules/Eigen/Eigen/src/LU/Determinant.h"
 2820              		.file 107 "../../RTNeural/modules/Eigen/Eigen/src/Cholesky/LLT.h"
 2821              		.file 108 "../../RTNeural/modules/Eigen/Eigen/src/Cholesky/LDLT.h"
 2822              		.file 109 "../../RTNeural/modules/Eigen/Eigen/src/QR/HouseholderQR.h"
 2823              		.file 110 "../../RTNeural/modules/Eigen/Eigen/src/Eigenvalues/MatrixBaseEigenvalues.h"
 2824              		.file 111 "../../RTNeural/modules/Eigen/Eigen/src/Geometry/OrthoMethods.h"
 2825              		.file 112 "../../RTNeural/modules/Eigen/Eigen/src/Geometry/EulerAngles.h"
 2826              		.file 113 "../../RTNeural/modules/Eigen/Eigen/src/Geometry/Homogeneous.h"
 2827              		.file 114 "../../RTNeural/modules/Eigen/Eigen/src/Householder/Householder.h"
 2828              		.file 115 "../../RTNeural/modules/Eigen/Eigen/src/Core/CommaInitializer.h"
 2829              		.file 116 "../../RTNeural/modules/Eigen/Eigen/src/Core/Random.h"
 2830              		.file 117 "../../RTNeural/modules/Eigen/Eigen/src/Core/Fuzzy.h"
 2831              		.file 118 "../../RTNeural/modules/Eigen/Eigen/src/Core/Visitor.h"
 2832              		.file 119 "../../RTNeural/modules/Eigen/Eigen/src/Core/SelfCwiseBinaryOp.h"
 2833              		.file 120 "../../RTNeural/modules/Eigen/Eigen/src/Core/NestByValue.h"
 2834              		.file 121 "../../RTNeural/modules/Eigen/Eigen/src/Core/VectorwiseOp.h"
 2835              		.file 122 "../../RTNeural/modules/Eigen/Eigen/src/Core/Reverse.h"
 2836              		.file 123 "../../RTNeural/modules/Eigen/Eigen/src/Core/StlIterators.h"
 2837              		.file 124 "../../RTNeural/modules/Eigen/Eigen/src/Core/../plugins/CommonCwiseUnaryOps.h"
ARM GAS  /tmp/ccw5fbVv.s 			page 308


 2838              		.file 125 "../../RTNeural/modules/Eigen/Eigen/src/Core/../plugins/BlockMethods.h"
 2839              		.file 126 "../../RTNeural/modules/Eigen/Eigen/src/Core/../plugins/ReshapedMethods.h"
 2840              		.file 127 "ImpulseResponse/dsp.h"
 2841              		.file 128 "ImpulseResponse/ImpulseResponse.h"
 2842              		.file 129 "/home/green/bin/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/assert.h"
ARM GAS  /tmp/ccw5fbVv.s 			page 309


DEFINED SYMBOLS
                            *ABS*:0000000000000000 ImpulseResponse.cpp
     /tmp/ccw5fbVv.s:17     .text._ZN15ImpulseResponseC2Ev:0000000000000000 $t
     /tmp/ccw5fbVv.s:26     .text._ZN15ImpulseResponseC2Ev:0000000000000000 _ZN15ImpulseResponseC2Ev
     /tmp/ccw5fbVv.s:26     .text._ZN15ImpulseResponseC2Ev:0000000000000000 _ZN15ImpulseResponseC1Ev
     /tmp/ccw5fbVv.s:140    .text._ZN15ImpulseResponseD2Ev:0000000000000000 $t
     /tmp/ccw5fbVv.s:148    .text._ZN15ImpulseResponseD2Ev:0000000000000000 _ZN15ImpulseResponseD2Ev
     /tmp/ccw5fbVv.s:148    .text._ZN15ImpulseResponseD2Ev:0000000000000000 _ZN15ImpulseResponseD1Ev
     /tmp/ccw5fbVv.s:360    .rodata._ZN15ImpulseResponse7ProcessEf.str1.4:0000000000000000 $d
     /tmp/ccw5fbVv.s:394    .text._ZN15ImpulseResponse7ProcessEf:0000000000000000 $t
     /tmp/ccw5fbVv.s:402    .text._ZN15ImpulseResponse7ProcessEf:0000000000000000 _ZN15ImpulseResponse7ProcessEf
     /tmp/ccw5fbVv.s:973    .text._ZN15ImpulseResponse7ProcessEf:000000000000007c $d
     /tmp/ccw5fbVv.s:987    .rodata._ZNSt6vectorIfSaIfEE17_M_default_appendEj.str1.4:0000000000000000 $d
     /tmp/ccw5fbVv.s:991    .text._ZNSt6vectorIfSaIfEE17_M_default_appendEj:0000000000000000 $t
     /tmp/ccw5fbVv.s:999    .text._ZNSt6vectorIfSaIfEE17_M_default_appendEj:0000000000000000 _ZNSt6vectorIfSaIfEE17_M_default_appendEj
     /tmp/ccw5fbVv.s:1493   .text._ZNSt6vectorIfSaIfEE17_M_default_appendEj:00000000000000d0 $d
     /tmp/ccw5fbVv.s:1505   .rodata._ZN15ImpulseResponse11_SetWeightsEv.str1.4:0000000000000000 $d
     /tmp/ccw5fbVv.s:1534   .text._ZN15ImpulseResponse11_SetWeightsEv:0000000000000000 $t
     /tmp/ccw5fbVv.s:1542   .text._ZN15ImpulseResponse11_SetWeightsEv:0000000000000000 _ZN15ImpulseResponse11_SetWeightsEv
     /tmp/ccw5fbVv.s:2152   .text._ZN15ImpulseResponse11_SetWeightsEv:00000000000000fc $d
     /tmp/ccw5fbVv.s:2163   .text._ZN15ImpulseResponse4InitESt6vectorIfSaIfEE:0000000000000000 $t
     /tmp/ccw5fbVv.s:2171   .text._ZN15ImpulseResponse4InitESt6vectorIfSaIfEE:0000000000000000 _ZN15ImpulseResponse4InitESt6vectorIfSaIfEE
     /tmp/ccw5fbVv.s:2726   .text._ZN15ImpulseResponse4InitESt6vectorIfSaIfEE:00000000000000c4 $d

UNDEFINED SYMBOLS
_ZN7HistoryC2Ev
free
_ZdlPvj
_ZN7HistoryD2Ev
_ZN7History14_UpdateHistoryEf
_ZN7History20_AdvanceHistoryIndexEj
__assert_func
memset
memmove
_Znwj
_ZSt20__throw_length_errorPKc
malloc
memcpy
_ZSt17__throw_bad_allocv
